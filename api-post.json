{
  "AI": [
    {
      "method": "POST",
      "path": "/api/ai/andi",
      "summary": "andiserach",
      "description": "This API endpoint allows users to interact with the Andi Search AI to get answers to their queries. It functions by automating a browser to simulate user input on the Andi Search website, extracting the AI-generated response. This can be used for various applications such as intelligent chatbots, automated information retrieval, or integrating AI-powered search capabilities into other systems. The API takes a single query parameter 'q' representing the user's question, and returns the AI's response in a structured JSON format.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/bard",
      "summary": "bard",
      "description": "This API endpoint allows you to interact with Google Bard by sending a query in the request body and receiving a text-based response. It's designed for simple conversational AI interactions, enabling users to ask questions or provide prompts and get relevant information back from the Bard model. The API handles the underlying requests to Google's Gemini service and extracts the core text response for easy consumption. This can be used for chatbots, content generation, or integrating AI Q&A into applications. The output is a plain text response from Bard, with bold formatting converted to asterisks for simplicity.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/bibleai",
      "summary": "Bible AI",
      "description": "This API endpoint enables users to search the Bible and related content via a POST request with an AI-powered engine. You can submit questions or topics in the request body, and the AI will provide comprehensive answers, relevant biblical verses, and supplementary articles. The endpoint allows for specifying a preferred Bible translation, making it adaptable for various user needs. This is an excellent tool for developers building applications that require in-depth biblical research, theological study, or quick scriptural references.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/blackboxai",
      "summary": "blackboxai",
      "description": "This API endpoint enables you to interact with the BlackboxAI model by sending text content within the JSON request body. BlackboxAI is designed for processing natural language and generating responses, making it suitable for tasks such as chatbots, intelligent assistants, and automated content creation. By using a POST request, you can securely send more complex or longer content inputs. The endpoint expects a 'content' field in the JSON body and returns the AI's generated 'result', providing a flexible way to integrate AI capabilities into your applications.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/cici",
      "summary": "cici",
      "description": "This API endpoint offers POST method access to CICI AI for more complex interactions. It accepts JSON payloads with text content and returns comprehensive AI responses including source references when available. This method is suitable for applications that need to send structured data or longer content to the AI, such as document analysis, complex queries, or integration with backend systems requiring detailed AI responses.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/dbrx-instruct",
      "summary": "DBRX Instruct",
      "description": "This API endpoint facilitates interaction with the DBRX Instruct AI model by accepting text content within the JSON request body. DBRX Instruct is capable of generating detailed and coherent responses based on the provided input, making it suitable for applications requiring sophisticated natural language understanding and generation. This method is ideal for sending longer or more complex prompts, enabling robust AI-driven functionalities such as content creation, conversational agents, or automated customer support.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/deepseek-llm-67b-chat",
      "summary": "deepseek llm 67b chat",
      "description": "This API endpoint provides access to the DeepSeek LLM 67B Chat model, allowing users to send text content within the JSON request body and receive an AI-generated response. The DeepSeek LLM 67B Chat model is a powerful large language model capable of engaging in coherent conversations, generating creative text formats, and providing informative answers based on the input. This POST route is suitable for integrating advanced AI chat functionalities into applications that require more complex or longer text inputs.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/felo",
      "summary": "felo",
      "description": "This API endpoint enables you to get an AI-generated response from Felo by sending a query in the JSON request body. Felo is an advanced AI service designed for natural language processing, capable of understanding complex questions and providing comprehensive answers, often accompanied by source information. This POST route is suitable for applications requiring more robust or longer text inputs for AI interaction, such as detailed Q&A systems, content summarizers, or research tools.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/gandalf",
      "summary": "gandalf lakera",
      "description": "This API endpoint provides access to the Gandalf Lakera AI, allowing users to submit a prompt via a JSON request body and receive an AI-generated response. Gandalf Lakera is designed to test the robustness and security of large language models against various prompts. This endpoint is suitable for integrating a secure AI interaction mechanism into applications, enabling developers to experiment with prompt engineering and analyze the AI's responses in a controlled environment. The output is the AI's answer to the provided prompt.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/gemini",
      "summary": "gemini [ BETA ]",
      "description": "This API endpoint offers a BETA version interface to interact with the Gemini AI model using POST requests with file upload support. Users can send text prompts along with optional file uploads (images, videos, audio, documents), system prompts, and conversation context (conversationID, responseID, choiceID) via multipart/form-data. A valid Google Gemini authentication cookie is required. This endpoint supports multimodal AI interactions with direct file uploads and stateful conversations, making it ideal for complex applications requiring rich AI capabilities with media processing.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/gemini-lite",
      "summary": "gemini lite",
      "description": "An advanced AI endpoint utilizing the Gemini model to provide conversational responses. It can handle text-based prompts and can also process images by accepting an image URL. This API is designed for a wide range of use cases including Q&A, content generation, and image analysis. Users can specify a prompt and, optionally, a model and an image URL. The API will respond with a generated text based on the input. This is a versatile tool for developers needing to integrate a powerful AI chat functionality into their applications. The endpoint performs comprehensive validation on all inputs to ensure data integrity and provides clear, structured error responses for easy debugging. This API ensures reliable performance with robust error handling for a seamless user experience.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/getliner",
      "summary": "getliner AI",
      "description": "This API endpoint allows users to interact with getliner AI by sending a text query within a JSON request body. It's designed for applications requiring structured and programmatic interaction with the AI for various tasks, including answering complex questions, generating creative content, or conducting research. The JSON request body must include a 'text' field for the user's input. The API will return the AI's generated response.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/gita",
      "summary": "gita",
      "description": "This API endpoint allows users to submit queries to GitaGPT, an AI model based on the Bhagavad Gita, using a JSON request body. It is designed for applications where the query might be more complex or needs to be sent as part of a structured request. The AI processes questions related to life, spirituality, philosophy, and ethical dilemmas, providing responses rooted in Vedic wisdom. This method is suitable for programmatic access where the client prefers sending data in a JSON format. The response will be the AI's answer, formatted as a string.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/gpt-4o",
      "summary": "gpt-4o",
      "description": "This API endpoint facilitates advanced interaction with the GPT-4o AI model by accepting a direct array of message objects in the request body. This allows for multi-turn conversations and more complex scenarios, including defining system behavior, providing user input, and incorporating previous assistant responses to maintain context. It's ideal for building sophisticated conversational agents, interactive story generation, or any application requiring a detailed and contextualized dialogue with the advanced GPT-4o AI. The endpoint expects a JSON array of message objects, each with a 'role' (system, user, or assistant) and 'content' (the message text). The AI's response will be the generated text for the last turn.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/gpt-oss",
      "summary": "gpt-oss",
      "description": "This API endpoint facilitates advanced interaction with the GPT-OSS-120B AI model by accepting a direct array of message objects in the request body. This allows for multi-turn conversations and more complex scenarios, including defining system behavior, providing user input, and incorporating previous assistant responses to maintain context. It's ideal for building sophisticated conversational agents, interactive story generation, or any application requiring a detailed and contextualized dialogue with the powerful GPT-OSS-120B AI. The endpoint expects a JSON array of message objects, each with a 'role' (system, user, or assistant) and 'content' (the message text). The AI's response will be the generated text for the last turn.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/gpt3",
      "summary": "gpt3",
      "description": "This API endpoint facilitates advanced interaction with a GPT-3 based AI model by accepting a direct array of message objects in the request body. This allows for multi-turn conversations and more complex scenarios, including defining system behavior, providing user input, and incorporating previous assistant responses to maintain context. It's ideal for building sophisticated conversational agents, interactive story generation, or any application requiring a detailed and contextualized dialogue with an AI. The endpoint expects a JSON array of message objects, each with a 'role' (system, user, or assistant) and 'content' (the message text). The AI's response will be the generated text for the last turn.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/hikachat",
      "summary": "hikachat",
      "description": "This API endpoint allows users to obtain AI-generated responses from the Hika Chat API by providing a keyword in the request body. This method is suitable for applications that prefer sending data as a JSON object rather than URL parameters. The AI acts as a conversational agent, delivering answers based on the provided keyword, which can be leveraged for informational purposes, content generation, or as part of a larger AI-driven system. The endpoint requires a 'keyword' property in the JSON body, which must be at least 2 characters long. An optional 'language' parameter can also be included to specify the desired response language (defaulting to Indonesian if not provided).",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/kimi",
      "summary": "kimi",
      "description": "This API endpoint enables users to obtain AI responses from the Kimi service by submitting text content within a JSON request body. It supports advanced conversational AI features, content generation, and complex query processing. The API expects a JSON object with a 'content' field containing the text for AI processing.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/latukam",
      "summary": "latukam",
      "description": "This API endpoint facilitates interaction with the latukam AI model by accepting text content via a JSON request body. It is designed for applications requiring structured input for AI processing, such as advanced chatbot interfaces or programmatic content generation. The API expects a 'content' field in the JSON body, which should be a string containing the text for the AI to analyze and respond to. A successful request will return the AI's generated response in a JSON object.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/llama33",
      "summary": "Llama3.3",
      "description": "This API endpoint enables interaction with the Llama 3.3 AI model through a JSON request body. It is suitable for applications requiring structured and programmatic communication with the AI, such as advanced conversational interfaces, automated content creation, or intelligent data processing. The request body must include 'prompt' to define the AI's role and 'text' for the user's input. The API will return the AI's generated response.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/luminai",
      "summary": "luminai",
      "description": "This API endpoint enables users to obtain AI responses from the 'luminai' service by submitting text content within a JSON request body. It is suitable for applications that need to send structured data to the AI, such as integrating with backend systems, complex content generation workflows, or advanced conversational agents. The API expects a JSON object with a 'content' field, containing the text for AI processing. Upon successful execution, it will return the AI's generated response.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/meta-llama-33-70B-instruct-turbo",
      "summary": "Meta Llama 3.3-70B Instruct Turbo",
      "description": "This API endpoint allows users to interact with the Meta Llama 3.3-70B Instruct Turbo AI model by sending text content within a JSON request body. It is well-suited for applications that require structured and programmatic input to the AI, such as integrating with backend systems, complex content generation pipelines, or advanced conversational agents. The JSON request body must include a 'content' field, which represents the input text for the AI to process. A successful request will provide the AI's generated response.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/metaai",
      "summary": "meta ai",
      "description": "This API endpoint enables users to communicate with Meta AI by sending a text query within a JSON request body. It's suitable for applications that require structured and programmatic interaction with the AI, such as integrating into backend systems, automated conversational flows, or complex content generation. The JSON request body must contain a 'query' field, which is the text input for Meta AI. The API will respond with Meta AI's generated output.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/mistral-7b-instruct-v0.2",
      "summary": "Mistral 7B Instruct v0.2",
      "description": "This API endpoint allows users to interact with the Mistral 7B Instruct v0.2 AI model by sending text content within a JSON request body. It's ideal for applications that require structured and programmatic input to the AI, such as integrating with backend systems, complex content generation pipelines, or advanced conversational agents. The JSON request body must include a 'content' field, which is the text input for the AI to process. A successful request will provide the AI's generated response.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/muslimai",
      "summary": "muslimai",
      "description": "This API endpoint allows users to receive AI-generated responses from the MuslimAI service on Islamic topics by submitting a query within a JSON request body. It's designed for applications that require programmatic interaction for retrieving comprehensive and expert-level answers related to the Quran, delivered in Indonesian. The JSON request body must contain a 'query' field, which represents the question or topic for MuslimAI to process. The API will respond with the AI's generated answer.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/nous-hermes",
      "summary": "nous hermes",
      "description": "This API endpoint allows users to interact with the Nous Hermes 2 Mixtral 8x7B DPO AI model by sending text content within a JSON request body. It is ideal for applications that require structured and programmatic input to the AI, such as integrating with backend systems for content generation, advanced conversational agents, or complex data analysis. The JSON request body must include a 'content' field, which represents the input text for the AI to process. A successful request will provide the AI's generated response.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/powerbrainai",
      "summary": "powerbrainai",
      "description": "This API endpoint allows users to obtain AI-powered responses from 'PowerBrain AI' by submitting a text query within a JSON request body. It is ideal for applications requiring structured and programmatic interaction with the AI, such as integrating with backend systems, automated conversational flows, or intelligent data processing. The JSON request body must contain a 'query' field, which is the text input for PowerBrain AI to process. The API will respond with PowerBrain AI's generated output.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/qwq-32b-preview",
      "summary": "Qwen QwQ 32B Preview",
      "description": "This API endpoint allows users to interact with the Qwen QwQ 32B Preview AI model by sending text content within a JSON request body. It's ideal for applications that require structured and programmatic input to the AI, such as integrating with backend systems, complex content generation pipelines, or advanced conversational agents. The JSON request body must include a 'content' field, which is the text input for the AI to process. A successful request will provide the AI's generated response.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/sahabat-ai",
      "summary": "sahabat ai",
      "description": "This API endpoint provides AI-generated responses from the 'sahabat-ai' service by accepting a text query via a POST request. It is designed for simple, direct conversational or content generation tasks, making it ideal for integrations where a quick, straightforward request-response model is required. The API expects a 'content' query parameter containing the user's message. It uses a session cookie to maintain context and provides a text-based response from the AI. The endpoint handles errors gracefully, ensuring that issues with the request or the AI service are communicated clearly to the user.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/teachanything",
      "summary": "teach anything",
      "description": "This API endpoint allows users to get AI-generated explanations from the 'Teach Anything' service by providing text content within a JSON request body. It's ideal for applications that require programmatic integration for obtaining detailed and understandable explanations on various topics, suitable for e-learning platforms, research tools, or content creation. The JSON request body must include a 'content' field, which is the topic or question for the AI to explain. The API will respond with the AI's generated explanation.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/youai",
      "summary": "You.com AI",
      "description": "This API endpoint provides a service to get AI-generated responses from You.com based on a given text query. The API utilizes a headless browser with a stealth plugin to interact with the You.com website, mimicking a human user to perform a search and retrieve the streaming AI response. It captures the AI's chat tokens and any associated citations from third-party search results. The output is a structured JSON object containing the full AI response and a list of citation sources, making it useful for applications that require automated conversational AI with web-sourced context. It is designed to handle both simple queries and complex questions by waiting for the streaming response to complete.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "AI Image": [
    {
      "method": "POST",
      "path": "/api/ai/flux",
      "summary": "flux",
      "description": "This API endpoint allows users to generate images based on a textual prompt using the Flux model via a POST request. By sending a descriptive prompt in the request body, users can create various images, ranging from abstract concepts to specific scenes. The API processes the prompt and returns the generated image in PNG format. It is ideal for integrating image generation into applications where the prompt is sent as part of a JSON payload. The generated images can be used in web applications, design projects, or for personal creative endeavors.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/magicstudio",
      "summary": "magicstudio",
      "description": "This API endpoint allows users to generate AI-powered art by sending a text prompt in the request body. It's designed for applications where the prompt is submitted as part of a JSON payload. The AI interprets the prompt and generates a unique image, which is returned as a JPEG file. This is ideal for integrating AI art generation into web services, creative tools, or automated content pipelines.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/stabilityai",
      "summary": "stabilityai",
      "description": "This API endpoint enables users to generate images using the StabilityAI model by sending a text prompt in the request body. It's suitable for applications that require sending structured data for image generation. Users can provide detailed prompts to create a wide array of images, which are returned in JPEG format. This is beneficial for integrating advanced image generation capabilities into web services, automated content pipelines, or custom applications.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/ai/stable-diffusion",
      "summary": "stable diffusion",
      "description": "This API endpoint utilizes the Stable Diffusion model to generate images based on a textual prompt provided in the JSON request body. It's designed for applications that require sending structured data for image generation tasks. Users can submit a detailed description, and the AI will produce a corresponding image, which is returned as a JPEG file. This is ideal for integrating powerful image generation capabilities into web services, automated workflows, and custom software solutions.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Anime": [
    {
      "method": "POST",
      "path": "/api/anime/anichin-detail",
      "summary": "anichin detail",
      "description": "This API endpoint allows you to retrieve detailed information about an anime from Anichin by providing its URL in the request body. It scrapes various data points such as title, thumbnail, rating, followers, synopsis, alternative titles, status, network, studio, release date, duration, season, country, type, number of episodes, and genres. This can be used by applications needing to display comprehensive anime details from Anichin.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/anichin-download",
      "summary": "anichin download",
      "description": "This API endpoint allows you to extract download links for various resolutions from an Anichin anime detail page by providing its URL in the request body. It scrapes the page to find available resolutions and their corresponding download links from different hosts. This can be used by applications or services that need to provide direct download options for anime episodes from Anichin.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/anichin-episode",
      "summary": "anichin episode",
      "description": "This API endpoint allows you to retrieve a list of episodes for a specific anime from Anichin by providing the anime's URL in the request body. It scrapes details such as episode number, title, sub status (e.g., 'SUB INDO'), release date, and the link to the episode page. This is useful for applications that need to display episode lists and provide direct links to episode content.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/anichin-latest",
      "summary": "anichin latest",
      "description": "This API endpoint provides the latest anime updates from Anichin. It scrapes the main page to identify newly released episodes or series, including their titles, URLs, episode numbers, thumbnails, and types (e.g., 'TV', 'Movie'). This is useful for users or applications that want to stay updated with the newest anime content available on Anichin.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/anichin-popular",
      "summary": "anichin popular",
      "description": "This API endpoint retrieves a list of popular anime from Anichin. It first resolves any potential redirects from the Anichin domain to access the correct content page, then scrapes the page to extract details such as title, episode number, anime type, link to the detail page, and thumbnail image. This is useful for applications or users looking for trending anime on Anichin.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/anichin-search",
      "summary": "anichin search",
      "description": "This API endpoint allows users to search for anime on the Anichin website by sending a search query in the request body. Upon successful execution, it returns a list of anime titles, including their type, status, direct link, and image thumbnail. This is ideal for applications requiring structured data submission for anime searches, providing a flexible and robust method to query the Anichin database and retrieve detailed results for various use cases.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/auratail-detail",
      "summary": "auratail detail",
      "description": "This API endpoint allows you to retrieve detailed information about an anime from Auratail by providing its URL in the request body. It scrapes various attributes like title, image, status, studio, number of episodes, duration, type, release year, producers, genres, and synopsis. This is useful for building applications that require rich anime data directly from Auratail, especially when sending data via a POST request.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/auratail-latest",
      "summary": "auratail latest",
      "description": "This API endpoint provides the latest anime updates from the Auratail website. It scrapes the main page to extract details such as the title of the anime, the latest episode available, the direct link to the anime's page, and its cover image. This is ideal for applications needing to display recently updated anime, and is accessible via a POST request.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/auratail-popular",
      "summary": "auratail popular",
      "description": "This API endpoint retrieves a list of popular anime from the Auratail website via a POST request. It scrapes the main page to identify and extract the titles and corresponding links of currently popular anime series. This is useful for applications that want to showcase trending or highly-viewed anime titles from Auratail.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/auratail-search",
      "summary": "auratail search",
      "description": "This API endpoint allows you to search for anime on Auratail by providing a search query in the request body. It scrapes the search results and returns a list of anime titles, links to their detail pages, images, and their current status. This is useful for applications that need to find anime titles from Auratail, especially when sending data via a POST request.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/komikindo-detail",
      "summary": "komikindo detail",
      "description": "This API endpoint allows you to retrieve detailed information about a specific comic or manga from the Komikindo website. By providing the URL of the detail page, the API scrapes key data points such as the title, alternative title, status, author, genre list, plot summary, cover image URL, and a list of available chapters with their respective URLs. It is designed to facilitate programmatic access to comic information for use in applications, databases, or content aggregators. The endpoint handles both direct URLs and relative paths, automatically resolving the base URL if needed. The output is a structured JSON object containing all the extracted data, making it easy to parse and integrate. It is an essential tool for developers building applications that require real-time comic data from Komikindo.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/komikindo-download",
      "summary": "komikindo download",
      "description": "This API endpoint is designed to retrieve all image download links for a specific comic chapter from the Komikindo website. Users provide the URL of the chapter page, and the API scrapes the page to find and extract the source URLs of all images within that chapter. This functionality is useful for applications that need to programmatically access and download comic pages for offline reading or archival purposes. The endpoint is robust, handling both full and relative URLs, and returns a JSON array of image links. It includes thorough error handling for cases where the URL is missing or invalid, or if no download links can be found on the page. This ensures a reliable and predictable response for developers.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/komikindo-search",
      "summary": "komikindo search",
      "description": "This API endpoint provides a powerful search function for comics and manga on the Komikindo website. Users can submit a search query via a JSON body, and the API will scrape the search results page to return a structured list of matching titles. Each result includes essential details such as the title, a direct link to the detail page (href), a URL for the cover image, the type of media (e.g., Manhwa, Manga), and the user rating if available. This tool is perfect for applications that need to find comics based on user input, enabling features like search bars or recommendation systems. The endpoint ensures that the search query is properly encoded and handles cases where no results are found, providing clear error messages for a seamless developer experience.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/oploverz-download",
      "summary": "oploverz download",
      "description": "This API endpoint provides download links and details for anime episodes from Oploverz. Users can retrieve information such as the episode title, release date, streaming iframe source, and a structured list of download links categorized by server and quality. This is useful for developers building anime streaming or download applications that require direct access to episode resources from Oploverz. The API scrapes the Oploverz website to extract the relevant data, ensuring up-to-date links.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/oploverz-episode",
      "summary": "oploverz episode",
      "description": "This API endpoint allows users to retrieve detailed information and a list of episodes for a specific anime series from Oploverz. It scrapes the anime series page to extract data such as the cover image, title, synopsis, detailed information (e.g., genre, status, type), and a comprehensive list of all available episodes with their respective links. This is ideal for applications requiring comprehensive anime series data, facilitating episode tracking and direct access to episode pages.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/oploverz-ongoing",
      "summary": "oploverz ongoing",
      "description": "This API endpoint provides a list of ongoing anime series from Oploverz. It scrapes the Oploverz website's ongoing anime section and extracts key details for each series, including the title, URL, image source, number of episodes, and rating. This endpoint is useful for applications that need to display currently airing anime and provide direct links to their respective pages on Oploverz, keeping users updated with the latest releases.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/oploverz-search",
      "summary": "oploverz search",
      "description": "This API endpoint allows users to search for anime series on Oploverz. It takes a search query and returns a list of matching anime titles, their respective links, cover images, number of episodes, and ratings. This is useful for applications that need to implement search functionality for Oploverz's anime catalog, enabling users to quickly find specific series.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/otakudesu/detail",
      "summary": "otakudesu detail",
      "description": "This API endpoint enables users to retrieve comprehensive details and an exhaustive episode list for a specific anime from Otakudesu by submitting the anime's URL in the JSON request body. It provides rich data including the anime's title (English and Japanese), score, producer, type, status, total episodes, duration, release date, studio, genres, and image URL. Additionally, it furnishes a complete list of episodes, each with its title, link, and release date. This POST route is ideal for automated systems or applications that dynamically fetch anime information from Otakudesu for detailed analysis or integration into various platforms.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/otakudesu/download",
      "summary": "otakudesu download",
      "description": "This API endpoint provides access to download links for a specific anime episode available on Otakudesu. By submitting the URL of the anime's download page in the JSON request body, users can obtain the episode title and a structured list of download options, categorized by quality, along with their respective direct links and hosting providers. This POST route is designed for automated processes or applications that need to programmatically fetch download information for anime content from Otakudesu.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/otakudesu/ongoing",
      "summary": "otakudesu ongoing",
      "description": "This API endpoint provides a list of ongoing anime series from Otakudesu. It fetches details for each ongoing anime, including the episode number, type, release date, title, a direct link to the anime page, and a thumbnail image. This POST route offers programmatic access to ongoing anime data, suitable for automated systems or services that need to periodically retrieve and process new ongoing anime releases without requiring any specific request body parameters.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/otakudesu/search",
      "summary": "otakudesu search",
      "description": "This API endpoint enables users to search for anime on Otakudesu by providing a search query in the JSON request body. It returns a structured list of anime matching the query, including details such as their titles, direct links to their respective pages, thumbnail images, associated genres, current status (e.g., ongoing, completed), and ratings. This POST method is suitable for automated systems or complex applications that need to programmatically send search queries and retrieve anime information from Otakudesu.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/samehadaku/detail",
      "summary": "samehadaku detail",
      "description": "This API endpoint allows users to retrieve detailed information and a list of episodes for a specific anime from Samehadaku by providing the anime's URL in the request body. It returns data such as the anime's title, thumbnail, publication date, rating, description, genres, and a comprehensive list of available episodes with their titles, dates, and links. This POST route is suitable for programmatic access where the anime link might be dynamically generated or passed as part of a larger data payload.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/samehadaku/download",
      "summary": "samehadaku download",
      "description": "This API endpoint facilitates retrieving download links for a particular anime episode from Samehadaku. By providing the episode URL in the request body, users can obtain the episode's title, its original URL, and a list of various download options with their respective names and direct download links. This POST route is designed for scenarios where the episode URL is dynamically generated or part of a structured data submission, enabling seamless integration into automated anime content management systems or download managers.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/samehadaku/latest",
      "summary": "samehadaku latest",
      "description": "This API endpoint provides a list of the latest released anime episodes from Samehadaku. It fetches information such as the anime's title, thumbnail, who posted it, episode number, release date, and a direct link to the episode page. This POST route offers programmatic access to the latest anime data, suitable for automated systems or services that need to periodically retrieve and process new anime releases without requiring any specific request body parameters.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/samehadaku/release",
      "summary": "samehadaku release",
      "description": "This API endpoint provides the full release schedule for anime on Samehadaku, categorized by day of the week. It fetches data for each day (Sunday to Saturday), returning a list of anime scheduled for release. This POST route is designed for programmatic access, enabling automated systems or clients to retrieve the entire anime release calendar from Samehadaku without requiring any specific request body parameters. It helps in building applications that need to display or process upcoming anime episodes to keep users informed.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/anime/samehadaku/search",
      "summary": "samehadaku search",
      "description": "This API endpoint enables users to search for anime on Samehadaku by providing a search query within the JSON request body. Upon successful execution, it returns a structured list of matching anime, each containing details such as its title, unique identifier, thumbnail URL, a concise description, associated genres, anime type, star rating, view count, and the direct link to its page on Samehadaku. This POST method is particularly suitable for automated systems or complex applications that need to send search queries programmatically, allowing for more robust and flexible integration of Samehadaku's anime search capabilities.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "APK": [
    {
      "method": "POST",
      "path": "/api/apk/an1",
      "summary": "an1",
      "description": "This API endpoint allows you to search for Android applications on an1.com using a POST request. It scrapes the website based on your provided search query in the request body and returns a list of relevant applications, including their title, download link, developer, image, rating, and whether it's a MOD or Original version. This can be used by developers needing to programmatically find and list applications available on an1.com.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/apk/apkmody",
      "summary": "apkmody",
      "description": "This API endpoint allows you to search for Android applications on apkmody.com using a POST request. It utilizes Puppeteer with Stealth Plugin to bypass bot detection and scrape the website based on your provided search query in the request body. It returns a list of relevant applications, including their title, download link, icon, version, genre, features (if any, like 'Aim, No Recoil'), and star rating. This API is useful for developers who need to programmatically search and retrieve information about modified Android applications from apkmody.com.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/apk/apkpure",
      "summary": "apkpure",
      "description": "This API endpoint allows you to search for Android applications on apkpure.com using a POST request. It employs Puppeteer with Stealth Plugin to mimic a real browser and scrape application details such as title, developer, download link, icon, and rating information from the search results page based on your provided search query in the request body. The API supports both standard search results and branded application listings on APKPure. This is useful for developers who need to programmatically access and retrieve information about applications available on APKPure.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/apk/appstore",
      "summary": "app store",
      "description": "This API endpoint allows you to search for applications on Apple App Store using a POST request. It utilizes Puppeteer with Stealth Plugin to bypass bot detection and scrape the Apple website based on your provided search query in the request body. It returns a list of relevant applications, including their title, direct link to the App Store page, image, description, and analytics information. This API is useful for developers and users looking to programmatically discover and retrieve information about various applications and games available on the Apple App Store.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/apk/happymod",
      "summary": "happymod",
      "description": "This API endpoint allows you to search for modified Android applications (MOD APKs) on happymod.com using a POST request. It utilizes Puppeteer with Stealth Plugin to bypass bot detection and scrape the website based on your provided search query in the request body. It returns a list of relevant applications, including their title, direct link to the HappyMod page, image, detected version, file size, and specific mod features (e.g., [Unlimited Money]). This API is useful for developers and users looking to programmatically discover and retrieve information about various modified applications and games available on HappyMod.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/apk/openapk",
      "summary": "openapk",
      "description": "This API endpoint allows you to search for Android applications on OpenAPK.net using a POST request. You can send a search query in the request body, and the API will return a list of relevant applications, including their title, icon, description, and rating. This is useful for developers or automated systems that need to programmatically search for APKs.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/apk/playstore",
      "summary": "playstore",
      "description": "This API endpoint allows you to search for Android applications on the Google Play Store using a POST request. It scrapes the Play Store based on your provided search query in the request body and returns a list of matching applications, including their link, name, developer, image, and rating information. This API is useful for developers who need to programmatically search and retrieve information about applications available on the Google Play Store.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Berita": [
    {
      "method": "POST",
      "path": "/api/berita/antara",
      "summary": "antara news",
      "description": "This API endpoint allows you to retrieve the latest news headlines and articles from Antara News, one of Indonesia's leading news agencies. It scrapes the 'Editor Picks' section of the Antara News website, providing key information such as the article title, link, associated image, category, and whether it's an infographic or a standard article. This API is useful for applications requiring up-to-date Indonesian news content, aggregation services, or data analysis on current events. It offers a structured JSON response containing a list of news items, each with relevant details for easy integration into various platforms.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/berita/cnbcindonesia",
      "summary": "cnbc indonesia",
      "description": "This API endpoint provides access to the latest news headlines from CNBC Indonesia, focusing on business and financial news. It scrapes data from the CNBC Indonesia 'News' section, extracting information such as article title, URL, associated image, category, any special labels (e.g., 'Live'), and publication date. The API categorizes content as either 'video' or 'article' based on the source. It is ideal for developers building news aggregators, financial analysis tools, or any application requiring real-time updates on Indonesian business and economic news. The response delivers a structured JSON array of news items, each with comprehensive details for easy integration and display.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/berita/cnn",
      "summary": "cnn Indonesia",
      "description": "This API endpoint allows you to retrieve the latest news headlines and detailed content from CNN Indonesia. It scrapes the main news feed, extracting information such as the article title, thumbnail image, full-sized image, publication timestamp, original link, and a clean slug. Additionally, it attempts to fetch and sanitize the full article content, removing unwanted elements like scripts, styles, and advertisements, to provide a clean text representation. This API is valuable for news aggregation, content analysis, or any application requiring comprehensive and up-to-date news from CNN Indonesia.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/berita/jkt48",
      "summary": "jkt48 news",
      "description": "This API endpoint allows you to fetch the latest news from the official JKT48 website. It scrapes the news list, extracting key details such as the news title, the direct link to the article, the publication date, and an icon representing the news category (e.g., general news, event updates). This API is ideal for fans, developers creating fan applications, or anyone interested in staying updated with the latest announcements, events, and activities of the Indonesian idol group JKT48. The response provides a structured array of news items, facilitating easy integration and display.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/berita/kompas",
      "summary": "kompas news",
      "description": "This API endpoint allows you to retrieve the latest news headlines and articles from Kompas.com, one of Indonesia's prominent online news portals. It scrapes the main news list, extracting essential information such as the article title, direct link, associated image (lazy-loaded data-src), news category, and publication date. This API is designed for applications requiring up-to-date general news from an authoritative Indonesian source, making it suitable for news aggregators, content analysis, or informational dashboards. The response provides a structured JSON array of news items, each with relevant details for straightforward integration and display.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/berita/liputan6",
      "summary": "liputan6",
      "description": "This API endpoint fetches the latest news headlines from Liputan6.com, a prominent Indonesian online news portal. It extracts key information for each news article, including the title, the direct URL to the article, a thumbnail image, and the publication time. This API is designed to provide quick and easy access to current events and news updates from Indonesia, making it suitable for news aggregators, content displays, or applications requiring timely information from a reliable source like Liputan6.com. The response delivers a structured JSON array of news items, each containing essential details for seamless integration.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/berita/merdeka",
      "summary": "merdeka news",
      "description": "This API endpoint allows you to retrieve the latest news headlines from Merdeka.com, specifically from its 'Peristiwa' (Events) section, which often covers breaking news and current affairs. It extracts key details for each news item, including the article title, direct link, associated image (converted to an absolute URL), news category, publication date, and a brief description. This API is useful for applications that require up-to-date general news and events from an Indonesian perspective, such as news aggregators, content analysis tools, or informational displays. The response provides a structured JSON array of news articles, facilitating straightforward integration and display.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/berita/sindonews",
      "summary": "sindonews",
      "description": "This API endpoint provides access to the latest news headlines from Sindonews.com, a major Indonesian news portal. It scrapes the main page to gather essential details for each news article, including the title, the direct link to the full article, its category (e.g., Nasional, Ekonomi Bisnis, Internasional, Sports), the publication timestamp, and a thumbnail image URL. This API is highly valuable for applications that require real-time updates on Indonesian current events, news aggregators, or any service needing structured news data from a reputable source like Sindonews.com. The response delivers a clean JSON array of news items, facilitating easy consumption and display.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/berita/suara",
      "summary": "suara news",
      "description": "This API endpoint allows you to retrieve the latest news headlines and articles from Suara.com, a prominent Indonesian online news portal known for its coverage of politics, business, law, sports, entertainment, lifestyle, automotive, science, technology, and citizen journalism. It scrapes both the main headline news and other listed news items, extracting details such as the article title, direct link, associated image, category, and publication date for headlines. This API is valuable for developers building news aggregators, content analysis tools, or any application requiring real-time news updates from a diverse range of topics within Indonesia. The response delivers a structured JSON array of news items, facilitating easy integration and display.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/berita/tribunnews",
      "summary": "tribunnews",
      "description": "This API endpoint allows you to retrieve the latest news headlines from Tribunnews.com, a major Indonesian online news portal and part of the Kompas Gramedia Group. It scrapes the main page to extract essential details for each news article, including the title, the direct URL to the full article, a thumbnail image, and the publication timestamp. Tribunnews is known for its extensive network of local newspapers across Indonesia, providing a wide range of national and regional news. This API is ideal for applications requiring up-to-date general news from an authoritative Indonesian source, suitable for news aggregators, content analysis, or informational displays. The response delivers a structured JSON array of news items, facilitating easy integration and display.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Canvas": [
    {
      "method": "POST",
      "path": "/api/canvas/fake-xnxx",
      "summary": "fake xnxx",
      "description": "Generate a fake XNXX comment image using a name, quote, and optional like/dislike counts provided in the request body. This endpoint is designed for applications needing to programmatically create humorous or satirical images resembling XNXX comments, suitable for various content creation purposes. Input parameters are sent as JSON in the request body, including the commenter's name, the comment text (quote), and the number of likes and dislikes. The API returns the generated image as a PNG buffer.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/canvas/gay",
      "summary": "gay",
      "description": "Generate a stylized 'gay' image by uploading an avatar file along with a name and a number via multipart/form-data. This API endpoint allows users to create a custom graphic featuring a circular avatar, a decorative background, a personalized name, and a prominent number. It's intended for humorous or creative content generation. Input parameters include the name, an uploaded avatar image file (supports JPG, JPEG, PNG, WEBP, GIF), and a positive numerical string. The output is a PNG image.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/canvas/goodbyev1",
      "summary": "goodbye v1",
      "description": "Generate a customizable goodbye image for users leaving a guild by uploading image files. This API allows you to create a personalized goodbye banner featuring the user's avatar, username, the guild's name and icon, and the total member count. It's ideal for applications that need to generate dynamic and engaging visual farewells using directly uploaded image data. The output image is in JPEG format, with adjustable quality.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/canvas/goodbyev2",
      "summary": "goodbye v2",
      "description": "Generate a customized goodbye image (version 2) by uploading a user's avatar and background image files, along with the username, guild name, and member count. This API is perfect for applications that require direct file uploads to create dynamic and engaging visual farewells for users leaving a guild. The image features a unique design with rotated elements and specific font styles, and is output as a PNG file.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/canvas/goodbyev3",
      "summary": "goodbye v3",
      "description": "Generate a customized goodbye image (version 3) by uploading an avatar image file and providing a username. This API is designed for applications that require direct file uploads to create visually distinct goodbye banners, ideal for acknowledging a user's departure in various digital environments. The output is a PNG image file.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/canvas/goodbyev4",
      "summary": "goodbye v4",
      "description": "Generate a customizable goodbye image (version 4) using Canvafy. This API allows you to create a personalized farewell banner by uploading image files for the user's avatar and background, along with a custom description. It's ideal for applications that require direct file uploads to generate engaging visual messages when a user leaves. The output is a high-quality PNG image.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/canvas/goodbyev5",
      "summary": "goodbye v5",
      "description": "Generate a stylized goodbye image (version 5) by uploading a user's avatar and background image files, along with the username, guild name, and member count. This API is designed for applications that require direct file uploads to create visually appealing farewell banners for users leaving a guild. The image features a prominent circular avatar, a customizable background, and dynamic text sizing for optimal display. The output is a high-quality JPEG image with adjustable quality.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/canvas/level-up",
      "summary": "level up",
      "description": "Generate a dynamic level-up notification card with uploaded background and user avatar files, along with the username and a visual representation of the level transition. This API is ideal for gaming applications, community platforms, or bots that need to celebrate user achievements with a custom image, especially when direct file uploads are preferred. The card clearly shows the 'from' and 'to' levels with an arrow, making the progression clear. The output is a PNG image file.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/canvas/profile",
      "summary": "profile",
      "description": "Generate a personalized user profile card with a customizable background and avatar files, along with rank details, experience progress, level, and user name using multipart/form-data. This API is perfect for gaming platforms, community hubs, or any application needing to display user progression and stats in an appealing visual format, especially when direct file uploads are preferred. The output is a PNG image file.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/canvas/ship",
      "summary": "ship",
      "description": "This API generates a personalized 'ship' image, visually representing compatibility or a relationship between two individuals based on a percentage. Users upload two avatar image files, a background image file, and provide a numerical percentage via multipart/form-data. The API receives these image files, processes them using the Canvafy library to overlay the avatars on the background, applies a border, and integrates the custom percentage into the design. This can be used for dynamic content generation where users directly upload their media.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/canvas/welcomev1",
      "summary": "welcome v1",
      "description": "Generate a welcome image (version 1) featuring a user's avatar, username, guild icon, guild name, and member count by uploading image files. This API is designed for applications that require direct file uploads to create engaging visual greetings for new members joining a guild. The image is designed with distinct areas for each element and includes dynamic text formatting. The output is a high-quality JPEG image with adjustable quality.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/canvas/welcomev2",
      "summary": "welcome v2",
      "description": "Generate a welcome image (version 2) by uploading a user's avatar and background image files, along with the username, guild name, and member count. This API is designed for applications that require direct file uploads to create visually appealing welcome banners for new members joining a guild. The image features a unique design with rotated elements and specific font styles, and is output as a PNG file.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/canvas/welcomev3",
      "summary": "welcome v3",
      "description": "Generate a simple welcome image (version 3) by uploading an avatar image file and providing a username. This API is designed for applications that require direct file uploads to create straightforward visual greetings for new users or members. The output is a PNG image file.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/canvas/welcomev4",
      "summary": "welcome v4",
      "description": "Generate a customizable welcome image (version 4) using Canvafy. This API allows you to create a personalized welcome banner by uploading image files for the user's avatar and background, along with a custom description. It's ideal for applications that require direct file uploads to generate engaging visual greetings for new members. The output is a high-quality PNG image.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/canvas/welcomev5",
      "summary": "welcome v5",
      "description": "Generate a stylized welcome image (version 5) by uploading a user's avatar and background image files, along with the username, guild name, and member count. This API is designed for applications that require direct file uploads to create visually appealing welcome banners for new members joining a guild. The image features a prominent circular avatar, a customizable background, and dynamic text sizing for optimal display. The output is a high-quality JPEG image with adjustable quality.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/canvas/xnxx",
      "summary": "xnxx",
      "description": "Generate a fake XNXX image with a title and an uploaded image file. This endpoint allows users to upload an image and provide a title to create a custom image that mimics the style of a video thumbnail. It is ideal for generating unique memes or custom content with a specific visual aesthetic, where direct image uploads are preferred over URLs. The API returns the generated image in PNG format.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Check": [
    {
      "method": "POST",
      "path": "/api/check/genshin",
      "summary": "check genshin",
      "description": "This API endpoint allows you to retrieve detailed Genshin Impact player information from Enka.Network using their in-game UID via a JSON request body. It provides player statistics like username, adventure rank, world level, signature, and combat stats. Additionally, it captures screenshots of the player's character build cards, which are then converted into accessible image URLs. This is useful for players and communities looking to quickly view and share Genshin Impact character builds and player progress.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/check/resi",
      "summary": "Check Resi",
      "description": "This API endpoint allows you to track your package shipment using tracking number (resi) and courier name via JSON request body. It retrieves shipping status, history, and other tracking details from various Indonesian shipping couriers.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/check/tagihanpln",
      "summary": "tagihan listrik",
      "description": "This API endpoint allows you to check your monthly PLN electricity bill information using your customer number (nopel) via a JSON request body. It retrieves details such as the type of bill, customer number, customer name, power tariff, billing month/year, meter stand, and total bill amount. This is useful for individuals or applications needing to quickly verify PLN electricity bills.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/stalk/npm",
      "summary": "npm",
      "description": "This API endpoint allows you to retrieve detailed information about a specified NPM package using a JSON request body. You can get details such as the latest version, initial published version, total number of updates, dependency counts for both the latest and initial versions, and their respective publication timestamps. This is useful for developers and tools needing to monitor or gather data on NPM packages.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "CloudflareAi": [
    {
      "method": "POST",
      "path": "/api/cf/chat",
      "summary": "chat",
      "description": "This API endpoint facilitates AI chat interactions by accepting a JSON array of messages in the request body. Each message object should specify a 'role' (either 'system' or 'user') and 'content' (the actual text). This approach is ideal for managing multi-turn conversations or providing a more structured chat history to the AI. The Cloudflare AI model '@cf/meta/llama-3.1-8b-instruct-fast' processes these messages to generate a coherent and contextually relevant response, making it suitable for advanced conversational AI applications. You can also specify a custom AI model.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/cf/embedding",
      "summary": "embedding",
      "description": "This API endpoint generates a numerical embedding for a given text input using a Cloudflare AI model. It accepts the text and an optional custom model in a JSON request body. Text embeddings are vector representations of text that capture semantic meaning, making them useful for tasks like semantic search, text classification, and clustering. The default model is '@cf/baai/bge-base-en-v1.5', which is optimized for English text embeddings.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/cf/image-classification",
      "summary": "image classification",
      "description": "This API endpoint performs image classification using a Cloudflare AI model. It accepts an image URL and an optional custom model in a JSON request body. The API returns a classification of the image's content, which is useful for automatically tagging images, content moderation, or organizing visual data. The default model is '@cf/microsoft/resnet-50', a powerful model for general image recognition.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/cf/sentiment",
      "summary": "sentiment",
      "description": "This API endpoint analyzes the sentiment of a given text using a Cloudflare AI model. It accepts the text and an optional custom model in a JSON request body. Sentiment analysis determines the emotional tone behind a piece of text, categorizing it as positive, negative, or neutral. This is useful for understanding public opinion, customer feedback, or social media monitoring. The default model is '@cf/huggingface/distilbert-sst-2-int8', which is optimized for sentiment classification.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/cf/translation",
      "summary": "translation",
      "description": "This API endpoint provides text translation services using a Cloudflare AI model. It accepts the text, source language code, target language code, and an optional custom model in a JSON request body. This is highly useful for internationalization, communication across different linguistic backgrounds, and building multilingual applications. The default model is '@cf/meta/m2m100-1.2b', which supports translation between many languages.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/cf/whisper",
      "summary": "whisper",
      "description": "This API endpoint transcribes speech from an audio URL into text using a Cloudflare AI model. It accepts the audio URL and an optional custom model in a JSON request body. This is invaluable for applications requiring voice-to-text conversion, such as transcribing meetings, creating captions for videos, or enabling voice commands in applications. The default model is '@cf/openai/whisper', known for its high accuracy in speech recognition.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Currency": [
    {
      "method": "POST",
      "path": "/api/currency/convert",
      "summary": "currency-convert",
      "description": "This API endpoint allows you to convert between various fiat currencies and cryptocurrencies using a POST request with a JSON body. Users can specify an amount, the source currency, and the target currency to get the converted value. It fetches real-time exchange rates and cryptocurrency prices from multiple reliable sources to ensure accuracy. This is useful for financial applications, personal finance tools, and any service requiring up-to-date currency conversions.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/currency/crypto/{symbol}",
      "summary": "crypto-detail",
      "description": "This API endpoint provides detailed information for a specific cryptocurrency using a POST request, including its USD price and any available Indodax exchange data (for Indonesian Rupiah conversions). Users can query by cryptocurrency symbol to get current market values and related data points. This is beneficial for cryptocurrency tracking applications, portfolio management tools, or for users interested in specific crypto asset details.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/currency/list",
      "summary": "currency-list",
      "description": "This API endpoint provides a comprehensive list of all supported fiat and cryptocurrencies using a POST request. It gathers data from various sources to ensure the list is up-to-date, making it easy for users to discover which currencies are available for conversion. This endpoint is useful for populating currency selection fields in applications or for users looking to understand the breadth of supported currencies.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/currency/rates",
      "summary": "currency-rates",
      "description": "This API endpoint provides current exchange rates for fiat currencies and real-time prices for cryptocurrencies using a POST request. It aggregates data from various financial APIs to deliver comprehensive and accurate market information. This is ideal for applications that need to display current market trends, perform real-time calculations, or analyze currency fluctuations.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Downloader": [
    {
      "method": "POST",
      "path": "/api/d/capcut",
      "summary": "capcut",
      "description": "This API endpoint allows you to retrieve comprehensive metadata for a CapCut video by providing its URL in the request body. It scrapes the CapCut website to extract details such as the video's title, description, like count, play count, duration, usage statistics, creation time, cover image URL, video ratio, and author information. This is useful for applications needing to display CapCut video details or integrate CapCut content, especially when dealing with structured data payloads.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/d/capcutv2",
      "summary": "capcutv2",
      "description": "Alternative CapCut video downloader using third-party service via POST request. This API endpoint allows you to download CapCut videos with different quality options including HD No Watermark, No Watermark, and Watermark versions by providing the URL in the request body.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/d/douyin",
      "summary": "douyin",
      "description": "This API endpoint facilitates the download of Douyin/TikTok videos by accepting the video URL in the request body as a JSON payload. It extracts video metadata such as the title, thumbnail, and multiple download links. The endpoint includes robust validation for the provided URL to ensure it adheres to the expected Douyin or TikTok format. Upon successful processing, it delivers a comprehensive JSON response containing all relevant video details and download options, making it suitable for server-side integrations and automated video downloading tasks.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/d/facebook",
      "summary": "facebook",
      "description": "This API endpoint downloads videos from Facebook. The user provides a Facebook video URL, and the API processes the link to extract available video download links in various qualities. It uses GetVidFB service to handle the extraction process. The response includes the video thumbnail and an array of objects, each containing the download URL, resolution, and format of the video. This is useful for applications that need to save Facebook videos for offline use or for content archiving. The API is designed to be fast and reliable, handling different types of Facebook video URLs and returning a structured JSON response with all the necessary information.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/d/gdrive",
      "summary": "gdrive",
      "description": "This API endpoint allows you to obtain a direct download link for a Google Drive file by providing its public URL in the request body. It scrapes the Google Drive page to extract the file name and constructs a direct download URL. This is useful for integrating Google Drive file downloads into applications or scripts without manual intervention. Ensure the Google Drive file is publicly accessible or shared with 'Anyone with the link' for the API to function correctly. The response will include the file name, the direct download link, and the original Google Drive link.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/d/github",
      "summary": "github",
      "description": "This API endpoint allows you to fetch data from various GitHub URLs, including repositories, individual files, raw content, and Gists. By providing a valid GitHub URL, the API will parse the URL, determine its type, and retrieve relevant information such as repository details (stars, forks, topics), file content and metadata, or Gist files and their associated data. This is particularly useful for developers and tools needing programmatic access to GitHub content without direct API interaction complexities.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/d/igdl",
      "summary": "igdl",
      "description": "This API endpoint allows users to download Instagram videos and photos by providing the Instagram post URL in the request body. It automates the process of accessing a third-party downloader website (fastdl.app), inputting the URL, and scraping the resulting download links. The endpoint handles various types of Instagram content, including reels, photos, and videos, and returns the direct download URLs and thumbnails. This is useful for users who want to save Instagram media for offline viewing or integration into other applications.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/d/lahelu",
      "summary": "lahelu",
      "description": "This API endpoint allows you to retrieve information about a specific post from Lahelu.com by providing the post's URL in the request body. It extracts details such as the post ID, user ID, title, media content, sensitivity flags, hashtags, and creation timestamp. This can be useful for archiving Lahelu content, integrating Lahelu posts into other applications, or analyzing post data, particularly when sending data via a POST request.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/d/mediafire",
      "summary": "mediafire",
      "description": "This API endpoint allows you to retrieve detailed download information for a file hosted on MediaFire by providing its URL in the request body. By providing a MediaFire URL, the API will scrape the page to extract critical details such as the file name, direct download link, file size, description, upload date, file type, compatibility information, and relevant metadata from the page's meta tags. It also attempts to determine the MIME type based on the file extension. This is particularly useful for automated downloading or integrating MediaFire links into other applications. The scraping process handles potential redirects to ensure the correct download link is obtained. The output provides a structured object containing all the extracted data.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/d/musicapple",
      "summary": "music apple",
      "description": "This API endpoint allows users to retrieve music download links and SEO (Search Engine Optimization) data directly from an Apple Music URL. It functions by scraping the provided Apple Music page to extract relevant information such as song title, artist, album artwork, and metadata like page title, description, and keywords. This is useful for applications that need to integrate music download capabilities or display detailed information about Apple Music tracks. The API handles the complexities of CSRF tokens and Cloudflare Turnstile CAPTCHA to ensure successful data retrieval. Users provide the Apple Music URL as a JSON object in the request body.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/d/pinterest",
      "summary": "pinterest",
      "description": "This API endpoint allows you to download various media types (images, videos, or GIFs) from Pinterest by providing a Pinterest URL in the request body. It supports all Pinterest domains and short URLs. The endpoint intelligently handles redirects and extracts the Pinterest Pin ID to fetch detailed information about the pin, including its title, description, creation date, and available media URLs in various qualities and sizes. It ensures that only valid Pinterest links are processed and provides comprehensive error handling for invalid URLs, missing pins, or server-side issues. The output includes structured data about the pin and an array of available media files, each with its type, quality, dimensions, URL, and file size (if available).",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/d/rednote",
      "summary": "rednote",
      "description": "This API endpoint allows you to download information from a Rednote (XiaoHongShu) URL by providing the URL in the request body as JSON. It extracts details such as title, description, keywords, video URL (if available), note ID, duration, author's nickname, and engagement metrics like likes, comments, and collects. Additionally, it retrieves all associated images. This is useful for archiving content or analyzing Rednote posts programmatically.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/d/savefrom",
      "summary": "savefrom",
      "description": "This API endpoint leverages SaveFrom.net to provide download links for media (videos, audios, and images) from various online platforms such as YouTube, Instagram, TikTok, Twitter, and more. Users can provide a media URL in the request body, and the API will scrape SaveFrom.net to extract available download options, including different qualities and formats. The endpoint supports filtering results by media type (video, audio, or image) for convenience. It's a versatile tool for obtaining direct download links from a wide range of social media and video-sharing sites, offering a robust solution for media acquisition.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/d/seegore",
      "summary": "seegore",
      "description": "This API endpoint allows you to fetch article data from a Seegore URL by providing the URL in the request body as JSON. It extracts various details such as the article title, author, publication date, number of comments, view count, rating information (value, count, votes), and the source URL of any embedded video. This is useful for content analysis, archiving, or integrating Seegore content into other applications programmatically.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/d/snackvideo",
      "summary": "snack video",
      "description": "This API endpoint allows you to retrieve detailed information and the direct download link for a video hosted on Snack Video by providing its URL in the request body. By providing the Snack Video URL, the API scrapes the necessary data, including the video's title, description, thumbnail, upload date, direct video URL, duration, and interaction statistics (views, likes, shares). It also extracts information about the video's creator, such as their name, profile URL, and bio. This endpoint is designed for developers who need to integrate Snack Video content into their applications or services, offering a comprehensive data payload for each video.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/d/soundcloud",
      "summary": "soundCloud",
      "description": "This API endpoint allows you to download audio from a SoundCloud track by providing its URL in the request body. It uses the SoundCloud API to resolve the track information, including its title, artist, duration, thumbnail, and the direct progressive download link. The endpoint handles various SoundCloud URL formats, including mobile links, and provides robust error handling for invalid URLs, tracks not found, or issues during the download link retrieval process. The output is a structured JSON object containing all relevant track details and the direct audio download URL.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/d/spotify",
      "summary": "Spotify",
      "description": "This API endpoint allows you to download music from Spotify by providing a Spotify track or album URL. It first retrieves the track/album information, then initiates a conversion process to MP3, and finally provides a direct download link. This is useful for users who want to save Spotify music locally for offline listening or other purposes. The endpoint supports both individual tracks and full albums, simplifying the process of obtaining audio files from Spotify.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/d/spotifyv2",
      "summary": "spotify v2",
      "description": "This API endpoint allows users to retrieve music download links and metadata directly from a Spotify URL. It functions by scraping the provided Spotify page to extract relevant information such as song title, artist, album artwork, and metadata. This is useful for applications that need to integrate music download capabilities or display detailed information about Spotify tracks. The API handles the complexities of CSRF tokens and Cloudflare Turnstile CAPTCHA to ensure successful data retrieval. Users provide the Spotify URL as a JSON object in the request body.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/d/tiktok",
      "summary": "tiktok",
      "description": "This API endpoint allows you to download videos or slideshows from a given TikTok URL by providing the URL in the request body as JSON. It leverages the SnapTik service to extract direct download links for the content, including metadata such as title, creator, thumbnail, and the type of content (video, photo, or slideshow). This is ideal for users who want to save TikTok content for offline viewing or programmatic integration into other applications.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/d/tiktok/v2",
      "summary": "tiktok v2",
      "description": "This API endpoint allows you to download TikTok videos and photos by providing a TikTok URL in the request body. It scrapes the necessary information from the TikTok page, including video/photo metadata and direct download links. This can be used for archival purposes, content analysis, or integrating TikTok content into other applications. The API supports both video and image posts, providing respective download links. It handles redirects and extracts the post ID to ensure accurate data retrieval. The response includes detailed metadata like like count, play count, comment count, share count, title, description, hashtags, and location created, along with direct download URLs for the media.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/d/twitter",
      "summary": "twitter",
      "description": "This API endpoint allows users to download videos from Twitter by providing the video's URL. It fetches the necessary token from the SnapTwitter website, constructs a POST request with the video URL and token, and then scrapes the resulting HTML to extract the image URL, download link, video title, and description. This tool is useful for archiving Twitter videos or sharing them across platforms where direct Twitter links might not be easily accessible or playable.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Fun": [
    {
      "method": "POST",
      "path": "/api/fun/alay",
      "summary": "alay",
      "description": "This API converts standard text into 'alay' (a colloquial Indonesian slang style) format. It applies random capitalization and substitutes certain letters with numbers, mimicking the unique and informal writing style often used in Indonesian online communication. This can be used for entertainment purposes, simulating a specific text aesthetic, or generating creative text variations. The API takes a single text input as a JSON body and returns the transformed string.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/fun/jagokata",
      "summary": "jagokata",
      "description": "This API endpoint allows you to search for quotes on jagokata.com, a popular Indonesian website for quotes and sayings. By providing a search query in the request body, you can retrieve a list of relevant quotes, along with details such as the author, description, lifespan, number of votes, category, and associated tags. This API is useful for applications that require a collection of wisdom, inspiration, or famous sayings.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/fun/livefunfact",
      "summary": "livefunfact",
      "description": "Generate comprehensive medical fun facts about human body based on birth date. Returns validated statistics from 2024-2025 medical research including respiratory, cardiovascular, neurological, digestive, renal, immune, cellular, sensory, endocrine, and musculoskeletal systems with data sourced from Cleveland Clinic, Johns Hopkins, American Heart Association, and peer-reviewed medical journals.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Games": [
    {
      "method": "POST",
      "path": "/api/games/asahotak",
      "summary": "asah otak",
      "description": "This API endpoint provides a random 'Asah Otak' (brain teaser) question from a curated database. Users can retrieve a new question with each request, which typically includes the question itself and its corresponding answer. This endpoint is ideal for developing quiz applications, educational games, or any platform requiring quick, challenging brain teasers. The response will be a JSON object containing the question and answer.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/caklontong",
      "summary": "cak lontong",
      "description": "This API endpoint provides a random 'Cak Lontong' question, a popular Indonesian comedic quiz format known for its tricky and often illogical answers. Each request retrieves a new question and its corresponding unique answer, designed to challenge conventional thinking. This endpoint is ideal for developing quiz applications, entertainment platforms, or any scenario where engaging and humorous brain teasers are desired. The response will be a JSON object containing the question and its answer.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/cc-sd",
      "summary": "cerdas cermat",
      "description": "This API endpoint provides random quiz questions for 'Cerdas Cermat' (smart competition), categorized by various school subjects. Users can specify the subject and the desired number of questions (between 5 and 10). The API shuffles the questions and their answer choices, returning a set of unique questions along with their scrambled options and the correct answer key. This endpoint is ideal for educational applications, quiz games, or e-learning platforms that require dynamic and challenging quiz content.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/family100",
      "summary": "family100",
      "description": "This API endpoint provides a random question from the popular game 'Family 100' (also known as Family Feud). Each request delivers a new question along with its surveyed answers and their corresponding points. This endpoint is perfect for developing interactive quiz applications, entertainment platforms, or any scenario where a 'Family 100'-style game is desired. The response will be a JSON object containing the question and an array of answers with their scores.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/kabupaten",
      "summary": "tebak kabupaten",
      "description": "This API endpoint provides a random Indonesian regency (kabupaten) for a guessing game, including its map image. Each request delivers the name of a regency and a high-resolution URL to its map. This endpoint is ideal for geography quizzes, educational applications, or any platform designed to test knowledge of Indonesian administrative divisions. The response will be a JSON object containing the regency's name, a link to its Wikipedia page, and the URL of its map image.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/karakter-freefire",
      "summary": "tebak karakter freefire",
      "description": "This API endpoint provides a random Free Fire character for a guessing game. Each request delivers details about a character, such as their name, image, or a brief description, challenging users to identify the correct character. This endpoint is ideal for Free Fire fan quizzes, entertainment applications, or any platform focused on testing knowledge about the popular battle royale game's characters. The response will be a JSON object containing information about the randomly selected character.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/lengkapikalimat",
      "summary": "lengkapi kalimat",
      "description": "This API endpoint provides a random 'Lengkapi Kalimat' (complete the sentence) question. Each request retrieves a new incomplete sentence, requiring users to fill in the missing word or phrase to complete it logically and grammatically. This endpoint is ideal for language learning applications, educational games, or any platform focused on improving sentence construction and vocabulary skills. The response will be a JSON object containing the incomplete sentence and its correct completion.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/maths",
      "summary": "maths",
      "description": "This API endpoint generates a random math problem based on a specified difficulty level. Users can choose from various levels like 'noob', 'easy', 'medium', 'hard', 'extreme', and 'impossible' to get a problem tailored to their skill. Each problem includes the mathematical expression, the chosen difficulty mode, a time limit for solving, a bonus for correct answers, and the correct result. This endpoint is ideal for educational apps, brain training games, or any platform requiring dynamic arithmetic challenges.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/siapakahaku",
      "summary": "siapakah aku",
      "description": "This API endpoint provides a random 'Siapakah Aku' (Who Am I?) riddle. Each request delivers a series of clues or characteristics, challenging users to guess the person, object, or concept being described. This endpoint is ideal for interactive riddle games, educational tools that encourage deductive reasoning, or any platform designed to engage users with thought-provoking puzzles. The response will be a JSON object containing the riddle and its correct answer.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/surah",
      "summary": "tebak surah",
      "description": "This API endpoint provides a random ayah (verse) from the Quran for a guessing game. Each request delivers an ayah, challenging users to identify the surah (chapter) it belongs to. This endpoint is ideal for religious educational applications, Islamic quizzes, or any platform focused on testing knowledge of the Quran. The response will be a JSON object containing the ayah text, its surah information, and potentially audio for recitation.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/susunkata",
      "summary": "susun kata",
      "description": "This API endpoint provides a random 'Susun Kata' (arrange words) puzzle. Each request retrieves a jumbled set of words or letters that need to be rearranged to form a meaningful phrase or word. This endpoint is ideal for word puzzle games, language learning applications, or any platform designed to challenge vocabulary and logical thinking. The response will be a JSON object containing the jumbled words and the correct arrangement.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/tebakbendera",
      "summary": "tebak bendera",
      "description": "This API endpoint provides a random country flag quiz. Each request delivers a new challenge featuring a country's flag and its name, prompting users to identify the correct country based on its flag. This endpoint is ideal for geography quizzes, educational applications, or any platform focused on testing knowledge of world flags. The response will be a JSON object containing the flag image URL and the correct country name.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/tebakgambar",
      "summary": "tebak gambar",
      "description": "This API endpoint provides a random 'Tebak Gambar' (guess the picture) question. Each request delivers an image that represents a hidden word or phrase, challenging users to decipher the visual puzzle. This endpoint is ideal for visual quiz games, entertainment applications, or any platform focused on engaging users with creative and challenging image-based riddles. The response will be a JSON object containing the image URL and the correct answer.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/tebakgame",
      "summary": "tebak game",
      "description": "This API endpoint provides a random 'Tebak Game' (guess the game) question. Each request delivers an image or description related to a video game, challenging users to identify the correct game title. This endpoint is ideal for gaming quizzes, entertainment applications, or any platform focused on testing knowledge of video games across various genres and platforms. The response will be a JSON object containing the game hint (e.g., image URL, text) and its correct answer.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/tebakheroml",
      "summary": "tebak hero ml",
      "description": "This API endpoint provides a random Mobile Legends: Bang Bang hero and one of their in-game audio quotes. Users can utilize this endpoint to create a 'Guess the Hero' game, where players listen to the audio and identify the character. The response includes the hero's name and a URL to their audio quote, making it suitable for interactive quiz applications, fan-made games, or content related to Mobile Legends.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/tebakhewan",
      "summary": "tebak hewan",
      "description": "This API endpoint provides a random list of animals with their images, suitable for a guessing game ('Tebak Hewan'). Each request fetches a set of animal names and their corresponding image URLs from a diverse database. This endpoint is ideal for educational games, children's applications, or any platform designed to help users learn about different animals through visual identification. The response includes an array of objects, each containing an animal's name and its image URL.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/tebakjkt",
      "summary": "tebak jkt",
      "description": "This API endpoint provides a random 'Tebak JKT' (Guess JKT48) quiz. Each request delivers an image or clue related to a JKT48 member, challenging users to identify the correct member. This endpoint is ideal for fan quizzes, entertainment applications, or any platform focused on testing knowledge about the popular Indonesian idol group JKT48. The response will be a JSON object containing the hint (e.g., image URL) and the correct member's name.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/tebakkalimat",
      "summary": "tebak kalimat",
      "description": "This API endpoint provides a random 'Tebak Kalimat' (guess the sentence/phrase) question. Each request delivers a jumbled or incomplete sentence, challenging users to reconstruct or complete it correctly. This endpoint is ideal for language games, educational tools focused on sentence structure, or any application designed to enhance vocabulary and logical reasoning. The response will be a JSON object containing the scrambled or incomplete sentence and its correct form.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/tebakkartun",
      "summary": "tebak kartun",
      "description": "This API endpoint provides a random 'Tebak Kartun' (guess the cartoon) question. Each request delivers an image of a cartoon character or scene, challenging users to identify the correct cartoon title. This endpoint is ideal for entertainment applications, cartoon fan quizzes, or any platform focused on testing knowledge of popular animated series. The response will be a JSON object containing the cartoon's image URL and its correct name.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/tebakkata",
      "summary": "tebak kata",
      "description": "This API endpoint provides a random 'Tebak Kata' (guess the word) question. Each request delivers a clue or a set of jumbled letters, challenging users to identify the correct word. This endpoint is ideal for word puzzle games, vocabulary-building applications, or any platform designed to test linguistic skills. The response will be a JSON object containing the clue/jumbled letters and the correct word.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/tebakkimia",
      "summary": "tebak kimia",
      "description": "This API endpoint provides a random 'Tebak Kimia' (guess the chemistry) question. Each request delivers a question related to chemical elements, compounds, or concepts, challenging users to identify the correct answer. This endpoint is ideal for educational applications, chemistry quizzes, or any platform focused on testing and improving knowledge of fundamental chemistry principles. The response will be a JSON object containing the chemistry question and its correct answer.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/tebaklagu",
      "summary": "tebak lagu",
      "description": "This API endpoint provides a random 'Tebak Lagu' (guess the song) question. Each request delivers a snippet of a song (e.g., audio URL or lyrics excerpt), challenging users to identify the correct song title and artist. This endpoint is ideal for music quiz games, entertainment applications, or any platform focused on testing musical knowledge across various genres. The response will be a JSON object containing the song hint and its correct answer.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/tebaklirik",
      "summary": "tebak lirik",
      "description": "This API endpoint provides a random 'Tebak Lirik' (guess the lyrics) question. Each request delivers a snippet of song lyrics, challenging users to identify the correct song title and/or artist. This endpoint is ideal for music quiz games, entertainment applications, or any platform focused on testing knowledge of popular song lyrics across various genres. The response will be a JSON object containing the lyrics excerpt and its correct song/artist information.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/tebaklogo",
      "summary": "tebak logo",
      "description": "This API endpoint provides a random 'Tebak Logo' (guess the logo) question. Each request delivers an image of a well-known brand or application logo, challenging users to identify the correct company or app. This endpoint is ideal for logo quiz games, marketing trivia, or any platform focused on testing brand recognition skills. The response will be a JSON object containing the logo image URL and its correct name.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/tebaktebakan",
      "summary": "tebak tebakan",
      "description": "This API endpoint provides a random 'Tebak Tebakan' (riddle or guessing game) question. Each request delivers a new riddle designed to challenge wits and creativity. This endpoint is ideal for interactive entertainment applications, casual games, or any platform that aims to engage users with humorous or thought-provoking riddles. The response will be a JSON object containing the riddle and its answer.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/tebakwarna",
      "summary": "tebak warna",
      "description": "This API endpoint provides a random 'Tebak Warna' (guess the color) question. Each request delivers a challenge related to color identification, often used in games designed to test color perception or knowledge. This endpoint is ideal for interactive quizzes, educational tools focused on colors, or any platform that aims to engage users with visual color-based puzzles. The response will be a JSON object containing the color hint (e.g., color code, description) and its correct name.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/games/tekateki",
      "summary": "teka teki",
      "description": "This API endpoint provides a random 'Teka Teki' (riddle) question. Each request delivers a new riddle designed to challenge wits and critical thinking. This endpoint is ideal for interactive riddle games, casual entertainment applications, or any platform focused on engaging users with clever and humorous puzzles. The response will be a JSON object containing the riddle and its correct answer.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Get Data": [
    {
      "method": "POST",
      "path": "/api/get/ampreset",
      "summary": "Detail Alight Motion Preset",
      "description": "This API endpoint allows you to retrieve detailed metadata for an Alight Motion project using a POST request. By providing a valid Alight Motion project URL in the request body, the API processes the URL to extract the User ID (UID) and Project ID (PID). It then fetches relevant details about the project, such as its name, description, and creator. This method is ideal for applications that prefer sending data in the request body for more complex or secure interactions. The API returns structured JSON data containing the project's information.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/get/musixmatch",
      "summary": "Get Data From Musixmatch",
      "description": "This API endpoint facilitates the retrieval of song lyrics, artist, and album information from Musixmatch via a POST request. Users submit the Musixmatch URL of a song in the request body. The API then employs Puppeteer with Stealth Plugin to navigate to the provided URL and scrape the song's title and detailed lyrics, organized into sections like VERSE, CHORUS, and including performer credits. This method is suitable for applications that prefer sending data in the request body for enhanced security or more complex integrations. The API returns the extracted song title and formatted lyrics.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Iloveimg": [
    {
      "method": "POST",
      "path": "/api/iloveimg/blurface",
      "summary": "blurface",
      "description": "This API blurs faces detected in an image uploaded as a file via multipart/form-data. Users can upload an image file, and the API will process it to identify and blur human faces, returning the modified image. This is ideal for applications requiring direct file uploads for privacy enhancement. The API supports various image formats and ensures faces are obscured while preserving other image details.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/iloveimg/compress",
      "summary": "compress",
      "description": "Compress an image by uploading a file via multipart/form-data. This API endpoint allows you to reduce the file size of an uploaded image. It supports common image formats like JPG, JPEG, PNG, GIF, and WEBP. The compressed image will be returned as a binary response. This is ideal for applications where users upload images directly for compression.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/iloveimg/image2jpg",
      "summary": "image2jpg",
      "description": "Convert an image to JPG format by uploading a file via multipart/form-data. This API endpoint allows you to transform various uploaded image formats into a standardized JPG format. It supports common image formats like PNG, GIF, and WEBP, converting them into a high-quality JPG image. The converted image will be returned as a binary response. This is ideal for applications where users upload images directly for conversion.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/iloveimg/image2png",
      "summary": "image2png",
      "description": "Convert an image to PNG format by uploading a file via multipart/form-data. This API endpoint allows you to transform various uploaded image formats into a standardized PNG format. It supports common image formats like JPG, GIF, and WEBP, converting them into a high-quality PNG image. The converted image will be returned as a binary response. This is ideal for applications where users upload images directly for conversion and require PNG output.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/iloveimg/removebg",
      "summary": "removebg",
      "description": "Remove background from an image by uploading a file via multipart/form-data. This API endpoint allows you to upload an image and have its background intelligently removed, leaving the main subject isolated. It is perfect for users who need to process images directly from their local files for various creative or business purposes. The output will typically be a PNG image with a transparent background.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/iloveimg/upscale",
      "summary": "upscale",
      "description": "Upscale an image by uploading a file via multipart/form-data. This API endpoint allows you to upload an image and increase its resolution by a factor of 2x or 4x, enhancing its quality and detail. It is perfect for users who need to improve the quality of their local images for printing, digital displays, or any high-resolution requirement. The output will be a higher-resolution image in JPEG format.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "ImgEdit": [
    {
      "method": "POST",
      "path": "/api/imgedit/convphoto",
      "summary": "convert photo",
      "description": "Convert a photo to a cartoon style by uploading a file via multipart/form-data and specified template/style. This endpoint allows users to upload their images and transform them into various artistic cartoon or sketch styles using ImgEdit.ai's powerful AI. You can select different templates such as 'sketch_v2' for line drawings or 'anime' for cartoon effects, and then specify a particular style within the chosen template. The output is a processed image in PNG format, suitable for creative applications or social media.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/imgedit/faceswap",
      "summary": "face swap",
      "description": "Swap faces between two uploaded images via multipart/form-data. This API endpoint allows you to upload two image files and seamlessly replace a face from one image onto another. It's a powerful tool for creative photo editing, generating humorous content, or producing unique visual effects. The API will return a JSON object containing the URL of the processed image with the swapped face.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Info": [
    {
      "method": "POST",
      "path": "/api/info/bmkg",
      "summary": "bmkg gempa",
      "description": "This API endpoint provides the latest earthquake information from BMKG (Badan Meteorologi, Klimatologi, dan Geofisika), the Indonesian Agency for Meteorology, Climatology, and Geophysics. It fetches data on automatic earthquakes, recent earthquakes, and felt earthquakes. The endpoint returns a structured JSON object containing all three categories of earthquake data. This information can be used for applications requiring real-time earthquake monitoring, public safety alerts, or geographical analysis of seismic activity.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/info/cuaca",
      "summary": "cuaca",
      "description": "This API endpoint allows users to retrieve weather information by sending a location query in the request body. It performs a search for relevant administrative regions based on the provided query and fetches corresponding weather data from the BMKG (Indonesian Agency for Meteorology, Climatology, and Geophysics). The response includes matching regions with their codes, names, similarity scores, and associated weather data if available. This method is suitable for programmatic access where the query is sent as part of a JSON payload.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/info/event-indonesia",
      "summary": "Indonesia event",
      "description": "This API endpoint provides comprehensive information about national holidays and other important events in Indonesia. It aggregates data from various sources, including Wikipedia and the Tanggalan website, to offer details on today's events, upcoming national events, and holidays. The response includes structured data on all recorded holidays and national days, as well as statistics on the total number of events. This endpoint is useful for applications requiring a calendar of Indonesian national events, such as planning tools, news platforms, or educational resources.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/info/jadwaltv",
      "summary": "jadwalTV",
      "description": "This API endpoint allows you to retrieve the current TV schedule for various national channels in Indonesia. You can either fetch the schedules for all available national channels at the moment or specify a particular channel to get its detailed schedule. This is useful for applications that need to display up-to-date television programming information, such as TV guides, media portals, or smart home integrations. The response includes the broadcast time and the name of the program for each entry.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Maker": [
    {
      "method": "POST",
      "path": "/api/m/beautiful",
      "summary": "beautiful",
      "description": "This API endpoint applies a 'beautiful' effect to an image uploaded as a file. Users can send an image file in multipart/form-data, and the API will process it by overlaying it onto a base image, returning the modified image. This functionality is ideal for applications where users need to upload images directly from their device to apply visual enhancements or effects.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/m/blur",
      "summary": "blur",
      "description": "This API endpoint allows you to apply a blur effect to an image uploaded as a file. The image will be processed and returned as a PNG buffer. This is suitable for applications where users upload images directly for manipulation, such as profile picture editing or image effect tools. Supported image formats include JPG, JPEG, PNG, GIF, and WEBP.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/m/brat",
      "summary": "brat",
      "description": "Generate a Brat image or animated GIF from text. This API allows users to create visual representations of text, either as a static image (WEBP format) or an animated GIF. The text input will be processed and rendered by the Brat Generator tool, with options for animation and delay between words in the GIF. This can be used for creative content, social media posts, or dynamic text displays.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/m/carbonify",
      "summary": "carbonify",
      "description": "This API endpoint allows users to generate visually appealing images from code snippets, often referred to as 'carbonizing' code. It takes a code string as input in the request body and returns an image (PNG format) of the code with syntax highlighting and a stylish background. This is useful for sharing code snippets on social media, presentations, or documentation, making them more readable and aesthetically pleasing. The endpoint supports various programming languages and provides a quick way to convert raw code into a shareable image. The output is a direct image file, making it easy to embed or display.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/m/circle",
      "summary": "circle",
      "description": "Apply a circle mask to an uploaded image file. This API takes an image file directly as input (via multipart/form-data), applies a circular mask to it, and returns the modified image as a PNG. This is suitable for scenarios where users need to upload an image directly for processing, such as in web applications for profile picture uploads.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/m/darkness",
      "summary": "darkness",
      "description": "Apply a darkness effect to an uploaded image file. This API takes an image file directly (via multipart/form-data) and an optional darkness 'amount'. It adjusts the brightness of the uploaded image and returns the modified image as a PNG. This is useful for in-app image processing where users upload their images for artistic enhancements or corrections.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/m/ektp",
      "summary": "ektp generator",
      "description": "This API generates a simulated Indonesian e-KTP (Kartu Tanda Penduduk) image using data provided in the request body and an uploaded passport-style photo. Users can supply personal details such as province, city, NIK (National Identification Number), name, date of birth, gender, blood type, address, RT/RW, sub-district/village, district, religion, marital status, occupation, citizenship, validity period, and issue date. The endpoint expects a 'multipart/form-data' content type where the image file is included as 'pas_photo'. The API processes these inputs to create a realistic e-KTP image, returning it as a PNG buffer. This is ideal for applications requiring the generation of mock e-KTPs with specific data and image uploads, facilitating testing, demonstrations, or educational simulations.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/m/facepalm",
      "summary": "facepalm",
      "description": "This API endpoint applies a 'facepalm' effect to an image uploaded as a file. Users can send an image file (JPG, JPEG, PNG, GIF, WEBP), and the API will overlay a facepalm graphic onto it, returning the modified image. This is ideal for applications where users upload images directly for editing, such as custom meme generators or social media tools. The output is always a PNG image.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/m/sertifikat-tolol",
      "summary": "sertifikat tolol",
      "description": "This API endpoint generates a 'Sertifikat Tolol' (Fool's Certificate) image with custom text. Users can provide a string of text via a JSON request body, which will be rendered onto a pre-designed certificate template. This feature is primarily for entertainment purposes, allowing users to create humorous or ironic 'certificates' for various scenarios, especially when integrating with applications that prefer JSON payloads. The generated image is returned in JPEG format.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/m/textpro",
      "summary": "textpro",
      "description": "This API endpoint allows you to generate custom images using textpro.me effects by providing a TextPro URL and up to two text inputs in the request body. It supports various text effects available on the textpro.me website. The endpoint handles the entire process, including reCAPTCHA bypass, form submission, and image generation, returning the final image as a binary buffer. This is useful for creating personalized images programmatically, such as logos, banners, or stylized text for social media and web applications.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/m/tweet",
      "summary": "tweet generator",
      "description": "This API endpoint allows you to generate a realistic-looking tweet image by providing various parameters as multipart/form-data, including uploaded files for profile picture and an optional image within the tweet. It is useful for creating mockups, social media content, or testing purposes.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Primbon": [
    {
      "method": "POST",
      "path": "/api/primbon/artinama",
      "summary": "arti nama",
      "description": "This API endpoint allows users to retrieve the meaning of a given name from Primbon. It takes a name as input in the request body and returns its meaning, if found, along with a note about name compatibility. This can be used for personal curiosity, cultural studies, or integrating name meanings into applications.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/primbon/cek_potensi_penyakit",
      "summary": "cek potensi penyakit",
      "description": "This API endpoint allows users to check their potential disease risks based on their birth date, using the Pythagorean method as per Primbon calculations. It takes the day, month, and year of birth in the request body and provides an analysis of potential health issues, analyzed sectors, and missing elements, along with important preventive notes. This can be used for personal health awareness or numerological insights into well-being.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/primbon/kecocokan_nama_pasangan",
      "summary": "kecocokan nama pasangan",
      "description": "This API endpoint allows users to check the compatibility of two names according to Primbon. It takes two names in the request body and returns details about their positive and negative aspects, along with a related image and additional notes for further compatibility checks. This is useful for those interested in traditional Indonesian beliefs about relationship compatibility.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/primbon/nomorhoki",
      "summary": "nomor hoki",
      "description": "This API endpoint determines the 'lucky' status of a given phone number based on Primbon's Bagua Shuzi and energy calculations. It takes the phone number in the request body and provides insights into positive energy aspects (wealth, health, love, stability) and negative energy aspects (disputes, loss, disaster, destruction). The endpoint also offers an overall analysis indicating if the number is considered lucky based on predefined thresholds. This can be used for personal interest or applications involving numerology.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/primbon/ramalanjodoh",
      "summary": "ramalan jodoh",
      "description": "This API endpoint offers a Javanese Primbon-based marriage compatibility prediction. Users provide the names and birth dates (day, month, year) of two individuals in the request body. The API processes this information and returns a detailed compatibility analysis based on 6 'petung perjodohan' from the 'Betaljemur Adammakna' book. It includes details about each person, a comprehensive list of predictions, and an important warning regarding interpretation. This endpoint is useful for those interested in traditional Javanese cultural beliefs about marriage and relationships.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/primbon/ramalanjodohbali",
      "summary": "ramalan jodoh bali",
      "description": "This API endpoint offers a Balinese Primbon-based marriage compatibility prediction. Users provide the names and birth dates (day, month, year) of two individuals in the request body. The API processes this information and returns a detailed compatibility analysis according to the 'Pal Sri Sedanai' method, including the birth details of both individuals and a comprehensive result of their suitability. Additionally, it provides notes for further compatibility checks using other Primbon methods. This endpoint is useful for those interested in traditional Balinese cultural beliefs about marriage and relationships.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/primbon/rejeki_hoki_weton",
      "summary": "rejeki hoki weton",
      "description": "This API endpoint provides luck and fortune predictions based on Javanese Wetons. Users input their birth day, month, and year in the request body, and the API returns their Weton (day of birth combination) and a prediction regarding their fortune or 'rejeki'. It also includes a philosophical note emphasizing effort over pure prediction. This endpoint is useful for those interested in Javanese cultural beliefs about destiny and prosperity.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/primbon/sifat_usaha_bisnis",
      "summary": "sifat usaha bisnis",
      "description": "This API endpoint provides insights into an individual's business characteristics and suitability for various ventures, based on their birth date according to Primbon. Users input their birth day, month, and year in the request body, and the API returns their birth day details and an analysis of their business nature. It also includes a note emphasizing the importance of understanding these traits for self-improvement and better collaboration in business. This endpoint is useful for those seeking traditional guidance on their entrepreneurial path.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/primbon/tafsirmimpi",
      "summary": "tafsir mimpi",
      "description": "This API endpoint interprets dreams based on Primbon, a traditional Javanese and Balinese divination system. Users can input a keyword representing their dream in the request body, and the API will return a list of interpretations related to that keyword, along with a general solution or advice. This endpoint is useful for those seeking traditional insights into the meanings of their dreams.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/primbon/zodiak",
      "summary": "zodiak",
      "description": "This API endpoint retrieves detailed information for a specific zodiac sign from Primbon. Users provide the name of a zodiac sign in the request body, and the API returns various attributes associated with it, including lucky numbers, lucky aromas, ruling planet, lucky flower, lucky color, lucky stone, lucky element, and compatible zodiac signs. This endpoint is useful for those interested in astrology and traditional Primbon insights related to zodiac signs.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Random": [
    {
      "method": "POST",
      "path": "/api/r/blue-archive",
      "summary": "random blue archive",
      "description": "This API endpoint provides a random image from the popular game 'Blue Archive' via a POST request. It fetches image URLs from a curated GitHub Gist and returns a binary image response. This can be used for applications that prefer POST requests for fetching content related to Blue Archive, such as dynamic content loading or internal system calls. The endpoint ensures a direct image delivery for seamless integration.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/r/cats",
      "summary": "random foto kucing",
      "description": "This API endpoint provides a random image of a cat via a POST request. It retrieves the image from an external source and sends it back as a binary response. This can be utilized in scenarios where POST requests are preferred for content retrieval, such as within web forms or specific backend integrations. The endpoint ensures a direct and efficient delivery of cat images.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/r/cecan/china",
      "summary": "random cecan china",
      "description": "This API endpoint provides a random image of Chinese 'cecan' (beautiful women) via a POST request. It fetches image URLs from a curated GitHub Gist and returns a binary image response. This can be used for applications that prefer POST requests for fetching content, such as dynamic content loading or internal system calls. The endpoint ensures a direct image delivery for seamless integration.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/r/cecan/indonesia",
      "summary": "random cecan indonesia",
      "description": "This API endpoint provides a random image of Indonesian 'cecan' (beautiful women) via a POST request. It fetches image URLs from a curated GitHub Gist and returns a binary image response. This can be used for applications that prefer POST requests for fetching content, such as dynamic content loading or internal system calls. The endpoint ensures a direct image delivery for seamless integration.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/r/cecan/japan",
      "summary": "random cecan japan",
      "description": "This API endpoint provides a random image of Japanese 'cecan' (beautiful women) via a POST request. It fetches image URLs from a curated GitHub Gist and returns a binary image response. This can be used for applications that prefer POST requests for fetching content, such as dynamic content loading or internal system calls. The endpoint ensures a direct image delivery for seamless integration.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/r/cecan/korea",
      "summary": "random cecan korea",
      "description": "This API endpoint provides a random image of Korean 'cecan' (beautiful women) via a POST request. It fetches image URLs from a curated GitHub Gist and returns a binary image response. This can be used for applications that prefer POST requests for fetching content, such as dynamic content loading or internal system calls. The endpoint ensures a direct image delivery for seamless integration.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/r/cecan/thailand",
      "summary": "random cecan thailand",
      "description": "This API endpoint provides a random image of Thai 'cecan' (beautiful women) via a POST request. It fetches image URLs from a curated GitHub Gist and returns a binary image response. This can be used for applications that prefer POST requests for fetching content, such as dynamic content loading or internal system calls. The endpoint ensures a direct image delivery for seamless integration.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/r/cecan/vietnam",
      "summary": "random cecan vietnam",
      "description": "This API endpoint provides a random image of Vietnamese 'cecan' (beautiful women) via a POST request. It fetches image URLs from a curated GitHub Gist and returns a binary image response. This can be used for applications that prefer POST requests for fetching content, such as dynamic content loading or internal system calls. The endpoint ensures a direct image delivery for seamless integration.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/r/lahelu",
      "summary": "lahelu",
      "description": "This API endpoint allows you to retrieve random posts from the Lahelu platform using a POST request. It fetches a diverse selection of recommended posts by employing a randomized cursor. The response provides comprehensive details for each post, including direct links to post IDs, media content, user profiles, and precise creation timestamps. This endpoint is suitable for applications that prefer or require POST requests for data retrieval, offering a consistent way to access dynamic content from Lahelu.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/r/neko",
      "summary": "random anime neko",
      "description": "This API endpoint allows you to retrieve a random anime neko (cat girl) image using a POST request. It fetches the image from an external waifu API and returns it as a binary response. This is suitable for applications that prefer POST requests for content retrieval, such as dynamic content loading or specific backend integrations, ensuring a consistent delivery of delightful anime neko images.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/r/quotesanime",
      "summary": "animequotes",
      "description": "This API endpoint retrieves random anime quotes using a POST request. It scrapes various details such as quote text, character name, anime title, episode, associated image, and source link from a Japanese anime quote website. This is suitable for applications that prefer POST requests for content retrieval, allowing for dynamic integration of anime quotes into platforms, bots, or other services, providing users with engaging and unique content.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/r/rumahmisteri",
      "summary": "rumah misteri",
      "description": "This API endpoint retrieves random mystery stories from 'Rumah Misteri' using a POST request. It functions as a web scraper, extracting comprehensive details for each story including post IDs, thumbnail data, categories, publication dates, authors, titles, content excerpts, and associated tags. This is suitable for applications that prefer or require POST requests for data retrieval, enabling developers to dynamically integrate captivating mystery and horror content into their platforms, ensuring a varied selection with each call.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/r/seegore",
      "summary": "seegore",
      "description": "This API endpoint allows you to retrieve random posts from Seegore, a website featuring gore content, via a POST request. It scrapes a random page, gathers post details like title, link, thumbnail, view count, vote count, tags, and comments. Subsequently, it selects a random post and retrieves its detailed information, including direct video links. This endpoint is designed for applications requiring explicit content, and developers should be aware of the nature of the data provided.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/r/waifu",
      "summary": "random waifu",
      "description": "This API endpoint allows you to retrieve a random waifu image using a POST request. It fetches the image from an external waifu API and returns it as a binary response. This is suitable for applications that prefer POST requests for content retrieval, such as dynamic content loading or specific backend integrations, ensuring a consistent delivery of delightful waifu images.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Search": [
    {
      "method": "POST",
      "path": "/api/github/dependents",
      "summary": "dependents",
      "description": "This API endpoint allows you to retrieve a list of repositories that depend on a specified GitHub repository. It scrapes the GitHub website to gather information about direct dependents, including their usernames, repository names, repository URLs, star counts, and fork counts. You can specify the GitHub repository URL and a page range to control the depth of the scrape. This is useful for analyzing project dependencies, identifying popular integrations, or understanding the ecosystem around a specific library or framework.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/images",
      "summary": "google image",
      "description": "This API endpoint allows users to search for images on Google Images by providing a search query in the request body. It scrapes image URLs, widths, and heights directly from Google's image search results. The endpoint provides a powerful way to integrate Google Image search capabilities into applications, allowing for the retrieval of relevant images based on user input. It also includes filtering capabilities to exclude specific domains from the search results, ensuring more targeted and useful outcomes.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/8font",
      "summary": "8 font",
      "description": "This API endpoint allows you to search for fonts available on 8font.com. You can specify a search query to find fonts matching your criteria and also paginate through the results. This is useful for developers who need to integrate font search capabilities into their applications or for designers looking for specific font styles.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/animequotes",
      "summary": "quoted anime",
      "description": "This API endpoint allows you to search for anime quotes from Otakotaku.com by sending a JSON request body. You can provide a 'query' field within the JSON to filter quotes based on keywords, character names, or anime titles. The endpoint will return a list of matching quotes, including details such as the quote itself, the character who said it, the anime and episode it's from, a link to the quote, and an associated image. This API is suitable for programmatic access where the search query is sent as part of the request body, offering more flexibility for complex queries or automated processes.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/applemusic",
      "summary": "music apple",
      "description": "This API endpoint allows users to search for music on Apple Music. You can specify a search query (e.g., song title, artist name) and an optional region to get localized search results. The API will return a list of music tracks, including their title, artist, a direct link to the content on Apple Music, and an image if available. This is useful for integrating Apple Music search functionality into applications.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/bimg",
      "summary": "bing image",
      "description": "This API endpoint allows you to search for images using Bing's image search engine. Provide a search query, and the API will return a list of image URLs found on Bing. This is useful for applications requiring image search capabilities, such as content aggregation, visual search tools, or automated image fetching.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/brave",
      "summary": "brave",
      "description": "This API endpoint performs a web search using the Brave search engine. It takes a search query as input and returns a list of search results, including the title, description, URL, image URL (if available), site name, and publication date for each result. This is useful for applications that need to integrate a privacy-focused web search capability.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/duckduckgo",
      "summary": "duckduckgo",
      "description": "This API endpoint allows you to perform web searches using DuckDuckGo by providing parameters in a JSON request body. You can specify a search query, and optionally filter results by country/region and time. The API will return a list of search results including titles, URLs, snippets, display URLs, and favicons. It also indicates if there are more results available for pagination.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/gitagram",
      "summary": "gitagram",
      "description": "This API endpoint allows users to search for music chords on Gitagram by providing a music title or artist in the request body. It scrapes the search results from Gitagram and then retrieves the detailed chord information for each result, providing a comprehensive set of data including the song title, artist, direct link to the chords, type of content, and the full chord sheet. This API is useful for musicians, developers building music applications, or anyone looking to quickly access guitar or piano chords for a specific song.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/gsmarena",
      "summary": "gsmarena",
      "description": "This API endpoint allows users to search for mobile phone information on GSMArena.com by providing a search query in the request body. Users can retrieve a list of devices matching the query, including their ID, name, thumbnail image, and a brief description. This is useful for developers building applications that require device specifications or for users who want to quickly look up phone models and their basic details.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/kbbi",
      "summary": "kbbi",
      "description": "This API endpoint allows users to search for definitions of words in the official Indonesian Dictionary (KBBI) by providing a word in the request body. The API will return a structured list of definitions, including numerical indices for different meanings and sub-definitions. This endpoint is ideal for applications requiring access to the Indonesian language's authoritative lexicon, such as educational tools, natural language processing projects, or spell checkers.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/lahelu",
      "summary": "lahelu",
      "description": "This API endpoint allows users to search for posts on Lahelu.com, a social media platform, by providing a search query in the request body. It retrieves and formats information about relevant posts, including their unique ID, associated media (image or video), media thumbnail, the username and avatar of the user who posted it, and the creation timestamp. This endpoint is useful for integrating Lahelu's content into other applications, for content discovery, or for analyzing popular trends on the platform.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/mangatoon",
      "summary": "mangatoon",
      "description": "This API endpoint allows users to search for comics and novels on Mangatoon by providing a search query in the request body. The API returns categorized results including comics found on the internet, comics hosted directly on Mangatoon, and novels. Each result provides the title, cover image URL, and a direct link to the content. This endpoint is valuable for applications focused on manga and web novel discovery, content aggregation, or personal reading list management.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/mcpedl",
      "summary": "mcpedlsearch",
      "description": "This API endpoint allows users to search for Minecraft Pocket Edition (MCPE) content on MCPEDL.org using a search query provided in the request body. It scrapes information such as the title, direct link, image thumbnail, and rating for each relevant result. This endpoint is useful for developers building tools or applications for Minecraft players, allowing them to easily discover and access mods, maps, textures, and other add-ons for MCPE.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/musixmatch",
      "summary": "musixmatch",
      "description": "This API endpoint allows you to search for tracks on Musixmatch using a JSON request body. You can provide a track title or artist as the 'query' field in the JSON payload. The API will process your request and return a list of tracks that match your search criteria, including detailed information about each track such as its name, artist, and Musixmatch track ID. This endpoint is ideal for applications requiring structured data submission for music searches, ensuring efficient and accurate retrieval of track information.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/myinstants",
      "summary": "my instants",
      "description": "Search for instant sound clips on MyInstants.com using JSON body. This API endpoint allows users to find a variety of sound clips by providing a search query in the request body. The response includes details about each sound, such as its title, a unique instant ID, a shareable URL to the sound's page, and a direct URL to the sound file. This can be used for integrating sound searches into applications, bots, or any platform requiring quick access to a library of short audio clips.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/otakotaku",
      "summary": "otakotaku",
      "description": "Search for anime, characters, and articles on Otakotaku.com using JSON body. This endpoint provides a comprehensive search across different categories on Otakotaku, including anime titles, character profiles, and news articles. Users can specify a search query to retrieve relevant results, which include the title, image URL, and a direct link to the content on Otakotaku. This API is useful for developers building applications that need to integrate with Otakotaku's content, such as anime tracking apps, character databases, or news aggregators focused on Japanese pop culture.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/pinterest",
      "summary": "pinterest",
      "description": "This API endpoint allows you to search for various media types on Pinterest, including images, videos, and GIFs, by providing a JSON request body. You can specify a search query to find relevant content. The results will include details such as the Pinterest pin URL, original link, creation date, image URL, video URL (if applicable), GIF URL (if applicable), title, description, and information about the pinner and board. This is useful for applications requiring visual content search from Pinterest.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/pinterest-lens",
      "summary": "pinterest lens search",
      "description": "This API endpoint allows you to search Pinterest using an uploaded image file. It utilizes the Pinterest visual lens technology to find similar pins based on the provided image. The endpoint expects an image file in 'multipart/form-data' format. It will validate the uploaded file to ensure it's a supported image type before performing a visual search on Pinterest. The response will include a list of relevant pins with details such as ID, title, description, media (image or video), creator information, and engagement statistics. This is ideal for users who want to upload an image directly from their device to find visually similar content on Pinterest.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/resep",
      "summary": "resep koki",
      "description": "This API endpoint allows you to search for recipes on ResepKoki.id and retrieve detailed information about them by sending a JSON request body. You can provide a 'query' field within the JSON for various recipes like 'ayam goreng' (fried chicken) or 'nasi goreng' (fried rice). The endpoint will return a list of recipes that match your query, including details such as the recipe title, cooking time, yield, difficulty level, a thumbnail image, a list of ingredients with their quantities, and step-by-step cooking instructions. This API is suitable for programmatic access where the search query is sent as part of the request body, offering more flexibility for complex queries or automated processes.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/seegore",
      "summary": "seegore",
      "description": "This API allows users to search for videos on Seegore.com using a search query via a POST request with a JSON body. It scrapes the website for relevant video results and returns details such as video title, uploader, thumbnail, and a direct link to the video. This can be used to integrate Seegore search functionality into applications or bots, providing access to their video content based on user-defined keywords.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/soundcloud",
      "summary": "soundcloud",
      "description": "This API allows users to search for music tracks on SoundCloud using a JSON request body. By providing a search query, users can retrieve a list of tracks with details such as genre, creation date, duration, permalink, comment count, artwork URL, and playback count. This endpoint is useful for applications that need to integrate SoundCloud search functionality or display track information.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/spotify",
      "summary": "spotify",
      "description": "This API endpoint allows you to search for tracks on Spotify using a JSON request body. You must provide a search query, and the API will return relevant track information including track URL, thumbnail, title, artist, duration, preview URL, album, and release date. This is useful for applications that need to integrate Spotify search functionality with POST requests.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/tiktok",
      "summary": "tiktok",
      "description": "This API endpoint allows you to search for TikTok videos by providing a keyword in the JSON request body. It returns a list of videos matching the search query, including details such as video URL, author, description, and other relevant metadata. This is useful for applications that want to integrate TikTok video search capabilities using POST requests.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/wikipedia",
      "summary": "wikipedia",
      "description": "This API endpoint allows you to search for articles on Wikipedia (Indonesian version) by providing a search query in the JSON request body. It returns the main descriptive paragraph of the article and an associated thumbnail image if available. This is useful for quickly retrieving summaries of topics from Wikipedia using POST requests.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/s/youtube",
      "summary": "youtube",
      "description": "This API endpoint allows you to search for videos and channels on YouTube using a JSON request body. Users can provide a search query, and the API will return relevant results, including videos and channel information. This is useful for applications requiring Youtube integration, such as custom video players, content aggregators, or research tools, especially when sending data via a POST request for structured queries. The API aims to provide comprehensive search results from YouTube, making it easier to find specific content programmatically.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Stalker": [
    {
      "method": "POST",
      "path": "/api/stalk/github",
      "summary": "github",
      "description": "This API endpoint allows you to retrieve detailed profile information for any GitHub user. By providing a GitHub username in the request body, you can access public data such as their username, nickname, bio, profile picture URL, repository count, follower/following counts, and more. This is useful for applications requiring GitHub user data lookup, profile display, or analysis of developer activity.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/stalk/instagram",
      "summary": "instagram",
      "description": "This API endpoint allows you to retrieve detailed profile information for any Instagram user by providing their username in the request body. It fetches public data such as their full name, biography, profile picture URL, follower and following counts, post count, and details about their recent posts including captions, like counts, and comments. This is ideal for applications needing to display Instagram user profiles or analyze public Instagram data.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/stalk/pinterest",
      "summary": "pinterest",
      "description": "This API endpoint allows you to retrieve public profile information for a specified Pinterest user using their username in a JSON request body. It provides detailed data including their ID, full name, bio, profile image URLs (small, medium, large, original), statistics on pins, followers, following, boards, likes, and saves. Additionally, it provides information about their website, location, country, verification status, and social media links. This is useful for applications requiring Pinterest user data for display or analysis.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/stalk/roblox",
      "summary": "roblox",
      "description": "This API endpoint provides comprehensive information about a Roblox user. It takes a Roblox username as input and returns a detailed profile including basic user info, status, presence, social statistics (friends, followers, following counts), group affiliations, recently played and favorite games, avatar details (headshot, full body, bust, and currently wearing items), and a list of badges, collectibles, and bundles. The endpoint is designed to give a complete overview of a user's activity and profile on the Roblox platform. It's useful for a variety of applications, such as user analytics, profile visualization, and social tracking.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/stalk/threads",
      "summary": "threads",
      "description": "This API endpoint allows you to retrieve public profile information for a Threads user by providing their username in a JSON request body. It scrapes data such as their ID, username, full name, biography, profile pictures (standard and HD), verification status, follower count, and external links in their bio. This is ideal for applications needing to display Threads user profiles or analyze public Threads data.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/stalk/tiktok",
      "summary": "tiktok",
      "description": "This API endpoint allows you to retrieve public profile information for a specified TikTok user using their username in a JSON request body. It fetches detailed user information, including statistics and other publicly available data. This is useful for applications requiring TikTok user data for display, analysis, or integration.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/stalk/twitter",
      "summary": "twitter",
      "description": "This API endpoint allows you to retrieve public profile information for a specified Twitter (X) user using their username in a JSON request body. It fetches detailed user data including their ID, username, display name, verification status, biography, location, account creation date, and various statistics such as tweet count, followers, following, likes, and media count. It also provides URLs for their profile image and banner. This is useful for applications requiring Twitter user data for display, analysis, or integration.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/stalk/youtube",
      "summary": "youtube",
      "description": "This API endpoint allows you to retrieve public information about a YouTube channel and its latest five videos by providing a YouTube username in a JSON request body. It fetches channel details such as username, display name, subscriber count, video count, avatar URL, channel URL, and description. For each of the latest videos, it provides the video ID, title, thumbnail, published time, view count, duration, and direct video URL. This is useful for applications or users wanting to get quick insights into a YouTube channel's content and statistics.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Sticker": [
    {
      "method": "POST",
      "path": "/api/sticker/combot-search",
      "summary": "combot sticker",
      "description": "This API allows you to search for Telegram sticker packs on Combot.org by providing a search query and an optional page number in the request body (JSON). It returns detailed information about each sticker pack found, including its title, dates of creation and update, sticker type, the total count of stickers, an array of sticker image URLs, and a direct link to add the sticker pack to Telegram.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/sticker/stickerly-detail",
      "summary": "stickerly detail",
      "description": "This API endpoint retrieves detailed information about a sticker pack from Sticker.ly by providing its share URL in the JSON request body. It extracts the sticker pack ID from the URL and fetches comprehensive data, including the pack's name, author information (display name, username, bio, follower/following counts, privacy, avatar, website, and share URL), a detailed list of individual stickers (file name, animation status, image URL), and various metrics such as total sticker count, view count, export count, payment status, animation status, and a thumbnail image URL for the pack.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/sticker/stickerly-search",
      "summary": "stickerly search",
      "description": "This API allows you to search for sticker packs on Sticker.ly by providing a search keyword in the JSON request body. It returns a comprehensive list of sticker packs that match your query, including details such as the pack's name, author, total number of stickers, view and export counts, whether the pack is paid or animated, a URL for its thumbnail, and a shareable link to the sticker pack.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Tools": [
    {
      "method": "POST",
      "path": "/api/tools/base642text",
      "summary": "base642text",
      "description": "This API endpoint decodes a Base64 encoded string into plain text using a JSON request body. Users can send a Base64 string in the request body, and the API will return the decoded text. This method is suitable for programmatic interactions where Base64 data is sent as part of a structured request, offering a convenient way to convert encoded strings.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/tools/binary2text",
      "summary": "binary2text",
      "description": "This API endpoint converts a binary code string into human-readable text using a JSON request body. Users can send a space-separated binary string in the request body, and the API will decode it to its corresponding text representation. This method is suitable for programmatic interactions where binary data is sent as part of a structured request.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/tools/colorize",
      "summary": "colorize",
      "description": "This API endpoint colorizes a grayscale image from an uploaded file. Users can send a grayscale image file via multipart/form-data, and the API will process it to add color, returning the colorized image as a WebP buffer. This method is suitable for direct image uploads, enabling users to enhance black and white images with realistic colors.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/tools/countryInfo",
      "summary": "country Info",
      "description": "This API endpoint provides detailed information about a country based on its name, sent in a JSON request body. Users can submit the country name, and the API will return comprehensive data including its capital, flag, phone code, continent, geographical coordinates, area, languages, famous features, constitutional form, neighboring countries, currency, driving side, alcohol prohibition status, internet TLD, and ISO codes. The endpoint also includes a similarity matching feature to suggest countries if the input name is not an exact match. This method is suitable for programmatic interactions where country data is sent as part of a structured request.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/tools/dewatermark",
      "summary": "dewatermark",
      "description": "This API endpoint enables users to remove watermarks from images by uploading a file via multipart/form-data. It supports various image formats, automatically detects and removes watermarks, and returns the cleaned image. This feature is ideal for applications requiring direct image uploads for watermark removal, such as photo editing tools or content management systems. The process involves receiving the uploaded image, validating its type, applying advanced watermark removal algorithms, and then sending back the processed image. Detailed error messages are provided for missing files, invalid file types, or processing failures.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/tools/dns",
      "summary": "dns",
      "description": "This API endpoint allows you to retrieve DNS records for a specified domain using a JSON request body. You can optionally choose a specific DNS server to perform the lookup. This is useful for debugging DNS issues, verifying domain ownership, or simply gathering information about a domain's DNS configuration. The API provides a structured response containing various types of DNS records such as A, AAAA, MX, NS, CNAME, TXT, and more, depending on what is configured for the domain. If no DNS server is specified, it defaults to Cloudflare's DNS.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/tools/fake-data",
      "summary": "fake data",
      "description": "This API endpoint allows you to generate various types of fake data for development and testing purposes using a JSON request body. You can specify the type of data to generate (e.g., person, company, product, address, internet, finance, vehicle, lorem, date) and the number of entries you need. This is incredibly useful for populating databases, mocking API responses, or creating realistic test scenarios without using real sensitive information. Each data type comes with a predefined set of relevant fields, offering a quick and efficient way to get dummy data.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/tools/identify-anime",
      "summary": "identify anime",
      "description": "This API endpoint allows users to identify an anime by uploading an image file. Users can send an image file, and the API will process it to identify the anime title, character, genres, premiere date, production house, and a brief description. This is ideal for applications where users need to upload images directly.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/tools/kodepos",
      "summary": "kodepos",
      "description": "This API endpoint allows you to search for postal code information based on a given location name, such as a village or district, using a JSON request body. It queries the official Indonesian postal code database to retrieve details including the postal code, village, sub-district, city, and province. This service is essential for applications requiring address validation, delivery planning, or geographical data enrichment. By providing accurate postal code information, it helps ensure precise location identification for various logistical and administrative tasks.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/tools/ngl",
      "summary": "ngl",
      "description": "This API endpoint allows you to send anonymous messages to an NGL.link profile using a JSON request body. Users can provide the NGL.link profile URL and the message text. The API will then interact with the NGL.link service to deliver the message anonymously. This is ideal for programmatic access where structured data is preferred for sending anonymous feedback or questions to NGL profiles. The response will indicate the success or failure of the message submission.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/tools/nik-checker",
      "summary": "nik checker",
      "description": "This API endpoint provides a comprehensive NIK (Nomor Induk Kependudukan - Indonesian National ID Number) checker. It retrieves information related to the NIK, including personal data, regional details, and DPT (Daftar Pemilih Tetap - Permanent Voter List) status if available. Users can input a 16-digit NIK in the request body, and the API will attempt to parse the NIK for embedded information like gender, date of birth, age, zodiac sign, and Javanese calendar market day. Additionally, it tries to fetch DPT data from the KPU (Komisi Pemilihan Umum - General Elections Commission) website to provide details such as name, address, polling station (TPS), and geographical coordinates. This tool is useful for verifying NIK data, understanding demographic information, and checking voter registration status.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/tools/qr2text",
      "summary": "qr2text",
      "description": "This API endpoint allows you to extract text from a QR code provided as an image URL in the request body. It is useful for quickly decoding QR codes without needing a dedicated scanner. Simply provide the URL of an image containing a QR code, and the API will return the embedded text. This can be used in various applications, such as integrating QR code scanning into web applications, automating data extraction from QR codes, or verifying QR code content programmatically. The API supports standard image formats where QR codes are typically found.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/tools/skiplink",
      "summary": "Skiplink Bypass",
      "description": "This API endpoint bypasses link shorteners using bypass.city service with Turnstile token solving. It takes a shortener URL via JSON request body and returns the bypassed direct link.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/tools/subdomains",
      "summary": "subdomain finder",
      "description": "This API endpoint helps you discover subdomains associated with a given root domain using a JSON request body. It queries public certificate transparency logs to identify domains that have had SSL/TLS certificates issued, often revealing active subdomains. This tool is valuable for cybersecurity researchers, penetration testers, and anyone performing reconnaissance on a domain. It provides a list of unique, sorted subdomains, aiding in understanding a domain's attack surface or infrastructure.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/tools/text2base64",
      "summary": "text2base64",
      "description": "This API endpoint converts any given plain text string provided in the request body into its Base64 encoded representation. Base64 encoding is a common method used to represent binary data in an ASCII string format, making it suitable for transmission over mediums that only handle text. This tool is useful for developers, system administrators, and anyone needing to encode data for various purposes such as data serialization, embedding images in HTML, or transmitting data over HTTP. The conversion is straightforward and efficient.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/tools/text2binary",
      "summary": "text2binary",
      "description": "This API endpoint converts any given plain text string provided in the request body into its binary representation. Each character in the input text is converted into its 8-bit binary equivalent, padded with leading zeros if necessary, and separated by spaces. This tool is useful for educational purposes, understanding character encodings, or specific data manipulation tasks where binary representation is required. It provides a direct and clear conversion of textual data into a sequence of binary digits.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/tools/text2qr",
      "summary": "text2qr",
      "description": "This API endpoint generates a high-quality QR code image from any provided text string, sent in the request body. It uses a high error correction level and outputs a large PNG image, ensuring readability and versatility. This tool is perfect for creating QR codes for URLs, contact information, plain text messages, or any data that needs to be easily scanned. It can be integrated into various applications for dynamic QR code generation, marketing, or information sharing.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/tools/translate",
      "summary": "translate",
      "description": "This API endpoint provides text translation services, allowing you to convert text from one language to another using a JSON request body. It supports auto-detection of the source language and a wide range of target languages. This tool is invaluable for applications requiring multi-language support, content localization, or quick personal translations. It offers a reliable and efficient way to break down language barriers by providing accurate translations for various use cases, from simple phrases to longer sentences.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/tools/tts",
      "summary": "tts",
      "description": "This API endpoint converts text into speech (TTS) using a highly customizable synthesis engine via a JSON request body. You can specify the text to be spoken, choose from a variety of voices, and adjust parameters such as speech rate, pitch, and volume. This tool is perfect for creating audio content from text, developing accessible applications, or integrating voice capabilities into any system. It provides high-quality audio output, allowing for natural and expressive speech generation.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/tools/ttsgoogle",
      "summary": "tts google",
      "description": "This API endpoint converts text into speech using Google's Text-to-Speech (TTS) capabilities, leveraging Google Gemini's underlying infrastructure. It requires specific cookies to function, which are hardcoded within the API for demonstration purposes. Users can provide text in the JSON request body, and the API will return the spoken audio in MP3 format. This is ideal for generating natural-sounding voiceovers, integrating voice responses into applications, or testing Google's TTS quality for various languages. Note: The reliability of this endpoint may vary due to its reliance on hardcoded cookies and external services.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/tools/upscale",
      "summary": "upscale",
      "description": "This API endpoint upscales/enhances an image from an uploaded file using PicsArt AI enhancement service. Users can send an image file via multipart/form-data along with an optional scale parameter, and the API will process it using REALESERGAN model with face enhancement, returning the upscaled image as a PNG buffer. This method is suitable for direct image uploads.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/tools/vcc-generator",
      "summary": "vcc generator",
      "description": "This API endpoint allows you to generate virtual credit card (VCC) details for various card types. You can specify the type of card (e.g., Visa, MasterCard) and the number of cards to generate (up to a maximum of 5) using a JSON request body. The API will return generated card details including card number, expiration date, cardholder name, and CVV. This tool can be useful for testing payment systems or for educational purposes where dummy card data is required.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "POST",
      "path": "/api/tools/voices",
      "summary": "list voice",
      "description": "This API endpoint provides a comprehensive list of available voices that can be used for Text-to-Speech (TTS) functionalities. It fetches real-time data from an external TTS service, offering a variety of voice options, including different languages, genders, and tones. Developers can utilize this list to integrate diverse voice capabilities into their applications, allowing for more dynamic and user-friendly audio outputs. The response includes details for each voice, such as its unique identifier and language code, facilitating easy selection and implementation.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Youtube Downloader": [
    {
      "method": "POST",
      "path": "/api/d/ytpost",
      "summary": "Youtube Community",
      "description": "This API endpoint scrapes the latest post from a YouTube channel's community tab. Users can provide the URL of the community tab in the request body. The API extracts details such as the post ID, author, content text, and image URLs if available. This is useful for tracking community updates or integrating YouTube community content into other applications.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ]
}