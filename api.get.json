{
  "AI": [
    {
      "method": "GET",
      "path": "/api/ai/andi",
      "summary": "andiserach",
      "description": "This API endpoint allows users to interact with the Andi Search AI to get answers to their queries. It functions by automating a browser to simulate user input on the Andi Search website, extracting the AI-generated response. This can be used for various applications such as intelligent chatbots, automated information retrieval, or integrating AI-powered search capabilities into other systems. The API takes a single query parameter 'q' representing the user's question, and returns the AI's response in a structured JSON format.",
      "parameters": [
        {
          "name": "q",
          "in": "query",
          "type": "string",
          "description": "The query to ask Andi AI",
          "example": "What is the capital of France?"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/bard",
      "summary": "bard",
      "description": "This API endpoint allows you to interact with Google Bard by sending a query and receiving a text-based response. It's designed for simple conversational AI interactions, enabling users to ask questions or provide prompts and get relevant information back from the Bard model. The API handles the underlying requests to Google's Gemini service and extracts the core text response for easy consumption. This can be used for chatbots, content generation, or integrating AI Q&A into applications. The output is a plain text response from Bard, with bold formatting converted to asterisks for simplicity.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "The query to send to Google Bard",
          "example": "Tell me about the history of artificial intelligence."
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/bibleai",
      "summary": "Bible AI",
      "description": "This API endpoint allows users to search the Bible and related content using artificial intelligence. You can ask questions or provide topics, and the AI will provide answers, relevant verses, and additional resources. The endpoint supports various Bible translations, enabling users to specify their preferred version for the search. This is ideal for researchers, students, or anyone seeking quick and accurate information from biblical texts across different translations.",
      "parameters": [
        {
          "name": "question",
          "in": "query",
          "type": "string",
          "description": "Question or topic to search in the Bible",
          "example": "What is faith?"
        },
        {
          "name": "translation",
          "in": "query",
          "type": "string",
          "description": "Bible translation abbreviation",
          "example": ""
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/blackboxai",
      "summary": "blackboxai",
      "description": "This API endpoint allows you to interact with the BlackboxAI model by sending text content as a query parameter. BlackboxAI is designed to process and generate responses based on the provided input, making it suitable for various natural language processing tasks such as chatbots, content generation, and summarization. The endpoint expects a 'content' parameter and returns the AI's generated 'result'. This is a straightforward method for integrating basic AI conversational capabilities into your applications using GET requests.",
      "parameters": [
        {
          "name": "content",
          "in": "query",
          "type": "string",
          "description": "The text content to process with BlackboxAI",
          "example": "Hello, how are you today?"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/cici",
      "summary": "cici",
      "description": "This API endpoint provides access to CICI AI, an intelligent chatbot service that can answer questions, provide information, and engage in conversations. The API accepts text content as a query parameter and returns AI-generated responses along with relevant sources when available. It's ideal for applications requiring conversational AI capabilities, question-answering systems, or content generation with source attribution.",
      "parameters": [
        {
          "name": "content",
          "in": "query",
          "type": "string",
          "description": "Text content or question for CICI AI to process",
          "example": "Explain quantum computing in simple terms."
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/dbrx-instruct",
      "summary": "DBRX Instruct",
      "description": "This API endpoint provides access to the DBRX Instruct AI model, allowing users to send text content via query parameters and receive an AI-generated response. DBRX Instruct is designed for a variety of natural language tasks, including generating human-like text, answering questions, and summarizing information. This endpoint offers a simple and direct way to integrate advanced AI capabilities into applications that require text-based interactions.",
      "parameters": [
        {
          "name": "content",
          "in": "query",
          "type": "string",
          "description": "The text content to process with DBRX Instruct",
          "example": "Tell me a fun fact about outer space."
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/deepseek-llm-67b-chat",
      "summary": "deepseek llm 67b chat",
      "description": "This API endpoint provides access to the DeepSeek LLM 67B Chat model, enabling users to interact with a powerful large language model by sending text content as a query parameter. The model is capable of generating detailed and contextually relevant responses for a wide range of conversational and text-based tasks, including question-answering, creative writing, and summarization. This GET route offers a simple way to integrate advanced AI chat capabilities into your applications.",
      "parameters": [
        {
          "name": "content",
          "in": "query",
          "type": "string",
          "description": "The text content to process with DeepSeek LLM 67B Chat",
          "example": "What is the capital of France?"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/felo",
      "summary": "felo",
      "description": "This API endpoint allows you to get an AI-generated response from Felo using query parameters. Felo is an AI service capable of processing natural language queries and providing structured answers, including potential sources. This endpoint is suitable for quick, text-based interactions, such as question-answering, summarization, or general information retrieval. The response includes the AI's answer and a list of sources if available.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "The query to process with Felo",
          "example": "Tell me about the history of Jakarta."
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/gandalf",
      "summary": "gandalf lakera",
      "description": "This API endpoint provides access to the Gandalf Lakera AI, allowing users to submit a prompt via query parameters and receive an AI-generated response. Gandalf Lakera is designed to demonstrate and test the robustness of large language models against various adversarial prompts, focusing on security and alignment. This endpoint can be used to experiment with prompt engineering or to integrate a secure AI response mechanism into applications. The output is the AI's answer to the given prompt.",
      "parameters": [
        {
          "name": "prompt",
          "in": "query",
          "type": "string",
          "description": "The prompt to send to Gandalf Lakera",
          "example": "Tell me a joke."
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/gemini",
      "summary": "gemini [ BETA ]",
      "description": "This API endpoint provides a BETA version interface to interact with the Gemini AI model using GET requests. Users can send text prompts, along with optional system prompts, image URLs, and conversation context (conversationID, responseID, choiceID) to maintain continuity in dialogue. A valid Google Gemini authentication cookie is required for access. This endpoint is designed for experimental use and can be utilized for advanced AI interactions, including multimodal inputs (text and image) and stateful conversations. The response includes the AI's answer and additional metadata for conversation tracking and potential multimedia outputs.",
      "parameters": [
        {
          "name": "text",
          "in": "query",
          "type": "string",
          "description": "The text content to process with Gemini",
          "example": "Explain quantum physics simply."
        },
        {
          "name": "cookie",
          "in": "query",
          "type": "string",
          "description": "Authentication cookie for Gemini API",
          "example": ""
        },
        {
          "name": "promptSystem",
          "in": "query",
          "type": "string",
          "description": "Optional system prompt for the AI to guide its behavior",
          "example": "Act as a professional physicist."
        },
        {
          "name": "imageUrl",
          "in": "query",
          "type": "string($url)",
          "description": "Optional URL of an image to process with the text prompt",
          "example": "https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Quantum_mechanics_model.svg/1200px-Quantum_mechanics_model.svg.png"
        },
        {
          "name": "conversationID",
          "in": "header",
          "type": "string",
          "description": "Optional conversation ID to continue a previous dialogue",
          "example": ""
        },
        {
          "name": "responseID",
          "in": "header",
          "type": "string",
          "description": "Optional response ID from a previous Gemini response",
          "example": ""
        },
        {
          "name": "choiceID",
          "in": "header",
          "type": "string",
          "description": "Optional choice ID from a previous Gemini response",
          "example": ""
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/gemini-lite",
      "summary": "gemini lite",
      "description": "An advanced AI endpoint utilizing the Gemini model to provide conversational responses. It can handle text-based prompts and can also process images by accepting an image URL. This API is designed for a wide range of use cases including Q&A, content generation, and image analysis. Users can specify a prompt and, optionally, a model and an image URL. The API will respond with a generated text based on the input. This is a versatile tool for developers needing to integrate a powerful AI chat functionality into their applications. The endpoint performs comprehensive validation on all inputs to ensure data integrity and provides clear, structured error responses for easy debugging. This API ensures reliable performance with robust error handling for a seamless user experience.",
      "parameters": [
        {
          "name": "prompt",
          "in": "query",
          "type": "string",
          "description": "User prompt for the AI",
          "example": "What is the capital of France?"
        },
        {
          "name": "model",
          "in": "query",
          "type": "string",
          "description": "Gemini model to use",
          "example": "gemini-2.0-flash-lite"
        },
        {
          "name": "imgUrl",
          "in": "query",
          "type": "string($uri)",
          "description": "URL of an image to analyze",
          "example": ""
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/getliner",
      "summary": "getliner AI",
      "description": "This API endpoint provides access to getliner AI, allowing users to get AI-generated responses by submitting text queries via URL parameters. It supports various getliner models for diverse AI capabilities, from general queries to more complex reasoning tasks. The 'text' parameter is mandatory for the user's input. The API will return the AI's response.",
      "parameters": [
        {
          "name": "text",
          "in": "query",
          "type": "string",
          "description": "Text to ask the AI",
          "example": "What is quantum physics?"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/gita",
      "summary": "gita",
      "description": "This API endpoint provides AI-powered responses from GitaGPT, an AI model based on the Bhagavad Gita. Users can send natural language queries related to life, spirituality, philosophy, and personal dilemmas, and the AI will provide answers derived from the teachings of the Bhagavad Gita. This can be used for spiritual guidance, philosophical insights, or general knowledge about Vedic wisdom. The endpoint expects a query parameter 'q' containing the user's question and returns the AI's response in a structured JSON format. This is ideal for applications requiring quick access to spiritual or philosophical advice.",
      "parameters": [
        {
          "name": "q",
          "in": "query",
          "type": "string",
          "description": "The query for Gita AI",
          "example": "What is karma?"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/gpt-4o",
      "summary": "gpt-4o",
      "description": "This API endpoint allows users to interact with the GPT-4o AI model by providing a system prompt and user content via query parameters. It's designed for simple, direct conversational interactions where the AI can be guided by an initial 'system' instruction (e.g., defining its persona or behavior) and then respond to a 'user' message. This is useful for building chat applications, virtual assistants, or generating creative content based on specific guidelines. The endpoint expects both 'prompt' and 'content' as string query parameters, representing the system's role and the user's input, respectively. The response will be the AI's generated text using the advanced GPT-4o model.",
      "parameters": [
        {
          "name": "prompt",
          "in": "query",
          "type": "string",
          "description": "The system prompt for the GPT-4o model",
          "example": "You are a helpful assistant."
        },
        {
          "name": "content",
          "in": "query",
          "type": "string",
          "description": "The user message for the GPT-4o model",
          "example": "Tell me a joke."
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/gpt-oss",
      "summary": "gpt-oss",
      "description": "This API endpoint allows users to interact with the GPT-OSS-120B AI model by providing a system prompt and user content via query parameters. It's designed for simple, direct conversational interactions where the AI can be guided by an initial 'system' instruction (e.g., defining its persona or behavior) and then respond to a 'user' message. This is useful for building chat applications, virtual assistants, or generating creative content based on specific guidelines. The endpoint expects both 'prompt' and 'content' as string query parameters, representing the system's role and the user's input, respectively. The response will be the AI's generated text using the powerful GPT-OSS-120B model.",
      "parameters": [
        {
          "name": "prompt",
          "in": "query",
          "type": "string",
          "description": "The system prompt for the GPT-OSS-120B model",
          "example": "You are a helpful assistant."
        },
        {
          "name": "content",
          "in": "query",
          "type": "string",
          "description": "The user message for the GPT-OSS-120B model",
          "example": "Tell me a joke."
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/gpt3",
      "summary": "gpt3",
      "description": "This API endpoint allows users to interact with a GPT-3 based AI model by providing a system prompt and user content via query parameters. It's designed for simple, direct conversational interactions where the AI can be guided by an initial 'system' instruction (e.g., defining its persona or behavior) and then respond to a 'user' message. This is useful for building chat applications, virtual assistants, or generating creative content based on specific guidelines. The endpoint expects both 'prompt' and 'content' as string query parameters, representing the system's role and the user's input, respectively. The response will be the AI's generated text.",
      "parameters": [
        {
          "name": "prompt",
          "in": "query",
          "type": "string",
          "description": "The system prompt for the GPT-3 model",
          "example": "You are a helpful assistant."
        },
        {
          "name": "content",
          "in": "query",
          "type": "string",
          "description": "The user message for the GPT-3 model",
          "example": "Tell me a joke."
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/hikachat",
      "summary": "hikachat",
      "description": "This API endpoint allows users to get AI-generated responses from the Hika Chat API. It functions as a conversational AI, providing answers based on a given keyword. This can be used for various purposes such as information retrieval, content generation, or as a component in a larger AI application. The endpoint requires a 'keyword' query parameter, which should be at least 2 characters long, and it will return a text-based response from the AI. The default language for the response is Indonesian ('id'), but it can be specified with a 'language' parameter.",
      "parameters": [
        {
          "name": "keyword",
          "in": "query",
          "type": "string",
          "description": "The keyword to search for (minimum 2 characters)",
          "example": "aplikasi terbaik"
        },
        {
          "name": "language",
          "in": "query",
          "type": "string",
          "description": "The language code for the response (e.g., 'en', 'id')",
          "example": "en"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/kimi",
      "summary": "kimi",
      "description": "This API endpoint allows users to get AI responses from the Kimi service by providing text content as a query parameter. It's designed for conversational AI interactions, content generation, and question-answering tasks. The API requires a 'content' parameter containing the input text for the AI to process.",
      "parameters": [
        {
          "name": "content",
          "in": "query",
          "type": "string",
          "description": "Text content for AI processing",
          "example": "What is the meaning of life?"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/latukam",
      "summary": "latukam",
      "description": "This API endpoint allows you to interact with the latukam AI model by providing text content as a query parameter. The AI will process the input and return a generated response. This can be used for various applications such as chatbots, content generation, or smart assistants. The API expects a 'content' parameter, which should be a string containing the text you want the AI to process. Upon successful processing, it will return a JSON object containing the AI's response.",
      "parameters": [
        {
          "name": "content",
          "in": "query",
          "type": "string",
          "description": "Text content for AI",
          "example": "Hello AI, how are you?"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/llama33",
      "summary": "Llama3.3",
      "description": "This API endpoint provides access to the Llama 3.3 AI model, allowing users to generate responses by providing a system prompt and user text via query parameters. It is ideal for building conversational AI, content generation tools, or integrating advanced natural language understanding into applications. The 'prompt' parameter defines the AI's role or initial instructions, while the 'text' parameter is the actual user input the AI will respond to. The response will be the AI's generated message.",
      "parameters": [
        {
          "name": "prompt",
          "in": "query",
          "type": "string",
          "description": "Prompt for Llama 3.3",
          "example": "Be a helpful assistant"
        },
        {
          "name": "text",
          "in": "query",
          "type": "string",
          "description": "Text input for Llama 3.3",
          "example": "hi"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/luminai",
      "summary": "luminai",
      "description": "This API endpoint allows users to get AI responses from the 'luminai' service by providing text content as a query parameter. It's designed for simple integrations where AI-powered text processing is needed, such as basic chatbots, content summarization, or simple question-answering systems. The API requires a 'content' parameter, which should be the input text for the AI. A successful response will contain the AI's generated output.",
      "parameters": [
        {
          "name": "content",
          "in": "query",
          "type": "string",
          "description": "Text content for AI processing",
          "example": "Tell me a short story."
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/meta-llama-33-70B-instruct-turbo",
      "summary": "Meta Llama 3.3-70B Instruct Turbo",
      "description": "This API endpoint provides access to the Meta Llama 3.3-70B Instruct Turbo AI model, enabling users to generate AI responses by supplying text content through query parameters. It is designed for applications requiring advanced conversational AI capabilities, complex content generation, or sophisticated natural language understanding. The 'content' parameter is the primary input, representing the text that the AI will process and respond to. A successful response will return the AI's generated message.",
      "parameters": [
        {
          "name": "content",
          "in": "query",
          "type": "string",
          "description": "Text content for AI processing",
          "example": "What is the meaning of life?"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/metaai",
      "summary": "meta ai",
      "description": "This API endpoint allows users to interact with Meta AI by sending a text query via a URL parameter. It's designed for simple integrations into applications where direct AI interaction is required for tasks like question-answering, content generation, or conversational agents. The 'query' parameter is mandatory and should contain the text you want Meta AI to process. The API will return Meta AI's response to your query.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "The query to send to Meta AI",
          "example": "Tell me a fun fact about space."
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/mistral-7b-instruct-v0.2",
      "summary": "Mistral 7B Instruct v0.2",
      "description": "This API endpoint provides access to the Mistral 7B Instruct v0.2 AI model, allowing users to generate responses by providing text content via query parameters. It is suitable for a wide range of natural language processing tasks, including text generation, summarization, and conversational AI. The API requires a 'content' parameter, which should be the input text for the AI. Upon successful execution, it will return the AI's generated response.",
      "parameters": [
        {
          "name": "content",
          "in": "query",
          "type": "string",
          "description": "Text content for AI processing",
          "example": "What is the capital of France?"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/muslimai",
      "summary": "muslimai",
      "description": "This API endpoint allows users to get AI-powered responses related to Islamic knowledge by submitting a query as a URL parameter. It leverages the MuslimAI service to search relevant passages and generate clear, understandable answers in Indonesian, from the perspective of a Quran expert. This API is useful for educational applications, spiritual guidance tools, or any platform needing accurate Islamic information. The 'query' parameter is required and should contain the question or topic you want to ask MuslimAI.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "The query to ask muslimai",
          "example": "apa itu sholat?"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/nous-hermes",
      "summary": "nous hermes",
      "description": "This API endpoint provides access to the Nous Hermes 2 Mixtral 8x7B DPO AI model, allowing users to generate AI responses by supplying text content through query parameters. It is designed for various natural language processing tasks, including creative writing, code generation, and complex conversational AI. The 'content' parameter is the primary input, representing the text that the AI will process and respond to. A successful response will return the AI's generated message.",
      "parameters": [
        {
          "name": "content",
          "in": "query",
          "type": "string",
          "description": "Text content for AI processing",
          "example": "Tell me a joke."
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/powerbrainai",
      "summary": "powerbrainai",
      "description": "This API endpoint allows users to get AI-powered responses from 'PowerBrain AI' by submitting a text query via a URL parameter. It's designed for quick integrations where AI conversational capabilities are needed, such as chatbots, virtual assistants, or quick information retrieval systems. The 'query' parameter is mandatory and should contain the text you want PowerBrain AI to process. The API will return PowerBrain AI's generated response.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "The query to send to PowerBrain AI",
          "example": "Tell me about the history of artificial intelligence."
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/qwq-32b-preview",
      "summary": "Qwen QwQ 32B Preview",
      "description": "This API endpoint provides access to the Qwen QwQ 32B Preview AI model, allowing users to generate responses by providing text content via query parameters. It's suitable for various natural language processing tasks, including creative writing, summarization, and conversational AI. The API requires a 'content' parameter, which should be the input text for the AI. Upon successful execution, it will return the AI's generated response.",
      "parameters": [
        {
          "name": "content",
          "in": "query",
          "type": "string",
          "description": "Text content for AI processing",
          "example": "Tell me about the history of computers."
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/sahabat-ai",
      "summary": "sahabat ai",
      "description": "This API endpoint provides AI-generated responses from the 'sahabat-ai' service by accepting a text query via a GET request. It is designed for simple, direct conversational or content generation tasks, making it ideal for integrations where a quick, straightforward request-response model is required. The API expects a 'content' query parameter containing the user's message. It uses a session cookie to maintain context and provides a text-based response from the AI. The endpoint handles errors gracefully, ensuring that issues with the request or the AI service are communicated clearly to the user.",
      "parameters": [
        {
          "name": "content",
          "in": "query",
          "type": "string",
          "description": "Text content for AI processing",
          "example": "Tell me a short story."
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/teachanything",
      "summary": "teach anything",
      "description": "This API endpoint provides access to the 'Teach Anything' AI service, enabling users to get explanations or information on various topics by providing text content via query parameters. It's designed for educational applications, quick knowledge retrieval, or any platform that needs to explain complex subjects in a simple manner. The 'content' parameter is mandatory and should contain the topic or question you want the AI to explain. The API will return the AI's generated explanation.",
      "parameters": [
        {
          "name": "content",
          "in": "query",
          "type": "string",
          "description": "Text content for AI explanation",
          "example": "Explain how photosynthesis works."
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/youai",
      "summary": "You.com AI",
      "description": "This API endpoint provides a service to get AI-generated responses from You.com based on a given text query. The API utilizes a headless browser with a stealth plugin to interact with the You.com website, mimicking a human user to perform a search and retrieve the streaming AI response. It captures the AI's chat tokens and any associated citations from third-party search results. The output is a structured JSON object containing the full AI response and a list of citation sources, making it useful for applications that require automated conversational AI with web-sourced context. It is designed to handle both simple queries and complex questions by waiting for the streaming response to complete.",
      "parameters": [
        {
          "name": "text",
          "in": "query",
          "type": "string",
          "description": "Text to ask the AI",
          "example": "apa itu AI"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "AI Image": [
    {
      "method": "GET",
      "path": "/api/ai/flux",
      "summary": "flux",
      "description": "This API endpoint allows users to generate images based on a textual prompt using the Flux model. By providing a descriptive prompt, users can create various images, ranging from abstract concepts to specific scenes. The API processes the prompt and returns the generated image in PNG format. It is ideal for creative applications, content generation, and visual prototyping. The generated images can be used in web applications, design projects, or for personal creative endeavors.",
      "parameters": [
        {
          "name": "prompt",
          "in": "query",
          "type": "string",
          "description": "Text prompt for image generation",
          "example": "a cyberpunk lizard"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/magicstudio",
      "summary": "magicstudio",
      "description": "This API endpoint generates AI-powered art from a given text prompt. Users can describe the image they want to create, and the AI will generate a corresponding piece of art. This is useful for artists, designers, or anyone looking to quickly generate unique visual content. The endpoint returns the generated image directly as a JPEG file.",
      "parameters": [
        {
          "name": "prompt",
          "in": "query",
          "type": "string",
          "description": "The text prompt for generating the AI art",
          "example": "portrait of a wizard with a long beard"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/stabilityai",
      "summary": "stabilityai",
      "description": "This API endpoint allows users to generate images using the StabilityAI model. By providing a descriptive prompt, users can create diverse images, from realistic photos to artistic illustrations. The API processes the prompt and returns the generated image in JPEG format. This functionality is ideal for creative applications, content generation, and prototyping, enabling quick visual asset creation.",
      "parameters": [
        {
          "name": "prompt",
          "in": "query",
          "type": "string",
          "description": "The prompt for generating the image",
          "example": "a cute cat sitting on a couch"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/ai/stable-diffusion",
      "summary": "stable diffusion",
      "description": "This API endpoint leverages the Stable Diffusion model to generate images based on a textual prompt provided via query parameters. Users can specify a detailed description of the desired image, and the AI will create a corresponding visual output. This functionality is highly versatile, suitable for generating various types of images for creative projects, content creation, or visual design. The endpoint returns the generated image as a JPEG file.",
      "parameters": [
        {
          "name": "prompt",
          "in": "query",
          "type": "string",
          "description": "The prompt to generate the image with stable diffusion",
          "example": "a futuristic city at sunset"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Anime": [
    {
      "method": "GET",
      "path": "/api/anime/anichin-detail",
      "summary": "anichin detail",
      "description": "This API endpoint allows you to retrieve detailed information about an anime from Anichin by providing its URL. It scrapes various data points such as title, thumbnail, rating, followers, synopsis, alternative titles, status, network, studio, release date, duration, season, country, type, number of episodes, and genres. This can be used by applications needing to display comprehensive anime details from Anichin.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "Anime URL",
          "example": "https://anichin.forum/renegade-immortal-episode-69-subtitle-indonesia/"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/anichin-download",
      "summary": "anichin download",
      "description": "This API endpoint allows you to extract download links for various resolutions from an Anichin anime detail page by providing its URL. It scrapes the page to find available resolutions and their corresponding download links from different hosts. This can be used by applications or services that need to provide direct download options for anime episodes from Anichin.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "Anime detail page URL",
          "example": "https://anichin.forum/renegade-immortal-episode-69-subtitle-indonesia/"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/anichin-episode",
      "summary": "anichin episode",
      "description": "This API endpoint allows you to retrieve a list of episodes for a specific anime from Anichin by providing the anime's URL. It scrapes details such as episode number, title, sub status (e.g., 'SUB INDO'), release date, and the link to the episode page. This is useful for applications that need to display episode lists and provide direct links to episode content.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "Anime page URL",
          "example": "https://anichin.forum/renegade-immortal/"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/anichin-latest",
      "summary": "anichin latest",
      "description": "This API endpoint provides the latest anime updates from Anichin. It scrapes the main page to identify newly released episodes or series, including their titles, URLs, episode numbers, thumbnails, and types (e.g., 'TV', 'Movie'). This is useful for users or applications that want to stay updated with the newest anime content available on Anichin.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/anichin-popular",
      "summary": "anichin popular",
      "description": "This API endpoint retrieves a list of popular anime from Anichin. It first resolves any potential redirects from the Anichin domain to access the correct content page, then scrapes the page to extract details such as title, episode number, anime type, link to the detail page, and thumbnail image. This is useful for applications or users looking for trending anime on Anichin.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/anichin-search",
      "summary": "anichin search",
      "description": "This API endpoint allows users to search for anime on the Anichin website. By providing a search query, users can retrieve a list of anime titles along with their type, current status, a direct link to the anime page, and an image thumbnail. This is useful for quickly finding information about specific anime or exploring available titles on Anichin. The endpoint handles various anime categories and provides relevant details for each search result.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "Anime search query",
          "example": "naga"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/auratail-detail",
      "summary": "auratail detail",
      "description": "This API endpoint allows you to retrieve detailed information about an anime from Auratail by providing its URL. It scrapes various attributes like title, image, status, studio, number of episodes, duration, type, release year, producers, genres, and synopsis. This is useful for building applications that require rich anime data directly from Auratail.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "Anime detail page URL",
          "example": "https://auratail.vip/the-war-of-cards/"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/auratail-latest",
      "summary": "auratail latest",
      "description": "This API endpoint provides the latest anime updates from the Auratail website. It scrapes the main page to extract details such as the title of the anime, the latest episode available, the direct link to the anime's page, and its cover image. This is ideal for applications needing to display recently updated anime.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/auratail-popular",
      "summary": "auratail popular",
      "description": "This API endpoint retrieves a list of popular anime from the Auratail website. It scrapes the main page to identify and extract the titles and corresponding links of currently popular anime series. This is useful for applications that want to showcase trending or highly-viewed anime titles from Auratail.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/auratail-search",
      "summary": "auratail search",
      "description": "This API endpoint allows you to search for anime on Auratail by providing a search query. It scrapes the search results and returns a list of anime titles, links to their detail pages, images, and their current status. This is useful for applications that need to find anime titles from Auratail.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "Anime search query",
          "example": "war"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/komikindo-detail",
      "summary": "komikindo detail",
      "description": "This API endpoint allows you to retrieve detailed information about a specific comic or manga from the Komikindo website. By providing the URL of the detail page, the API scrapes key data points such as the title, alternative title, status, author, genre list, plot summary, cover image URL, and a list of available chapters with their respective URLs. It is designed to facilitate programmatic access to comic information for use in applications, databases, or content aggregators. The endpoint handles both direct URLs and relative paths, automatically resolving the base URL if needed. The output is a structured JSON object containing all the extracted data, making it easy to parse and integrate. It is an essential tool for developers building applications that require real-time comic data from Komikindo.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "The URL of the anime detail page on Komikindo",
          "example": "https://komikindo.pw/komik/550578-solo-leveling/"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/komikindo-download",
      "summary": "komikindo download",
      "description": "This API endpoint is designed to retrieve all image download links for a specific comic chapter from the Komikindo website. Users provide the URL of the chapter page, and the API scrapes the page to find and extract the source URLs of all images within that chapter. This functionality is useful for applications that need to programmatically access and download comic pages for offline reading or archival purposes. The endpoint is robust, handling both full and relative URLs, and returns a JSON array of image links. It includes thorough error handling for cases where the URL is missing or invalid, or if no download links can be found on the page. This ensures a reliable and predictable response for developers.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "The URL of the Komikindo chapter page",
          "example": "https://komikindo.pw/solo-leveling-chapter-1/"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/komikindo-search",
      "summary": "komikindo search",
      "description": "This API endpoint provides a powerful search function for comics and manga on the Komikindo website. Users can submit a search query via a URL parameter, and the API will scrape the search results page to return a structured list of matching titles. Each result includes essential details such as the title, a direct link to the detail page (href), a URL for the cover image, the type of media (e.g., Manhwa, Manga), and the user rating if available. This tool is perfect for applications that need to find comics based on user input, enabling features like search bars or recommendation systems. The endpoint ensures that the search query is properly encoded and handles cases where no results are found, providing clear error messages for a seamless developer experience.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "The search query for anime on Komikindo",
          "example": "solo leveling"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/oploverz-download",
      "summary": "oploverz download",
      "description": "This API endpoint provides download links and details for anime episodes from Oploverz. Users can retrieve information such as the episode title, release date, streaming iframe source, and a structured list of download links categorized by server and quality. This is useful for developers building anime streaming or download applications that require direct access to episode resources from Oploverz. The API scrapes the Oploverz website to extract the relevant data, ensuring up-to-date links.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "Oploverz episode URL",
          "example": "https://oploverz.org/anime/captain-tsubasa-season-2-junior-youth-hen-1-episode-30-subtitle-indonesia/"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/oploverz-episode",
      "summary": "oploverz episode",
      "description": "This API endpoint allows users to retrieve detailed information and a list of episodes for a specific anime series from Oploverz. It scrapes the anime series page to extract data such as the cover image, title, synopsis, detailed information (e.g., genre, status, type), and a comprehensive list of all available episodes with their respective links. This is ideal for applications requiring comprehensive anime series data, facilitating episode tracking and direct access to episode pages.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "Oploverz anime series URL",
          "example": "https://oploverz.org/mushoku-tensei-isekai-ittara-honki-dasu-s2/"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/oploverz-ongoing",
      "summary": "oploverz ongoing",
      "description": "This API endpoint provides a list of ongoing anime series from Oploverz. It scrapes the Oploverz website's ongoing anime section and extracts key details for each series, including the title, URL, image source, number of episodes, and rating. This endpoint is useful for applications that need to display currently airing anime and provide direct links to their respective pages on Oploverz, keeping users updated with the latest releases.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/oploverz-search",
      "summary": "oploverz search",
      "description": "This API endpoint allows users to search for anime series on Oploverz. It takes a search query and returns a list of matching anime titles, their respective links, cover images, number of episodes, and ratings. This is useful for applications that need to implement search functionality for Oploverz's anime catalog, enabling users to quickly find specific series.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "Anime search query",
          "example": "romance"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/otakudesu/detail",
      "summary": "otakudesu detail",
      "description": "This API endpoint provides comprehensive details and a full episode list for a specific anime from Otakudesu. Users can retrieve extensive information such as the anime's title (English and Japanese), score, producer, type, status, total episodes, duration, release date, studio, genres, and image URL. Additionally, it lists all episodes with their titles, links, and release dates. This is highly valuable for applications that require detailed anime data from Otakudesu for display, tracking, or database integration.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "Otakudesu anime detail URL",
          "example": "https://otakudesu.cloud/anime/borto-sub-indo/"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/otakudesu/download",
      "summary": "otakudesu download",
      "description": "This API endpoint retrieves available download links for a specific anime episode from Otakudesu. Users provide the URL of the anime's download page, and the API extracts the episode title and a list of download options, including different qualities, direct links, and hosting providers. This is highly beneficial for applications that aim to provide direct download access to anime content from Otakudesu, enabling users to download episodes in their preferred quality.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "Otakudesu anime download page URL",
          "example": "https://otakudesu.cloud/lengkap/btr-nng-sub-indo-part-1/"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/otakudesu/ongoing",
      "summary": "otakudesu ongoing",
      "description": "This API endpoint provides a list of ongoing anime series from Otakudesu. It fetches details for each ongoing anime, including the episode number, type, release date, title, a direct link to the anime page, and a thumbnail image. This is useful for applications that need to display currently airing anime, helping users to stay updated with the latest episodes as they are released.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/otakudesu/search",
      "summary": "otakudesu search",
      "description": "This API endpoint allows users to search for anime on Otakudesu. By providing a search query, the API returns a list of matching anime, including their titles, direct links to their pages, thumbnail images, genres, current status (e.g., ongoing, completed), and ratings. This is useful for integrating anime search capabilities into applications, enabling users to quickly find specific anime titles and retrieve relevant information.",
      "parameters": [
        {
          "name": "s",
          "in": "query",
          "type": "string",
          "description": "Anime search query",
          "example": "naruto"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/samehadaku/detail",
      "summary": "samehadaku detail",
      "description": "This API endpoint provides detailed information and a list of episodes for a specific anime from Samehadaku. Users can retrieve data such as the anime's title, thumbnail, publication date, rating, description, genres, and a comprehensive list of available episodes with their titles, dates, and links. This is useful for developers building applications that require anime information from Samehadaku, allowing them to display details or create episode trackers.",
      "parameters": [
        {
          "name": "link",
          "in": "query",
          "type": "string",
          "description": "Anime detail URL",
          "example": "https://samehadaku.email/anime/blue-lock-season-2/"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/samehadaku/download",
      "summary": "samehadaku download",
      "description": "This API endpoint retrieves download links for a specific anime episode from Samehadaku. Users provide the URL of the episode page, and the API extracts the title, original link, and a list of available download options, including their names, and generated direct download links. This is useful for applications requiring direct download access to anime episodes from Samehadaku for offline viewing or integration into media libraries.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "Anime episode URL",
          "example": "https://samehadaku.email/rekishi-ni-nokoru-akujo-ni-naru-zo-episode-9"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/samehadaku/latest",
      "summary": "samehadaku latest",
      "description": "This API endpoint provides a list of the latest released anime episodes from Samehadaku. It fetches information such as the anime's title, thumbnail, who posted it, episode number, release date, and a direct link to the episode page. This is highly useful for applications that need to keep users updated on new anime releases, allowing them to track and display the most recent content from Samehadaku.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/samehadaku/release",
      "summary": "samehadaku release",
      "description": "This API endpoint provides the full release schedule for anime on Samehadaku, categorized by day of the week. It fetches data for each day (Sunday to Saturday), returning a list of anime scheduled for release. This is useful for applications or services that need to display upcoming anime episodes, allowing users to keep track of their favorite series' release dates and plan their viewing schedule.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/anime/samehadaku/search",
      "summary": "samehadaku search",
      "description": "This API endpoint allows users to search for anime on Samehadaku. By providing a search query, the API returns a list of matching anime, including details such as their title, unique ID, thumbnail image, a brief description, genres, type, star rating, view count, and a direct link to the anime's page on Samehadaku. This is ideal for integrating anime search functionality into applications or bots, enabling users to quickly find anime titles and access their information.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "Anime search query",
          "example": "naruto"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "APK": [
    {
      "method": "GET",
      "path": "/api/apk/an1",
      "summary": "an1",
      "description": "This API endpoint allows you to search for Android applications on an1.com. It scrapes the website based on your provided search query and returns a list of relevant applications, including their title, download link, developer, image, rating, and whether it's a MOD or Original version. This can be used by developers needing to programmatically find and list applications available on an1.com.",
      "parameters": [
        {
          "name": "search",
          "in": "query",
          "type": "string",
          "description": "Search query for applications",
          "example": "pou"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/apk/apkmody",
      "summary": "apkmody",
      "description": "This API endpoint allows you to search for Android applications on apkmody.com. It utilizes Puppeteer with Stealth Plugin to bypass bot detection and scrape the website based on your provided search query. It returns a list of relevant applications, including their title, download link, icon, version, genre, features (if any, like 'Aim, No Recoil'), and star rating. This API is useful for developers who need to programmatically search and retrieve information about modified Android applications from apkmody.com.",
      "parameters": [
        {
          "name": "search",
          "in": "query",
          "type": "string",
          "description": "Search query for applications",
          "example": "free fire"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/apk/apkpure",
      "summary": "apkpure",
      "description": "This API endpoint allows you to search for Android applications on apkpure.com. It uses Puppeteer with Stealth Plugin to simulate a real browser and bypass detection, scraping application details such as title, developer, download link, icon, and rating information from the search results page. The API supports both standard search results and branded application listings on APKPure. This is useful for developers who need to programmatically access and retrieve information about applications available on APKPure.",
      "parameters": [
        {
          "name": "search",
          "in": "query",
          "type": "string",
          "description": "Search term for applications",
          "example": "free fire"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/apk/appstore",
      "summary": "app store",
      "description": "This API endpoint allows you to search for applications on Apple App Store. It utilizes Puppeteer with Stealth Plugin to bypass bot detection and scrape the Apple website based on your provided search query. It returns a list of relevant applications, including their title, direct link to the App Store page, image, description, and analytics information. This API is useful for developers and users looking to programmatically discover and retrieve information about various applications and games available on the Apple App Store.",
      "parameters": [
        {
          "name": "search",
          "in": "query",
          "type": "string",
          "description": "Search query for applications on Apple App Store",
          "example": "free fire"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/apk/happymod",
      "summary": "happymod",
      "description": "This API endpoint allows you to search for modified Android applications (MOD APKs) on happymod.com. It utilizes Puppeteer with Stealth Plugin to bypass bot detection and scrape the website based on your provided search query. It returns a list of relevant applications, including their title, direct link to the HappyMod page, image, detected version, file size, and specific mod features (e.g., [Unlimited Money]). This API is useful for developers and users looking to programmatically discover and retrieve information about various modified applications and games available on HappyMod.",
      "parameters": [
        {
          "name": "search",
          "in": "query",
          "type": "string",
          "description": "Search query for applications",
          "example": "pou"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/apk/openapk",
      "summary": "openapk",
      "description": "This API endpoint allows you to search for Android applications on OpenAPK.net. You can provide a search query, and the API will return a list of relevant applications, including their title, icon, description, and rating. This is useful for developers or users looking to find information about specific APKs or discover new applications.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "Search query for applications",
          "example": "free fire"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/apk/playstore",
      "summary": "playstore",
      "description": "This API endpoint allows you to search for Android applications on the Google Play Store. It scrapes the Play Store based on your provided search query and returns a list of matching applications, including their link, name, developer, image, and rating information. This API is useful for developers who need to programmatically search and retrieve information about applications available on the Google Play Store.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "Search query for applications",
          "example": "free fire"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Berita": [
    {
      "method": "GET",
      "path": "/api/berita/antara",
      "summary": "antara news",
      "description": "This API endpoint allows you to retrieve the latest news headlines and articles from Antara News, one of Indonesia's leading news agencies. It scrapes the 'Editor Picks' section of the Antara News website, providing key information such as the article title, link, associated image, category, and whether it's an infographic or a standard article. This API is useful for applications requiring up-to-date Indonesian news content, aggregation services, or data analysis on current events. It offers a structured JSON response containing a list of news items, each with relevant details for easy integration into various platforms.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/berita/cnbcindonesia",
      "summary": "cnbc indonesia",
      "description": "This API endpoint provides access to the latest news headlines from CNBC Indonesia, focusing on business and financial news. It scrapes data from the CNBC Indonesia 'News' section, extracting information such as article title, URL, associated image, category, any special labels (e.g., 'Live'), and publication date. The API categorizes content as either 'video' or 'article' based on the source. It is ideal for developers building news aggregators, financial analysis tools, or any application requiring real-time updates on Indonesian business and economic news. The response delivers a structured JSON array of news items, each with comprehensive details for easy integration and display.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/berita/cnn",
      "summary": "cnn Indonesia",
      "description": "This API endpoint allows you to retrieve the latest news headlines and detailed content from CNN Indonesia. It scrapes the main news feed, extracting information such as the article title, thumbnail image, full-sized image, publication timestamp, original link, and a clean slug. Additionally, it attempts to fetch and sanitize the full article content, removing unwanted elements like scripts, styles, and advertisements, to provide a clean text representation. This API is valuable for news aggregation, content analysis, or any application requiring comprehensive and up-to-date news from CNN Indonesia.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/berita/jkt48",
      "summary": "jkt48 news",
      "description": "This API endpoint allows you to fetch the latest news from the official JKT48 website. It scrapes the news list, extracting key details such as the news title, the direct link to the article, the publication date, and an icon representing the news category (e.g., general news, event updates). This API is ideal for fans, developers creating fan applications, or anyone interested in staying updated with the latest announcements, events, and activities of the Indonesian idol group JKT48. The response provides a structured array of news items, facilitating easy integration and display.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/berita/kompas",
      "summary": "kompas news",
      "description": "This API endpoint allows you to retrieve the latest news headlines and articles from Kompas.com, one of Indonesia's prominent online news portals. It scrapes the main news list, extracting essential information such as the article title, direct link, associated image (lazy-loaded data-src), news category, and publication date. This API is designed for applications requiring up-to-date general news from an authoritative Indonesian source, making it suitable for news aggregators, content analysis, or informational dashboards. The response provides a structured JSON array of news items, each with relevant details for straightforward integration and display.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/berita/liputan6",
      "summary": "liputan6",
      "description": "This API endpoint fetches the latest news headlines from Liputan6.com, a prominent Indonesian online news portal. It extracts key information for each news article, including the title, the direct URL to the article, a thumbnail image, and the publication time. This API is designed to provide quick and easy access to current events and news updates from Indonesia, making it suitable for news aggregators, content displays, or applications requiring timely information from a reliable source like Liputan6.com. The response delivers a structured JSON array of news items, each containing essential details for seamless integration.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/berita/merdeka",
      "summary": "merdeka news",
      "description": "This API endpoint allows you to retrieve the latest news headlines from Merdeka.com, specifically from its 'Peristiwa' (Events) section, which often covers breaking news and current affairs. It extracts key details for each news item, including the article title, direct link, associated image (converted to an absolute URL), news category, publication date, and a brief description. This API is useful for applications that require up-to-date general news and events from an Indonesian perspective, such as news aggregators, content analysis tools, or informational displays. The response provides a structured JSON array of news articles, facilitating straightforward integration and display.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/berita/sindonews",
      "summary": "sindonews",
      "description": "This API endpoint provides access to the latest news headlines from Sindonews.com, a major Indonesian news portal. It scrapes the main page to gather essential details for each news article, including the title, the direct link to the full article, its category (e.g., Nasional, Ekonomi Bisnis, Internasional, Sports), the publication timestamp, and a thumbnail image URL. This API is highly valuable for applications that require real-time updates on Indonesian current events, news aggregators, or any service needing structured news data from a reputable source like Sindonews.com. The response delivers a clean JSON array of news items, facilitating easy consumption and display.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/berita/suara",
      "summary": "suara news",
      "description": "This API endpoint allows you to retrieve the latest news headlines and articles from Suara.com, a prominent Indonesian online news portal known for its coverage of politics, business, law, sports, entertainment, lifestyle, automotive, science, technology, and citizen journalism. It scrapes both the main headline news and other listed news items, extracting details such as the article title, direct link, associated image, category, and publication date for headlines. This API is valuable for developers building news aggregators, content analysis tools, or any application requiring real-time news updates from a diverse range of topics within Indonesia. The response delivers a structured JSON array of news items, facilitating easy integration and display.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/berita/tribunnews",
      "summary": "tribunnews",
      "description": "This API endpoint allows you to retrieve the latest news headlines from Tribunnews.com, a major Indonesian online news portal and part of the Kompas Gramedia Group. It scrapes the main page to extract essential details for each news article, including the title, the direct URL to the full article, a thumbnail image, and the publication timestamp. Tribunnews is known for its extensive network of local newspapers across Indonesia, providing a wide range of national and regional news. This API is ideal for applications requiring up-to-date general news from an authoritative Indonesian source, suitable for news aggregators, content analysis, or informational displays. The response delivers a structured JSON array of news items, facilitating easy integration and display.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Canvas": [
    {
      "method": "GET",
      "path": "/api/canvas/fake-xnxx",
      "summary": "fake xnxx",
      "description": "Generate a fake XNXX comment image with a specified name, quote, and optional like/dislike counts. This API endpoint allows users to create humorous or satirical images resembling XNXX comments, ideal for social media content or creative projects. Input parameters include the commenter's name, the comment text (quote), and the number of likes and dislikes. The output is a PNG image buffer.",
      "parameters": [
        {
          "name": "name",
          "in": "query",
          "type": "string",
          "description": "The name to display",
          "example": "Nelson Mandela"
        },
        {
          "name": "quote",
          "in": "query",
          "type": "string",
          "description": "The quote text",
          "example": "Keberanian bukanlah tidak adanya ketakutan, tetapi kemenangan atas ketakutan itu."
        },
        {
          "name": "likes",
          "in": "query",
          "type": "string",
          "description": "Number of likes",
          "example": "2"
        },
        {
          "name": "dislikes",
          "in": "query",
          "type": "string",
          "description": "Number of dislikes",
          "example": "0"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/canvas/gay",
      "summary": "gay",
      "description": "Generate a stylized 'gay' image with a given name, avatar URL, and a number. This API endpoint creates a unique graphic featuring a circular avatar frame, a background image, a customized name, and a prominent number. It is designed for humorous or artistic purposes. The input parameters include the name, a URL to the avatar image (supports JPG, JPEG, PNG, WEBP, GIF), and a positive numerical string. The output is a PNG image.",
      "parameters": [
        {
          "name": "nama",
          "in": "query",
          "type": "string",
          "description": "Name to display",
          "example": "Lendra"
        },
        {
          "name": "avatar",
          "in": "query",
          "type": "string($uri)",
          "description": "URL of the avatar image (JPG, JPEG, PNG, WEBP, GIF)",
          "example": "https://files.catbox.moe/g45kly.jpg"
        },
        {
          "name": "num",
          "in": "query",
          "type": "string",
          "description": "Positive number to display",
          "example": "87"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/canvas/goodbyev1",
      "summary": "goodbye v1",
      "description": "Generate a customizable goodbye image for users leaving a guild. This API allows you to create a personalized goodbye banner featuring the user's avatar, username, the guild's name and icon, and the total member count. It's perfect for Discord bots or other applications that need to generate dynamic and engaging visual farewells. The output image is in JPEG format, with adjustable quality.",
      "parameters": [
        {
          "name": "username",
          "in": "query",
          "type": "string",
          "description": "The username to display.",
          "example": "John"
        },
        {
          "name": "guildName",
          "in": "query",
          "type": "string",
          "description": "The guild name to display.",
          "example": "Anime Club"
        },
        {
          "name": "guildIcon",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the guild icon.",
          "example": "https://i.ibb.co/G5mJZxs/rin.jpg"
        },
        {
          "name": "memberCount",
          "in": "query",
          "type": "integer",
          "description": "The member count of the guild.",
          "example": "150"
        },
        {
          "name": "avatar",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the user's avatar.",
          "example": "https://i.ibb.co/1s8T3sY/48f7ce63c7aa.jpg"
        },
        {
          "name": "background",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the background image.",
          "example": "https://i.ibb.co/4YBNyvP/images-76.jpg"
        },
        {
          "name": "quality",
          "in": "query",
          "type": "integer",
          "description": "The quality of the generated image (1-100).",
          "example": "80"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/canvas/goodbyev2",
      "summary": "goodbye v2",
      "description": "Generate a customized goodbye image (version 2) with a user's avatar, username, guild name, and member count using query parameters. This API provides a dynamic way to create visual farewells for users leaving a guild, ideal for integration with Discord bots and other community management tools. The image is rendered with a unique design, including rotated elements and specific font styles, and is output as a PNG file.",
      "parameters": [
        {
          "name": "username",
          "in": "query",
          "type": "string",
          "description": "The username to display.",
          "example": "John"
        },
        {
          "name": "guildName",
          "in": "query",
          "type": "string",
          "description": "The guild name to display.",
          "example": "Siputzx Api"
        },
        {
          "name": "memberCount",
          "in": "query",
          "type": "integer",
          "description": "The member count of the guild.",
          "example": "150"
        },
        {
          "name": "avatar",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the user's avatar.",
          "example": "https://i.ibb.co/1s8T3sY/48f7ce63c7aa.jpg"
        },
        {
          "name": "background",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the background image.",
          "example": "https://i.ibb.co/4YBNyvP/images-76.jpg"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/canvas/goodbyev3",
      "summary": "goodbye v3",
      "description": "Generate a customized goodbye image (version 3) using a username and an avatar URL. This API creates a visually distinct goodbye banner, ideal for various applications, including Discord bots or social media tools, to acknowledge a user's departure. The output is a PNG image file.",
      "parameters": [
        {
          "name": "username",
          "in": "query",
          "type": "string",
          "description": "The username to display on the image.",
          "example": "John"
        },
        {
          "name": "avatar",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the avatar image.",
          "example": "https://i.ibb.co/1s8T3sY/48f7ce63c7aa.jpg"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/canvas/goodbyev4",
      "summary": "goodbye v4",
      "description": "Generate a customizable goodbye image (version 4) using Canvafy. This API allows you to create a personalized farewell banner by providing URLs for the user's avatar and a background image, along with a custom description. It's ideal for use in Discord bots or other community platforms to create engaging visual messages when a user leaves. The output is a high-quality PNG image.",
      "parameters": [
        {
          "name": "avatar",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the user's avatar.",
          "example": "https://i.ibb.co/1s8T3sY/48f7ce63c7aa.jpg"
        },
        {
          "name": "background",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the background image.",
          "example": "https://i.ibb.co/4YBNyvP/images-76.jpg"
        },
        {
          "name": "description",
          "in": "query",
          "type": "string",
          "description": "The goodbye description text.",
          "example": "Goodbye friend!"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/canvas/goodbyev5",
      "summary": "goodbye v5",
      "description": "Generate a stylized goodbye image (version 5) with a user's avatar, username, guild name, and member count using query parameters. This API creates a visually appealing farewell banner, perfect for Discord bots or other community platforms, to mark a user's departure. The image features a prominent circular avatar, a customizable background, and dynamic text sizing for optimal display. The output is a high-quality JPEG image with adjustable quality.",
      "parameters": [
        {
          "name": "username",
          "in": "query",
          "type": "string",
          "description": "The username to display (max 25 characters).",
          "example": "Zero Two"
        },
        {
          "name": "guildName",
          "in": "query",
          "type": "string",
          "description": "The guild name to display (max 30 characters).",
          "example": "Siputzx Community"
        },
        {
          "name": "memberCount",
          "in": "query",
          "type": "integer",
          "description": "The member count of the guild (positive number).",
          "example": "219"
        },
        {
          "name": "avatar",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the user's avatar (JPG, JPEG, PNG, GIF, WEBP).",
          "example": "https://i.ibb.co/1s8T3sY/48f7ce63c7aa.jpg"
        },
        {
          "name": "background",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the background image (JPG, JPEG, PNG, GIF, WEBP).",
          "example": "https://i.ibb.co/4YBNyvP/mountain-sunset.jpg"
        },
        {
          "name": "quality",
          "in": "query",
          "type": "integer",
          "description": "The quality of the generated image (1-100).",
          "example": "90"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/canvas/level-up",
      "summary": "level up",
      "description": "Generate a dynamic level-up notification card with a background, user avatar, username, and a visual representation of the level transition. This API is ideal for gaming applications, community platforms, or bots that need to celebrate user achievements with a custom image. The card clearly shows the 'from' and 'to' levels with an arrow, making the progression clear. The output is a PNG image file.",
      "parameters": [
        {
          "name": "backgroundURL",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the background image.",
          "example": "https://i.ibb.co.com/2jMjYXK/IMG-20250103-WA0469.jpg"
        },
        {
          "name": "avatarURL",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the user's avatar.",
          "example": "https://avatars.githubusercontent.com/u/159487561?v=4"
        },
        {
          "name": "fromLevel",
          "in": "query",
          "type": "string",
          "description": "The level the user leveled up from.",
          "example": "0"
        },
        {
          "name": "toLevel",
          "in": "query",
          "type": "string",
          "description": "The level the user leveled up to.",
          "example": "1"
        },
        {
          "name": "name",
          "in": "query",
          "type": "string",
          "description": "The user's name.",
          "example": "putu"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/canvas/profile",
      "summary": "profile",
      "description": "Generate a personalized user profile card with a customizable background, avatar, rank details, experience progress, level, and user name using query parameters. This API is perfect for gaming platforms, community hubs, or any application needing to display user progression and stats in an appealing visual format. The output is a PNG image file.",
      "parameters": [
        {
          "name": "backgroundURL",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the background image.",
          "example": "https://i.ibb.co.com/2jMjYXK/IMG-20250103-WA0469.jpg"
        },
        {
          "name": "avatarURL",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the user's avatar.",
          "example": "https://avatars.githubusercontent.com/u/159487561?v=4"
        },
        {
          "name": "rankName",
          "in": "query",
          "type": "string",
          "description": "The name of the user's rank.",
          "example": "epik"
        },
        {
          "name": "rankId",
          "in": "query",
          "type": "string",
          "description": "The ID or identifier of the user's rank.",
          "example": "0"
        },
        {
          "name": "exp",
          "in": "query",
          "type": "integer",
          "description": "The user's current experience points.",
          "example": "500"
        },
        {
          "name": "requireExp",
          "in": "query",
          "type": "integer",
          "description": "The experience points required for the next level.",
          "example": "1000"
        },
        {
          "name": "level",
          "in": "query",
          "type": "integer",
          "description": "The user's current level.",
          "example": "10"
        },
        {
          "name": "name",
          "in": "query",
          "type": "string",
          "description": "The user's name.",
          "example": "siputzx"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/canvas/ship",
      "summary": "ship",
      "description": "This API generates a personalized 'ship' image, visually representing compatibility or a relationship between two individuals based on a percentage. Users provide URLs for two avatar images, a background image, and a numerical percentage. The API fetches these images, processes them using the Canvafy library to overlay the avatars on the background, applies a border, and integrates the custom percentage into the design. This can be used for fun social features, relationship compatibility tests, or creative visual content generation.",
      "parameters": [
        {
          "name": "avatar1",
          "in": "query",
          "type": "string",
          "description": "URL of the first avatar image.",
          "example": "https://i.ibb.co.com/Yc4MVdV/images.jpg"
        },
        {
          "name": "avatar2",
          "in": "query",
          "type": "string",
          "description": "URL of the second avatar image.",
          "example": "https://i.ibb.co.com/KKYxYQr/download.jpg"
        },
        {
          "name": "background",
          "in": "query",
          "type": "string",
          "description": "URL of the background image.",
          "example": "https://i.ibb.co/4YBNyvP/images-76.jpg"
        },
        {
          "name": "persen",
          "in": "query",
          "type": "string",
          "description": "The percentage value for the ship image.",
          "example": "20"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/canvas/welcomev1",
      "summary": "welcome v1",
      "description": "Generate a welcome image (version 1) featuring a user's avatar, username, guild icon, guild name, and member count using query parameters. This API is ideal for Discord bots or other community platforms to create engaging visual greetings for new members. The image is designed with distinct areas for each element and includes dynamic text formatting. The output is a high-quality JPEG image with adjustable quality.",
      "parameters": [
        {
          "name": "username",
          "in": "query",
          "type": "string",
          "description": "The username to display.",
          "example": "John"
        },
        {
          "name": "guildName",
          "in": "query",
          "type": "string",
          "description": "The guild name to display.",
          "example": "Anime Club"
        },
        {
          "name": "guildIcon",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the guild icon.",
          "example": "https://i.ibb.co/G5mJZxs/rin.jpg"
        },
        {
          "name": "memberCount",
          "in": "query",
          "type": "integer",
          "description": "The member count of the guild.",
          "example": "150"
        },
        {
          "name": "avatar",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the user's avatar.",
          "example": "https://i.ibb.co/1s8T3sY/48f7ce63c7aa.jpg"
        },
        {
          "name": "background",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the background image.",
          "example": "https://i.ibb.co/4YBNyvP/images-76.jpg"
        },
        {
          "name": "quality",
          "in": "query",
          "type": "integer",
          "description": "The quality of the generated image (1-100).",
          "example": "80"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/canvas/welcomev2",
      "summary": "welcome v2",
      "description": "Generate a welcome image (version 2) with a user's avatar, username, guild name, and member count using query parameters. This API creates a visually appealing welcome banner, ideal for integration with Discord bots and other community management tools. The image features a unique design with rotated elements and specific font styles, and is output as a PNG file.",
      "parameters": [
        {
          "name": "username",
          "in": "query",
          "type": "string",
          "description": "The username to display.",
          "example": "John"
        },
        {
          "name": "guildName",
          "in": "query",
          "type": "string",
          "description": "The guild name to display.",
          "example": "Siputzx Api"
        },
        {
          "name": "memberCount",
          "in": "query",
          "type": "integer",
          "description": "The member count (positive number).",
          "example": "150"
        },
        {
          "name": "avatar",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the user's avatar.",
          "example": "https://i.ibb.co/1s8T3sY/48f7ce63c7aa.jpg"
        },
        {
          "name": "background",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the background image.",
          "example": "https://i.ibb.co/4YBNyvP/images-76.jpg"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/canvas/welcomev3",
      "summary": "welcome v3",
      "description": "Generate a simple welcome image (version 3) featuring a username and an avatar using query parameters. This API provides a straightforward way to create visual greetings for new users or members, ideal for various applications, including Discord bots or web platforms. The output is a PNG image file.",
      "parameters": [
        {
          "name": "username",
          "in": "query",
          "type": "string",
          "description": "The username to display.",
          "example": "John"
        },
        {
          "name": "avatar",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the user's avatar.",
          "example": "https://i.ibb.co/1s8T3sY/48f7ce63c7aa.jpg"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/canvas/welcomev4",
      "summary": "welcome v4",
      "description": "Generate a customizable welcome image (version 4) using Canvafy. This API allows you to create a personalized welcome banner by providing URLs for the user's avatar and a background image, along with a custom description. It's ideal for use in Discord bots or other community platforms to create engaging visual greetings for new members. The output is a high-quality PNG image.",
      "parameters": [
        {
          "name": "avatar",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the user's avatar.",
          "example": "https://i.ibb.co/1s8T3sY/48f7ce63c7aa.jpg"
        },
        {
          "name": "background",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the background image.",
          "example": "https://i.ibb.co/4YBNyvP/images-76.jpg"
        },
        {
          "name": "description",
          "in": "query",
          "type": "string",
          "description": "The welcome description text.",
          "example": "Welcome friend!"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/canvas/welcomev5",
      "summary": "welcome v5",
      "description": "Generate a stylized welcome image (version 5) with a user's avatar, username, guild name, and member count using query parameters. This API creates a visually appealing welcome banner, perfect for Discord bots or other community platforms, to celebrate a new member's arrival. The image features a prominent circular avatar, a customizable background, and dynamic text sizing for optimal display. The output is a high-quality JPEG image with adjustable quality.",
      "parameters": [
        {
          "name": "username",
          "in": "query",
          "type": "string",
          "description": "The username to display (max 25 characters).",
          "example": "Zero Two"
        },
        {
          "name": "guildName",
          "in": "query",
          "type": "string",
          "description": "The guild name to display (max 30 characters).",
          "example": "Siputzx Community"
        },
        {
          "name": "memberCount",
          "in": "query",
          "type": "integer",
          "description": "The member count (positive number).",
          "example": "219"
        },
        {
          "name": "avatar",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the user's avatar (JPG, JPEG, PNG, GIF, WEBP).",
          "example": "https://i.ibb.co/1s8T3sY/48f7ce63c7aa.jpg"
        },
        {
          "name": "background",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the background image (JPG, JPEG, PNG, GIF, WEBP).",
          "example": "https://i.ibb.co/4YBNyvP/mountain-sunset.jpg"
        },
        {
          "name": "quality",
          "in": "query",
          "type": "integer",
          "description": "The quality of the generated image (1-100).",
          "example": "90"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/canvas/xnxx",
      "summary": "xnxx",
      "description": "Generate a fake XNXX image with a title using query parameters. This API allows users to create a custom image that mimics the style of a video thumbnail, displaying a provided title and an image from a URL. It's useful for generating memes or custom content with a distinct visual style. The output is an image file in PNG format.",
      "parameters": [
        {
          "name": "title",
          "in": "query",
          "type": "string",
          "description": "The title to display on the image",
          "example": "Lari ada wibu"
        },
        {
          "name": "image",
          "in": "query",
          "type": "string($uri)",
          "description": "URL of the image to display",
          "example": "https://files.catbox.moe/zhsks3.jpg"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Check": [
    {
      "method": "GET",
      "path": "/api/check/genshin",
      "summary": "check genshin",
      "description": "This API endpoint allows you to retrieve detailed Genshin Impact player information from Enka.Network using their in-game UID via query parameters. It provides player statistics like username, adventure rank, world level, signature, and combat stats. Additionally, it captures screenshots of the player's character build cards, which are then converted into accessible image URLs. This is useful for players and communities looking to quickly view and share Genshin Impact character builds and player progress.",
      "parameters": [
        {
          "name": "uid",
          "in": "query",
          "type": "string",
          "description": "The UID of the Genshin Impact player",
          "example": "856012067"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/check/npm",
      "summary": "npm",
      "description": "This API endpoint allows you to retrieve detailed information about a specified NPM package. You can get details such as the latest version, initial published version, total number of updates, dependency counts for both the latest and initial versions, and their respective publication timestamps. This is useful for developers and tools needing to monitor or gather data on NPM packages.",
      "parameters": [
        {
          "name": "packageName",
          "in": "query",
          "type": "string",
          "description": "The name of the NPM package",
          "example": "axios"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/check/resi",
      "summary": "Check Resi",
      "description": "This API endpoint allows you to track your package shipment using tracking number (resi) and courier name via query parameters. It retrieves shipping status, history, and other tracking details from various Indonesian shipping couriers.",
      "parameters": [
        {
          "name": "resi",
          "in": "query",
          "type": "string",
          "description": "Nomor resi/tracking number",
          "example": "1234567890"
        },
        {
          "name": "courier",
          "in": "query",
          "type": "string",
          "description": "Nama ekspedisi/courier name",
          "example": "JNE"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/check/tagihanpln",
      "summary": "tagihan listrik",
      "description": "This API endpoint allows you to check your monthly PLN electricity bill information using your customer number (nopel) via a query parameter. It retrieves details such as the type of bill, customer number, customer name, power tariff, billing month/year, meter stand, and total bill amount. This is useful for individuals or applications needing to quickly verify PLN electricity bills.",
      "parameters": [
        {
          "name": "nopel",
          "in": "query",
          "type": "string",
          "description": "Nomor pelanggan PLN",
          "example": "443100003506"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "CloudflareAi": [
    {
      "method": "GET",
      "path": "/api/cf/chat",
      "summary": "chat",
      "description": "This API endpoint allows users to interact with a Cloudflare-powered AI model to get chat responses. Users can provide a 'prompt' for the AI to respond to, and an optional 'system' instruction to guide the AI's behavior or persona. This is useful for building conversational interfaces, chatbots, or AI-driven content generation tools where a simple text-based interaction is needed. The AI model used is '@cf/meta/llama-3.1-8b-instruct-fast', providing a fast and efficient response. You can also specify a custom AI model.",
      "parameters": [
        {
          "name": "prompt",
          "in": "query",
          "type": "string",
          "description": "User's message to AI",
          "example": "What is the capital of France?"
        },
        {
          "name": "system",
          "in": "query",
          "type": "string",
          "description": "System instruction for AI",
          "example": "You are a helpful assistant."
        },
        {
          "name": "model",
          "in": "query",
          "type": "string",
          "description": "Custom AI model to use",
          "example": "@cf/meta/llama-3.1-8b-instruct-fast"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/cf/embedding",
      "summary": "embedding",
      "description": "This API endpoint generates a numerical embedding for a given text input using a Cloudflare AI model. Text embeddings are vector representations of text that capture semantic meaning, making them useful for tasks like semantic search, text classification, and clustering. Users can provide the text as a query parameter and optionally specify a custom AI model for embedding generation. The default model is '@cf/baai/bge-base-en-v1.5', which is optimized for English text embeddings.",
      "parameters": [
        {
          "name": "text",
          "in": "query",
          "type": "string",
          "description": "The text to generate embedding for",
          "example": "The quick brown fox jumps over the lazy dog."
        },
        {
          "name": "model",
          "in": "query",
          "type": "string",
          "description": "Custom AI model to use for embedding",
          "example": "@cf/baai/bge-base-en-v1.5"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/cf/image-classification",
      "summary": "image classification",
      "description": "This API endpoint performs image classification using a Cloudflare AI model. Users provide an image URL, and the API returns a classification of the image's content. This is useful for automatically tagging images, content moderation, or organizing visual data. The default model is '@cf/microsoft/resnet-50', a powerful model for general image recognition. You can also specify a custom AI model.",
      "parameters": [
        {
          "name": "imageUrl",
          "in": "query",
          "type": "string($url)",
          "description": "The URL of the image to classify",
          "example": "https://cataas.com/cat"
        },
        {
          "name": "model",
          "in": "query",
          "type": "string",
          "description": "Custom AI model to use for classification",
          "example": "@cf/microsoft/resnet-50"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/cf/sentiment",
      "summary": "sentiment",
      "description": "This API endpoint analyzes the sentiment of a given text using a Cloudflare AI model. Sentiment analysis determines the emotional tone behind a piece of text, categorizing it as positive, negative, or neutral. This is useful for understanding public opinion, customer feedback, or social media monitoring. Users can provide the text as a query parameter and optionally specify a custom AI model for sentiment analysis. The default model is '@cf/huggingface/distilbert-sst-2-int8', which is optimized for sentiment classification.",
      "parameters": [
        {
          "name": "text",
          "in": "query",
          "type": "string",
          "description": "The text to analyze sentiment for",
          "example": "This is a great day!"
        },
        {
          "name": "model",
          "in": "query",
          "type": "string",
          "description": "Custom AI model to use for sentiment analysis",
          "example": "@cf/huggingface/distilbert-sst-2-int8"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/cf/translation",
      "summary": "translation",
      "description": "This API endpoint provides text translation services using a Cloudflare AI model. Users can translate text from a specified source language to a target language by providing the text, source language code, and target language code as query parameters. This is highly useful for internationalization, communication across different linguistic backgrounds, and building multilingual applications. The default model is '@cf/meta/m2m100-1.2b', which supports translation between many languages. You can also specify a custom AI model for translation.",
      "parameters": [
        {
          "name": "text",
          "in": "query",
          "type": "string",
          "description": "The text to translate",
          "example": "The quick brown fox jumps over the lazy dog."
        },
        {
          "name": "sourceLang",
          "in": "query",
          "type": "string",
          "description": "The source language code (e.g., en, id)",
          "example": "en"
        },
        {
          "name": "targetLang",
          "in": "query",
          "type": "string",
          "description": "The target language code (e.g., id, es)",
          "example": "id"
        },
        {
          "name": "model",
          "in": "query",
          "type": "string",
          "description": "Custom AI model to use for translation",
          "example": "@cf/meta/m2m100-1.2b"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/cf/whisper",
      "summary": "whisper",
      "description": "This API endpoint transcribes speech from an audio URL into text using a Cloudflare AI model, specifically the Whisper model. This is invaluable for applications requiring voice-to-text conversion, such as transcribing meetings, creating captions for videos, or enabling voice commands in applications. Users provide the audio file's URL as a query parameter and can optionally specify a custom AI model. The default model is '@cf/openai/whisper', known for its high accuracy in speech recognition.",
      "parameters": [
        {
          "name": "audioUrl",
          "in": "query",
          "type": "string($url)",
          "description": "The URL of the audio file to transcribe",
          "example": "https://github.com/Azure-Samples/cognitive-services-speech-sdk/raw/master/samples/cpp/windows/console/samples/enrollment_audio_katie.wav"
        },
        {
          "name": "model",
          "in": "query",
          "type": "string",
          "description": "Custom AI model to use for speech-to-text",
          "example": "@cf/openai/whisper"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Currency": [
    {
      "method": "GET",
      "path": "/api/currency/convert",
      "summary": "currency-convert",
      "description": "This API endpoint allows you to convert between various fiat currencies and cryptocurrencies. Users can specify an amount, the source currency, and the target currency to get the converted value. It fetches real-time exchange rates and cryptocurrency prices from multiple reliable sources to ensure accuracy. This is useful for financial applications, personal finance tools, and any service requiring up-to-date currency conversions.",
      "parameters": [
        {
          "name": "amount",
          "in": "query",
          "type": "number",
          "description": "Amount to convert",
          "example": "100"
        },
        {
          "name": "from",
          "in": "query",
          "type": "string",
          "description": "Source currency",
          "example": "USD"
        },
        {
          "name": "to",
          "in": "query",
          "type": "string",
          "description": "Target currency",
          "example": "IDR"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/currency/crypto/{symbol}",
      "summary": "crypto-detail",
      "description": "This API endpoint provides detailed information for a specific cryptocurrency, including its USD price and any available Indodax exchange data (for Indonesian Rupiah conversions). Users can query by cryptocurrency symbol to get current market values and related data points. This is beneficial for cryptocurrency tracking applications, portfolio management tools, or for users interested in specific crypto asset details.",
      "parameters": [
        {
          "name": "symbol",
          "in": "query",
          "type": "string",
          "description": "Cryptocurrency symbol",
          "example": "BTC"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/currency/list",
      "summary": "currency-list",
      "description": "This API endpoint provides a comprehensive list of all supported fiat and cryptocurrencies. It gathers data from various sources to ensure the list is up-to-date, making it easy for users to discover which currencies are available for conversion. This endpoint is useful for populating currency selection fields in applications or for users looking to understand the breadth of supported currencies.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/currency/rates",
      "summary": "currency-rates",
      "description": "This API endpoint provides current exchange rates for fiat currencies and real-time prices for cryptocurrencies. It aggregates data from various financial APIs to deliver comprehensive and accurate market information. This is ideal for applications that need to display current market trends, perform real-time calculations, or analyze currency fluctuations.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Downloader": [
    {
      "method": "GET",
      "path": "/api/d/capcut",
      "summary": "capcut",
      "description": "This API endpoint allows you to retrieve comprehensive metadata for a CapCut video by providing its URL. It scrapes the CapCut website to extract details such as the video's title, description, like count, play count, duration, usage statistics, creation time, cover image URL, video ratio, and author information. This is useful for applications needing to display CapCut video details or integrate CapCut content.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "CapCut video URL",
          "example": "https://www.capcut.com/tv2/ZSBwF9X2g/ perlu di ingat"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/d/capcutv2",
      "summary": "capcutv2",
      "description": "Alternative CapCut video downloader using third-party service. This API endpoint allows you to download CapCut videos with different quality options including HD No Watermark, No Watermark, and Watermark versions. It provides direct download URLs, file sizes, and format information.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "CapCut video URL",
          "example": "https://www.capcut.com/tv2/ZSSCR6UFU/"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/d/douyin",
      "summary": "douyin",
      "description": "This API endpoint allows you to download Douyin/TikTok videos by providing the video URL as a query parameter. It fetches video information including title, thumbnail, and various download links. The endpoint validates the provided URL to ensure it's a valid Douyin or TikTok link before attempting to retrieve the video details. Upon successful processing, it returns a structured JSON object containing the video's metadata and download options. This is ideal for applications requiring direct video download capabilities from these platforms.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "Douyin/TikTok video URL",
          "example": "https://www.douyin.com/video/7256984651137289483"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/d/facebook",
      "summary": "facebook",
      "description": "This API endpoint downloads videos from Facebook. The user provides a Facebook video URL, and the API processes the link to extract available video download links in various qualities. It uses GetVidFB service to handle the extraction process. The response includes the video thumbnail and an array of objects, each containing the download URL, resolution, and format of the video. This is useful for applications that need to save Facebook videos for offline use or for content archiving. The API is designed to be fast and reliable, handling different types of Facebook video URLs and returning a structured JSON response with all the necessary information.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "Facebook video URL",
          "example": "https://www.facebook.com/share/r/12BFZAtjpS8/?mibextid=qDwCgo"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/d/gdrive",
      "summary": "gdrive",
      "description": "This API endpoint allows you to obtain a direct download link for a Google Drive file by providing its public URL. It scrapes the Google Drive page to extract the file name and constructs a direct download URL. This is useful for integrating Google Drive file downloads into applications or scripts without manual intervention. Ensure the Google Drive file is publicly accessible or shared with 'Anyone with the link' for the API to function correctly. The response will include the file name, the direct download link, and the original Google Drive link.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "Google Drive URL",
          "example": "https://drive.google.com/file/d/1YTD7Ymux9puFNqu__5WPlYdFZHcGI3Wz/view?usp=drivesdk"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/d/github",
      "summary": "github",
      "description": "This API endpoint allows you to fetch data from various GitHub URLs, including repositories, individual files, raw content, and Gists. By providing a valid GitHub URL, the API will parse the URL, determine its type, and retrieve relevant information such as repository details (stars, forks, topics), file content and metadata, or Gist files and their associated data. This is particularly useful for developers and tools needing programmatic access to GitHub content without direct API interaction complexities.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "GitHub URL (repo, file, raw, or gist)",
          "example": "https://gist.github.com/siputzx/966268a3aa3c14695e80cc9f30da8e9f"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/d/igdl",
      "summary": "igdl",
      "description": "This API endpoint allows users to download Instagram videos and photos by providing the Instagram post URL. It automates the process of accessing a third-party downloader website (fastdl.app), inputting the URL, and scraping the resulting download links. The endpoint handles various types of Instagram content, including reels, photos, and videos, and returns the direct download URLs and thumbnails. This is useful for users who want to save Instagram media for offline viewing or integration into other applications.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "The Instagram post URL",
          "example": "https://www.instagram.com/reel/DMNiqN2TV3v/?igsh=aHVtdmZ3d3loejY0"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/d/lahelu",
      "summary": "lahelu",
      "description": "This API endpoint allows you to retrieve information about a specific post from Lahelu.com by providing the post's URL. It extracts details such as the post ID, user ID, title, media content, sensitivity flags, hashtags, and creation timestamp. This can be useful for archiving Lahelu content, integrating Lahelu posts into other applications, or analyzing post data.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "The Lahelu post URL",
          "example": "https://lahelu.com/post/PMujNAfxy"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/d/mediafire",
      "summary": "mediafire",
      "description": "This API endpoint allows you to retrieve detailed download information for a file hosted on MediaFire. By providing a MediaFire URL, the API will scrape the page to extract critical details such as the file name, direct download link, file size, description, upload date, file type, compatibility information, and relevant metadata from the page's meta tags. It also attempts to determine the MIME type based on the file extension. This is particularly useful for automated downloading or integrating MediaFire links into other applications. The scraping process handles potential redirects to ensure the correct download link is obtained. The output provides a structured object containing all the extracted data.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "MediaFire file URL",
          "example": "https://www.mediafire.com/file/iojnikfucf67q74/Base_Bot_Simpel.zip/file"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/d/musicapple",
      "summary": "music apple",
      "description": "This API endpoint allows users to retrieve music download links and SEO (Search Engine Optimization) data directly from an Apple Music URL. It functions by scraping the provided Apple Music page to extract relevant information such as song title, artist, album artwork, and metadata like page title, description, and keywords. This is useful for applications that need to integrate music download capabilities or display detailed information about Apple Music tracks. The API handles the complexities of CSRF tokens and Cloudflare Turnstile CAPTCHA to ensure successful data retrieval. Users provide the Apple Music URL as a query parameter.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "Apple Music URL",
          "example": "https://music.apple.com/id/album/duka/1160727993?i=1160728286"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/d/pinterest",
      "summary": "pinterest",
      "description": "This API endpoint allows you to download various media types (images, videos, or GIFs) from Pinterest by providing a Pinterest URL. It supports all Pinterest domains and short URLs. The endpoint intelligently handles redirects and extracts the Pinterest Pin ID to fetch detailed information about the pin, including its title, description, creation date, and available media URLs in various qualities and sizes. It ensures that only valid Pinterest links are processed and provides comprehensive error handling for invalid URLs, missing pins, or server-side issues. The output includes structured data about the pin and an array of available media files, each with its type, quality, dimensions, URL, and file size (if available).",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "Pinterest URL",
          "example": "https://pin.it/7jWBaQGhd"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/d/rednote",
      "summary": "rednote",
      "description": "This API endpoint allows you to download information from a Rednote (XiaoHongShu) URL. It extracts details such as title, description, keywords, video URL (if available), note ID, duration, author's nickname, and engagement metrics like likes, comments, and collects. Additionally, it retrieves all associated images. This is useful for archiving content or analyzing Rednote posts.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "The Rednote URL to fetch information from",
          "example": ""
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/d/savefrom",
      "summary": "savefrom",
      "description": "This API endpoint leverages SaveFrom.net to provide download links for media (videos, audios, and images) from various online platforms such as YouTube, Instagram, TikTok, Twitter, and more. Users can provide a media URL as a query parameter, and the API will scrape SaveFrom.net to extract available download options, including different qualities and formats. The endpoint supports filtering results by media type (video, audio, or image) for convenience. It's a versatile tool for obtaining direct download links from a wide range of social media and video-sharing sites, offering a robust solution for media acquisition.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "Media URL",
          "example": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        {
          "name": "type",
          "in": "query",
          "type": "string",
          "description": "Filter by media type",
          "example": ""
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/d/seegore",
      "summary": "seegore",
      "description": "This API endpoint allows you to fetch article data from a Seegore URL using query parameters. It extracts various details such as the article title, author, publication date, number of comments, view count, rating information (value, count, votes), and the source URL of any embedded video. This is useful for content analysis, archiving, or integrating Seegore content into other applications.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "The Seegore article URL to fetch data from",
          "example": "https://seegore.com/train-gives-a-warm-welcome-to-grandma"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/d/snackvideo",
      "summary": "snack video",
      "description": "This API endpoint allows you to retrieve detailed information and the direct download link for a video hosted on Snack Video. By providing the Snack Video URL, the API scrapes the necessary data, including the video's title, description, thumbnail, upload date, direct video URL, duration, and interaction statistics (views, likes, shares). It also extracts information about the video's creator, such as their name, profile URL, and bio. This endpoint is designed for developers who need to integrate Snack Video content into their applications or services, offering a comprehensive data payload for each video.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "Snack Video URL",
          "example": "https://s.snackvideo.com/p/dwlMd51U"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/d/soundcloud",
      "summary": "soundCloud",
      "description": "This API endpoint allows you to download audio from a SoundCloud track by providing its URL as a query parameter. It uses the SoundCloud API to resolve the track information, including its title, artist, duration, thumbnail, and the direct progressive download link. The endpoint handles various SoundCloud URL formats, including mobile links, and provides robust error handling for invalid URLs, tracks not found, or issues during the download link retrieval process. The output is a structured JSON object containing all relevant track details and the direct audio download URL.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "SoundCloud track URL",
          "example": "https://m.soundcloud.com/teguh-hariyadi-652597010/anji-dia"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/d/spotify",
      "summary": "Spotify",
      "description": "This API endpoint allows you to download music from Spotify by providing a Spotify track or album URL. It first retrieves the track/album information, then initiates a conversion process to MP3, and finally provides a direct download link. This is useful for users who want to save Spotify music locally for offline listening or other purposes. The endpoint supports both individual tracks and full albums, simplifying the process of obtaining audio files from Spotify.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "Spotify URL",
          "example": "https://open.spotify.com/intl-id/track/5EWyweCJ5igLl6bjbGRmGm"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/d/spotifyv2",
      "summary": "spotify v2",
      "description": "This API endpoint allows users to retrieve music download links and metadata directly from a Spotify URL. It functions by scraping the provided Spotify page to extract relevant information such as song title, artist, album artwork, and metadata. This is useful for applications that need to integrate music download capabilities or display detailed information about Spotify tracks. The API handles the complexities of CSRF tokens and Cloudflare Turnstile CAPTCHA to ensure successful data retrieval. Users provide the Spotify URL as a query parameter.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "Spotify URL",
          "example": "https://open.spotify.com/track/4iV5W9uYEdYUVa79Axb7Rh"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/d/tiktok",
      "summary": "tiktok",
      "description": "This API endpoint allows you to download videos or slideshows from a given TikTok URL using query parameters. It leverages the SnapTik service to extract direct download links for the content, including metadata such as title, creator, thumbnail, and the type of content (video, photo, or slideshow). This is ideal for users who want to save TikTok content for offline viewing or integration into other applications.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "The TikTok URL of the video or slideshow",
          "example": "https://vt.tiktok.com/ZSjXNEnbC/"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/d/tiktok/v2",
      "summary": "tiktok v2",
      "description": "This API endpoint allows you to download TikTok videos and photos by providing a TikTok URL. It scrapes the necessary information from the TikTok page, including video/photo metadata and direct download links. This can be used for archival purposes, content analysis, or integrating TikTok content into other applications. The API supports both video and image posts, providing respective download links. It handles redirects and extracts the post ID to ensure accurate data retrieval. The response includes detailed metadata like like count, play count, comment count, share count, title, description, hashtags, and location created, along with direct download URLs for the media.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "TikTok URL",
          "example": "https://vt.tiktok.com/ZSjXNEnbC/"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/d/twitter",
      "summary": "twitter",
      "description": "This API endpoint allows users to download videos from Twitter by providing the video's URL. It fetches the necessary token from the SnapTwitter website, constructs a POST request with the video URL and token, and then scrapes the resulting HTML to extract the image URL, download link, video title, and description. This tool is useful for archiving Twitter videos or sharing them across platforms where direct Twitter links might not be easily accessible or playable.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "Twitter video URL",
          "example": "https://twitter.com/9GAG/status/1661175429859012608"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Fun": [
    {
      "method": "GET",
      "path": "/api/fun/alay",
      "summary": "alay",
      "description": "This API converts standard text into 'alay' (a colloquial Indonesian slang style) format. It applies random capitalization and substitutes certain letters with numbers, mimicking the unique and informal writing style often used in Indonesian online communication. This can be used for entertainment purposes, simulating a specific text aesthetic, or generating creative text variations. The API takes a single text input and returns the transformed string.",
      "parameters": [
        {
          "name": "text",
          "in": "query",
          "type": "string",
          "description": "Text to convert",
          "example": "HelloWorld"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/fun/jagokata",
      "summary": "jagokata",
      "description": "This API endpoint allows you to search for quotes on jagokata.com, a popular Indonesian website for quotes and sayings. By providing a search query, you can retrieve a list of relevant quotes, along with details such as the author, description, lifespan, number of votes, category, and associated tags. This API is useful for applications that require a collection of wisdom, inspiration, or famous sayings.",
      "parameters": [
        {
          "name": "q",
          "in": "query",
          "type": "string",
          "description": "The query to search for quotes",
          "example": "kesuksesan"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/fun/livefunfact",
      "summary": "livefunfact",
      "description": "Generate comprehensive medical fun facts about human body based on birth date. Returns validated statistics from 2024-2025 medical research including respiratory, cardiovascular, neurological, digestive, renal, immune, cellular, sensory, endocrine, and musculoskeletal systems with data sourced from Cleveland Clinic, Johns Hopkins, American Heart Association, and peer-reviewed medical journals.",
      "parameters": [
        {
          "name": "birthdate",
          "in": "query",
          "type": "string",
          "description": "Birth date in YYYY-MM-DD format",
          "example": "1990-05-15"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Games": [
    {
      "method": "GET",
      "path": "/api/games/asahotak",
      "summary": "asah otak",
      "description": "This API endpoint provides a random 'Asah Otak' (brain teaser) question from a curated database. Users can retrieve a new question with each request, which typically includes the question itself and its corresponding answer. This endpoint is ideal for developing quiz applications, educational games, or any platform requiring quick, challenging brain teasers. The response will be a JSON object containing the question and answer.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/caklontong",
      "summary": "cak lontong",
      "description": "This API endpoint provides a random 'Cak Lontong' question, a popular Indonesian comedic quiz format known for its tricky and often illogical answers. Each request retrieves a new question and its corresponding unique answer, designed to challenge conventional thinking. This endpoint is ideal for developing quiz applications, entertainment platforms, or any scenario where engaging and humorous brain teasers are desired. The response will be a JSON object containing the question and its answer.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/cc-sd",
      "summary": "cerdas cermat",
      "description": "This API endpoint provides random quiz questions for 'Cerdas Cermat' (smart competition), categorized by various school subjects. Users can specify the subject and the desired number of questions (between 5 and 10). The API shuffles the questions and their answer choices, returning a set of unique questions along with their scrambled options and the correct answer key. This endpoint is ideal for educational applications, quiz games, or e-learning platforms that require dynamic and challenging quiz content.",
      "parameters": [
        {
          "name": "matapelajaran",
          "in": "query",
          "type": "string",
          "description": "Subject for the quiz questions (e.g., 'matematika', 'ipa', 'ips').",
          "example": ""
        },
        {
          "name": "jumlahsoal",
          "in": "query",
          "type": "integer",
          "description": "Number of questions to generate (minimum 5, maximum 10).",
          "example": "5"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/family100",
      "summary": "family100",
      "description": "This API endpoint provides a random question from the popular game 'Family 100' (also known as Family Feud). Each request delivers a new question along with its surveyed answers and their corresponding points. This endpoint is perfect for developing interactive quiz applications, entertainment platforms, or any scenario where a 'Family 100'-style game is desired. The response will be a JSON object containing the question and an array of answers with their scores.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/kabupaten",
      "summary": "tebak kabupaten",
      "description": "This API endpoint provides a random Indonesian regency (kabupaten) for a guessing game, including its map image. Each request delivers the name of a regency and a high-resolution URL to its map. This endpoint is ideal for geography quizzes, educational applications, or any platform designed to test knowledge of Indonesian administrative divisions. The response will be a JSON object containing the regency's name, a link to its Wikipedia page, and the URL of its map image.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/karakter-freefire",
      "summary": "tebak karakter freefire",
      "description": "This API endpoint provides a random Free Fire character for a guessing game. Each request delivers details about a character, such as their name, image, or a brief description, challenging users to identify the correct character. This endpoint is ideal for Free Fire fan quizzes, entertainment applications, or any platform focused on testing knowledge about the popular battle royale game's characters. The response will be a JSON object containing information about the randomly selected character.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/lengkapikalimat",
      "summary": "lengkapi kalimat",
      "description": "This API endpoint provides a random 'Lengkapi Kalimat' (complete the sentence) question. Each request retrieves a new incomplete sentence, requiring users to fill in the missing word or phrase to complete it logically and grammatically. This endpoint is ideal for language learning applications, educational games, or any platform focused on improving sentence construction and vocabulary skills. The response will be a JSON object containing the incomplete sentence and its correct completion.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/maths",
      "summary": "maths",
      "description": "This API endpoint generates a random math problem based on a specified difficulty level. Users can choose from various levels like 'noob', 'easy', 'medium', 'hard', 'extreme', and 'impossible' to get a problem tailored to their skill. Each problem includes the mathematical expression, the chosen difficulty mode, a time limit for solving, a bonus for correct answers, and the correct result. This endpoint is ideal for educational apps, brain training games, or any platform requiring dynamic arithmetic challenges.",
      "parameters": [
        {
          "name": "level",
          "in": "query",
          "type": "string",
          "description": "Difficulty level of the math problem",
          "example": ""
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/siapakahaku",
      "summary": "siapakah aku",
      "description": "This API endpoint provides a random 'Siapakah Aku' (Who Am I?) riddle. Each request delivers a series of clues or characteristics, challenging users to guess the person, object, or concept being described. This endpoint is ideal for interactive riddle games, educational tools that encourage deductive reasoning, or any platform designed to engage users with thought-provoking puzzles. The response will be a JSON object containing the riddle and its correct answer.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/surah",
      "summary": "tebak surah",
      "description": "This API endpoint provides a random ayah (verse) from the Quran for a guessing game. Each request delivers an ayah, challenging users to identify the surah (chapter) it belongs to. This endpoint is ideal for religious educational applications, Islamic quizzes, or any platform focused on testing knowledge of the Quran. The response will be a JSON object containing the ayah text, its surah information, and potentially audio for recitation.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/susunkata",
      "summary": "susun kata",
      "description": "This API endpoint provides a random 'Susun Kata' (arrange words) puzzle. Each request retrieves a jumbled set of words or letters that need to be rearranged to form a meaningful phrase or word. This endpoint is ideal for word puzzle games, language learning applications, or any platform designed to challenge vocabulary and logical thinking. The response will be a JSON object containing the jumbled words and the correct arrangement.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/tebakbendera",
      "summary": "tebak bendera",
      "description": "This API endpoint provides a random country flag quiz. Each request delivers a new challenge featuring a country's flag and its name, prompting users to identify the correct country based on its flag. This endpoint is ideal for geography quizzes, educational applications, or any platform focused on testing knowledge of world flags. The response will be a JSON object containing the flag image URL and the correct country name.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/tebakgambar",
      "summary": "tebak gambar",
      "description": "This API endpoint provides a random 'Tebak Gambar' (guess the picture) question. Each request delivers an image that represents a hidden word or phrase, challenging users to decipher the visual puzzle. This endpoint is ideal for visual quiz games, entertainment applications, or any platform focused on engaging users with creative and challenging image-based riddles. The response will be a JSON object containing the image URL and the correct answer.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/tebakgame",
      "summary": "tebak game",
      "description": "This API endpoint provides a random 'Tebak Game' (guess the game) question. Each request delivers an image or description related to a video game, challenging users to identify the correct game title. This endpoint is ideal for gaming quizzes, entertainment applications, or any platform focused on testing knowledge of video games across various genres and platforms. The response will be a JSON object containing the game hint (e.g., image URL, text) and its correct answer.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/tebakheroml",
      "summary": "tebak hero ml",
      "description": "This API endpoint provides a random Mobile Legends: Bang Bang hero and one of their in-game audio quotes. Users can utilize this endpoint to create a 'Guess the Hero' game, where players listen to the audio and identify the character. The response includes the hero's name and a URL to their audio quote, making it suitable for interactive quiz applications, fan-made games, or content related to Mobile Legends.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/tebakhewan",
      "summary": "tebak hewan",
      "description": "This API endpoint provides a random list of animals with their images, suitable for a guessing game ('Tebak Hewan'). Each request fetches a set of animal names and their corresponding image URLs from a diverse database. This endpoint is ideal for educational games, children's applications, or any platform designed to help users learn about different animals through visual identification. The response includes an array of objects, each containing an animal's name and its image URL.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/tebakjkt",
      "summary": "tebak jkt",
      "description": "This API endpoint provides a random 'Tebak JKT' (Guess JKT48) quiz. Each request delivers an image or clue related to a JKT48 member, challenging users to identify the correct member. This endpoint is ideal for fan quizzes, entertainment applications, or any platform focused on testing knowledge about the popular Indonesian idol group JKT48. The response will be a JSON object containing the hint (e.g., image URL) and the correct member's name.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/tebakkalimat",
      "summary": "tebak kalimat",
      "description": "This API endpoint provides a random 'Tebak Kalimat' (guess the sentence/phrase) question. Each request delivers a jumbled or incomplete sentence, challenging users to reconstruct or complete it correctly. This endpoint is ideal for language games, educational tools focused on sentence structure, or any application designed to enhance vocabulary and logical reasoning. The response will be a JSON object containing the scrambled or incomplete sentence and its correct form.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/tebakkartun",
      "summary": "tebak kartun",
      "description": "This API endpoint provides a random 'Tebak Kartun' (guess the cartoon) question. Each request delivers an image of a cartoon character or scene, challenging users to identify the correct cartoon title. This endpoint is ideal for entertainment applications, cartoon fan quizzes, or any platform focused on testing knowledge of popular animated series. The response will be a JSON object containing the cartoon's image URL and its correct name.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/tebakkata",
      "summary": "tebak kata",
      "description": "This API endpoint provides a random 'Tebak Kata' (guess the word) question. Each request delivers a clue or a set of jumbled letters, challenging users to identify the correct word. This endpoint is ideal for word puzzle games, vocabulary-building applications, or any platform designed to test linguistic skills. The response will be a JSON object containing the clue/jumbled letters and the correct word.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/tebakkimia",
      "summary": "tebak kimia",
      "description": "This API endpoint provides a random 'Tebak Kimia' (guess the chemistry) question. Each request delivers a question related to chemical elements, compounds, or concepts, challenging users to identify the correct answer. This endpoint is ideal for educational applications, chemistry quizzes, or any platform focused on testing and improving knowledge of fundamental chemistry principles. The response will be a JSON object containing the chemistry question and its correct answer.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/tebaklagu",
      "summary": "tebak lagu",
      "description": "This API endpoint provides a random 'Tebak Lagu' (guess the song) question. Each request delivers a snippet of a song (e.g., audio URL or lyrics excerpt), challenging users to identify the correct song title and artist. This endpoint is ideal for music quiz games, entertainment applications, or any platform focused on testing musical knowledge across various genres. The response will be a JSON object containing the song hint and its correct answer.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/tebaklirik",
      "summary": "tebak lirik",
      "description": "This API endpoint provides a random 'Tebak Lirik' (guess the lyrics) question. Each request delivers a snippet of song lyrics, challenging users to identify the correct song title and/or artist. This endpoint is ideal for music quiz games, entertainment applications, or any platform focused on testing knowledge of popular song lyrics across various genres. The response will be a JSON object containing the lyrics excerpt and its correct song/artist information.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/tebaklogo",
      "summary": "tebak logo",
      "description": "This API endpoint provides a random 'Tebak Logo' (guess the logo) question. Each request delivers an image of a well-known brand or application logo, challenging users to identify the correct company or app. This endpoint is ideal for logo quiz games, marketing trivia, or any platform focused on testing brand recognition skills. The response will be a JSON object containing the logo image URL and its correct name.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/tebaktebakan",
      "summary": "tebak tebakan",
      "description": "This API endpoint provides a random 'Tebak Tebakan' (riddle or guessing game) question. Each request delivers a new riddle designed to challenge wits and creativity. This endpoint is ideal for interactive entertainment applications, casual games, or any platform that aims to engage users with humorous or thought-provoking riddles. The response will be a JSON object containing the riddle and its answer.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/tebakwarna",
      "summary": "tebak warna",
      "description": "This API endpoint provides a random 'Tebak Warna' (guess the color) question. Each request delivers a challenge related to color identification, often used in games designed to test color perception or knowledge. This endpoint is ideal for interactive quizzes, educational tools focused on colors, or any platform that aims to engage users with visual color-based puzzles. The response will be a JSON object containing the color hint (e.g., color code, description) and its correct name.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/games/tekateki",
      "summary": "teka teki",
      "description": "This API endpoint provides a random 'Teka Teki' (riddle) question. Each request delivers a new riddle designed to challenge wits and critical thinking. This endpoint is ideal for interactive riddle games, casual entertainment applications, or any platform focused on engaging users with clever and humorous puzzles. The response will be a JSON object containing the riddle and its correct answer.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Get Data": [
    {
      "method": "GET",
      "path": "/api/get/ampreset",
      "summary": "Detail Alight Motion Preset",
      "description": "This API endpoint allows you to retrieve detailed metadata for an Alight Motion project. By providing a valid Alight Motion project URL, the API scrapes the necessary information, including the User ID (UID) and Project ID (PID), to fetch details such as the project's name, creator, and other relevant properties. This is useful for developers who need to integrate Alight Motion project data into their applications or services. The API expects the URL as a query parameter and returns structured JSON data containing the project's information.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "Alight Motion project URL (e.g., https://alight.link/u/UID/p/PID)",
          "example": "https://alight.link/u/123456/p/abcdef"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/get/musixmatch",
      "summary": "Get Data From Musixmatch",
      "description": "This API endpoint retrieves song lyrics, artist, and album information from Musixmatch. Users provide the Musixmatch URL of a song, and the API scrapes the page to extract the song title and segmented lyrics, including sections like VERSE, CHORUS, and associated performers. This is valuable for applications needing to display lyrics or analyze song structures. The API uses Puppeteer with Stealth Plugin to avoid bot detection, ensuring reliable data extraction. The response includes the song title and a formatted string of lyrics.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "The Musixmatch URL of the song lyrics to scrape.",
          "example": "https://www.musixmatch.com/lyrics/Maman-Fvndy-4/Garam-Dan-Madu?utm_source=application&utm_campaign=api&utm_medium=musixmatch-community%3A1409608317702"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Iloveimg": [
    {
      "method": "GET",
      "path": "/api/iloveimg/blurface",
      "summary": "blurface",
      "description": "This API blurs faces detected in an image provided via a URL. Users can submit a URL of an image, and the API will process it to identify and blur human faces, returning the modified image. This is useful for privacy protection in images. The API supports various image formats and ensures that sensitive information (faces) is obscured while maintaining the overall image quality for other purposes.",
      "parameters": [
        {
          "name": "image",
          "in": "query",
          "type": "string($url)",
          "description": "Image URL",
          "example": "https://i.pinimg.com/736x/0b/9f/0a/0b9f0a92a598e6c22629004c1027d23f.jpg"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/iloveimg/compress",
      "summary": "compress",
      "description": "Compress an image by providing its URL. This API endpoint allows you to reduce the file size of an image fetched from a given URL. It supports common image formats like JPG, JPEG, PNG, GIF, and WEBP. The compressed image will be returned as a binary response. This is useful for optimizing website performance or reducing storage space.",
      "parameters": [
        {
          "name": "image",
          "in": "query",
          "type": "string($url)",
          "description": "Image URL",
          "example": "https://i.pinimg.com/736x/0b/9f/0a/0b9f0a92a598e6c22629004c1027d23f.jpg"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/iloveimg/image2jpg",
      "summary": "image2jpg",
      "description": "Convert an image to JPG format by providing its URL. This API endpoint allows you to transform various image formats into a standardized JPG format. It supports common image formats like PNG, GIF, and WEBP, converting them into a high-quality JPG image. The converted image will be returned as a binary response. This is useful for ensuring image compatibility across different platforms or reducing file size while maintaining visual quality.",
      "parameters": [
        {
          "name": "image",
          "in": "query",
          "type": "string($url)",
          "description": "Image URL",
          "example": "https://i.pinimg.com/736x/0b/9f/0a/0b9f0a92a598e6c22629004c1027d23f.jpg"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/iloveimg/image2png",
      "summary": "image2png",
      "description": "Convert an image to PNG format by providing its URL. This API endpoint allows you to transform various image formats into a standardized PNG format. It supports common image formats like JPG, GIF, and WEBP, converting them into a high-quality PNG image. The converted image will be returned as a binary response. This is useful for ensuring image compatibility across different platforms or for applications requiring transparent backgrounds.",
      "parameters": [
        {
          "name": "image",
          "in": "query",
          "type": "string($url)",
          "description": "Image URL",
          "example": "https://i.pinimg.com/736x/0b/9f/0a/0b9f0a92a598e6c22629004c1027d23f.jpg"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/iloveimg/removebg",
      "summary": "removebg",
      "description": "Remove background from an image using a URL as a query parameter. This API endpoint allows you to intelligently detect and remove the background from an image, leaving the main subject isolated. It is ideal for creating transparent images for product listings, graphic design, or any scenario requiring a clean subject without distractions. The output will typically be a PNG image with a transparent background.",
      "parameters": [
        {
          "name": "image",
          "in": "query",
          "type": "string($url)",
          "description": "Image URL",
          "example": "https://i.pinimg.com/736x/0b/9f/0a/0b9f0a92a598e6c22629004c1027d23f.jpg"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/iloveimg/upscale",
      "summary": "upscale",
      "description": "Upscale an image by providing its URL. This API endpoint uses advanced algorithms to increase the resolution of an image by a factor of 2x or 4x, improving its quality and detail. It is ideal for enhancing low-resolution images for printing, digital displays, or any application requiring higher image clarity. The output will be a higher-resolution image in JPEG format.",
      "parameters": [
        {
          "name": "image",
          "in": "query",
          "type": "string($url)",
          "description": "Image URL",
          "example": "https://i.pinimg.com/736x/0b/9f/0a/0b9f0a92a598e6c22629004c1027d23f.jpg"
        },
        {
          "name": "scale",
          "in": "query",
          "type": "integer",
          "description": "Upscale factor (2 or 4). Defaults to 2.",
          "example": ""
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "ImgEdit": [
    {
      "method": "GET",
      "path": "/api/imgedit/convphoto",
      "summary": "convert photo",
      "description": "Convert a photo to a cartoon style using a URL and specified template/style. This endpoint leverages ImgEdit.ai's capabilities to transform an uploaded image into various artistic cartoon or sketch styles. Users can choose from different templates like 'sketch_v2' for line art or 'anime' for vibrant cartoon effects, and then select a specific style within that template. The output is a processed image in PNG format, suitable for creative projects or social media sharing.",
      "parameters": [
        {
          "name": "image",
          "in": "query",
          "type": "string($url)",
          "description": "Image URL",
          "example": "https://i.pinimg.com/736x/0b/9f/0a/0b9f0a92a598e6c22629004c1027d23f.jpg"
        },
        {
          "name": "template",
          "in": "query",
          "type": "string",
          "description": "The cartoon template to apply. Available: sketch_v2, anime.",
          "example": ""
        },
        {
          "name": "style",
          "in": "query",
          "type": "string",
          "description": "The specific style within the chosen template. Examples for sketch_v2: manga_sketch, ink_painting. Examples for anime: color_rough, 3d.",
          "example": "manga_sketch"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/imgedit/faceswap",
      "summary": "face swap",
      "description": "Swap faces between two images provided as URLs. This API endpoint allows you to seamlessly replace a face in one image with a face from another image. Simply provide the URLs of the two images, and the AI will handle the rest. This feature is perfect for creating humorous content, photo manipulations, or various creative projects. The result will be a JSON object containing the URL of the swapped image.",
      "parameters": [
        {
          "name": "image1",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the first image (main image to swap face into).",
          "example": "https://files.catbox.moe/5cr45d.png"
        },
        {
          "name": "image2",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the second image (image containing the face to be swapped).",
          "example": "https://files.catbox.moe/1ait9s.jpg"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Info": [
    {
      "method": "GET",
      "path": "/api/info/bmkg",
      "summary": "bmkg gempa",
      "description": "This API endpoint provides the latest earthquake information from BMKG (Badan Meteorologi, Klimatologi, dan Geofisika), the Indonesian Agency for Meteorology, Climatology, and Geophysics. It fetches data on automatic earthquakes, recent earthquakes, and felt earthquakes. The endpoint returns a structured JSON object containing all three categories of earthquake data. This information can be used for applications requiring real-time earthquake monitoring, public safety alerts, or geographical analysis of seismic activity.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/info/cuaca",
      "summary": "cuaca",
      "description": "This API endpoint provides weather information based on a location query. It searches for relevant administrative regions and retrieves current weather data from the BMKG (Indonesian Agency for Meteorology, Climatology, and Geophysics). Users can input a location name, and the API will return a list of matching regions with their codes, names, similarity scores, and associated weather data if available. This is useful for applications requiring location-specific weather forecasts.",
      "parameters": [
        {
          "name": "q",
          "in": "query",
          "type": "string",
          "description": "Location query",
          "example": "pasiran jaya"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/info/event-Indonesia",
      "summary": "Indonesia event",
      "description": "This API endpoint provides comprehensive information about national holidays and other important events in Indonesia. It aggregates data from various sources, including Wikipedia and the Tanggalan website, to offer details on today's events, upcoming national events, and holidays. The response includes structured data on all recorded holidays and national days, as well as statistics on the total number of events. This endpoint is useful for applications requiring a calendar of Indonesian national events, such as planning tools, news platforms, or educational resources.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/info/jadwaltv",
      "summary": "jadwalTV",
      "description": "This API endpoint allows you to retrieve the current TV schedule for various national channels in Indonesia. You can either fetch the schedules for all available national channels at the moment or specify a particular channel to get its detailed schedule. This is useful for applications that need to display up-to-date television programming information, such as TV guides, media portals, or smart home integrations. The response includes the broadcast time and the name of the program for each entry.",
      "parameters": [
        {
          "name": "channel",
          "in": "query",
          "type": "string",
          "description": "The name of the TV channel to get the schedule for (e.g., sctv). Leave empty to get the schedule for all national channels.",
          "example": "sctv"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Maker": [
    {
      "method": "GET",
      "path": "/api/m/beautiful",
      "summary": "beautiful",
      "description": "This API endpoint applies a 'beautiful' effect to an image provided via a URL. It fetches the image, overlays it onto a base image, and returns the modified image. This effect can be used to add an artistic or decorative touch to user-submitted images, making them appear more visually appealing for various creative applications.",
      "parameters": [
        {
          "name": "image",
          "in": "query",
          "type": "string($url)",
          "description": "The URL of the image to apply the beautiful effect to.",
          "example": "https://i.ibb.co/9rtTrVy/download-1.jpg"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/m/blur",
      "summary": "blur",
      "description": "This API endpoint allows you to apply a blur effect to an image provided via a URL. The image will be fetched through a proxy to handle potential cross-origin issues. The processed image will be returned as a PNG buffer. This can be used for various creative applications, such as creating background effects, artistic filters, or to obscure sensitive information in images.",
      "parameters": [
        {
          "name": "image",
          "in": "query",
          "type": "string($url)",
          "description": "Image URL",
          "example": "https://i.ibb.co/9rtTrVy/download-1.jpg"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/m/brat",
      "summary": "brat",
      "description": "Generate a Brat image or animated GIF from text. This API allows users to create visual representations of text, either as a static image (WEBP format) or an animated GIF. The text input will be processed and rendered by the Brat Generator tool, with options for animation and delay between words in the GIF. This can be used for creative content, social media posts, or dynamic text displays.",
      "parameters": [
        {
          "name": "text",
          "in": "query",
          "type": "string",
          "description": "The text content",
          "example": "Hello world!"
        },
        {
          "name": "isAnimated",
          "in": "query",
          "type": "boolean",
          "description": "Animated GIF",
          "example": ""
        },
        {
          "name": "delay",
          "in": "query",
          "type": "integer",
          "description": "Delay between words (ms)",
          "example": "500"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/m/carbonify",
      "summary": "carbonify",
      "description": "This API endpoint allows users to generate visually appealing images from code snippets, often referred to as 'carbonizing' code. It takes a code string as input and returns an image (PNG format) of the code with syntax highlighting and a stylish background. This is useful for sharing code snippets on social media, presentations, or documentation, making them more readable and aesthetically pleasing. The endpoint supports various programming languages and provides a quick way to convert raw code into a shareable image. The output is a direct image file, making it easy to embed or display.",
      "parameters": [
        {
          "name": "input",
          "in": "query",
          "type": "string",
          "description": "The code snippet to carbonify",
          "example": "console.log('Hello, World!');"
        },
        {
          "name": "title",
          "in": "query",
          "type": "string",
          "description": "Optional title for the image",
          "example": "My Function"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/m/circle",
      "summary": "circle",
      "description": "Apply a circle mask to an image fetched from a URL. This API takes an image URL as input, downloads the image (via a proxy if configured), applies a circular mask to it, and returns the modified image as a PNG. This can be used for creating profile pictures, avatars, or any other circular image design from existing rectangular images.",
      "parameters": [
        {
          "name": "image",
          "in": "query",
          "type": "string($url)",
          "description": "The URL of the image to apply the circle mask to.",
          "example": "https://i.ibb.co/9rtTrVy/download-1.jpg"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/m/darkness",
      "summary": "darkness",
      "description": "Apply a darkness effect to an image fetched from a URL. This API takes an image URL and an optional darkness 'amount' as input. It downloads the image (via a proxy if configured), adjusts the RGB values of each pixel to decrease brightness, and returns the modified image as a PNG. This can be used for artistic effects, creating mood, or correcting overexposed images.",
      "parameters": [
        {
          "name": "image",
          "in": "query",
          "type": "string($url)",
          "description": "The URL of the image to apply the darkness effect to.",
          "example": "https://i.ibb.co/9rtTrVy/download-1.jpg"
        },
        {
          "name": "amount",
          "in": "query",
          "type": "integer",
          "description": "The amount of darkness to apply (0-255).",
          "example": "50"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/m/ektp",
      "summary": "ektp generator",
      "description": "This API generates a simulated Indonesian e-KTP (Kartu Tanda Penduduk) image based on the provided query parameters. Users can input various personal details such as province, city, NIK (National Identification Number), name, date of birth, gender, blood type, address, RT/RW, sub-district/village, district, religion, marital status, occupation, citizenship, validity period, issue date, and a URL for a passport-style photo. The API then renders these details onto an e-KTP template and returns the generated image as a PNG buffer. This tool is useful for creating mock e-KTP images for testing, development, or educational purposes, allowing developers to simulate real-world e-KTP data and visualize how it would appear on the card.",
      "parameters": [
        {
          "name": "provinsi",
          "in": "query",
          "type": "string",
          "description": "The province.",
          "example": "JAWA BARAT"
        },
        {
          "name": "kota",
          "in": "query",
          "type": "string",
          "description": "The city.",
          "example": "BANDUNG"
        },
        {
          "name": "nik",
          "in": "query",
          "type": "string",
          "description": "The National Identification Number.",
          "example": "1234567890123456"
        },
        {
          "name": "nama",
          "in": "query",
          "type": "string",
          "description": "The full name.",
          "example": "John Doe"
        },
        {
          "name": "ttl",
          "in": "query",
          "type": "string",
          "description": "The place and date of birth (e.g., Bandung, 01-01-1990).",
          "example": "Bandung, 01-01-1990"
        },
        {
          "name": "jenis_kelamin",
          "in": "query",
          "type": "string",
          "description": "The gender.",
          "example": ""
        },
        {
          "name": "golongan_darah",
          "in": "query",
          "type": "string",
          "description": "The blood type.",
          "example": ""
        },
        {
          "name": "alamat",
          "in": "query",
          "type": "string",
          "description": "The address.",
          "example": "Jl. Contoh No. 123"
        },
        {
          "name": "rt/rw",
          "in": "query",
          "type": "string",
          "description": "The RT/RW (neighborhood/community unit).",
          "example": "001/002"
        },
        {
          "name": "kel/desa",
          "in": "query",
          "type": "string",
          "description": "The sub-district/village.",
          "example": "Sukajadi"
        },
        {
          "name": "kecamatan",
          "in": "query",
          "type": "string",
          "description": "The district.",
          "example": "Sukajadi"
        },
        {
          "name": "agama",
          "in": "query",
          "type": "string",
          "description": "The religion.",
          "example": "Islam"
        },
        {
          "name": "status",
          "in": "query",
          "type": "string",
          "description": "The marital status.",
          "example": "Belum Kawin"
        },
        {
          "name": "pekerjaan",
          "in": "query",
          "type": "string",
          "description": "The occupation.",
          "example": "Pegawai Swasta"
        },
        {
          "name": "kewarganegaraan",
          "in": "query",
          "type": "string",
          "description": "The citizenship.",
          "example": "WNI"
        },
        {
          "name": "masa_berlaku",
          "in": "query",
          "type": "string",
          "description": "The validity period.",
          "example": "Seumur Hidup"
        },
        {
          "name": "terbuat",
          "in": "query",
          "type": "string",
          "description": "The date of issue.",
          "example": "01-01-2023"
        },
        {
          "name": "pas_photo",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the passport photo.",
          "example": "https://i.pinimg.com/736x/0b/9f/0a/0b9f0a92a598e6c22629004c1027d23f.jpg"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/m/facepalm",
      "summary": "facepalm",
      "description": "This API endpoint applies a 'facepalm' effect to an image provided via a URL. Users can submit a direct image URL, and the API will fetch the image, overlay a facepalm graphic onto it, and return the modified image. This can be used for humorous content creation, memes, or satirical purposes. The output is always a PNG image.",
      "parameters": [
        {
          "name": "image",
          "in": "query",
          "type": "string($url)",
          "description": "Image URL",
          "example": "https://i.ibb.co/9rtTrVy/download-1.jpg"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/m/sertifikat-tolol",
      "summary": "sertifikat tolol",
      "description": "This API endpoint generates a 'Sertifikat Tolol' (Fool's Certificate) image with custom text. Users can provide a string of text via a query parameter, which will be rendered onto a pre-designed certificate template. This feature is primarily for entertainment purposes, allowing users to create humorous or ironic 'certificates' for various scenarios. The generated image is returned in JPEG format.",
      "parameters": [
        {
          "name": "text",
          "in": "query",
          "type": "string",
          "description": "Text to display on the certificate",
          "example": "lorem ipsum!"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/m/textpro",
      "summary": "textpro",
      "description": "This API endpoint allows you to generate custom images using textpro.me effects by providing a TextPro URL and up to two text inputs. It supports various text effects available on the textpro.me website. The endpoint handles the entire process, including reCAPTCHA bypass, form submission, and image generation, returning the final image as a binary buffer. This is useful for creating personalized images programmatically, such as logos, banners, or stylized text for social media and web applications.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "TextPro URL ending in .html",
          "example": "https://textpro.me/create-neon-devil-wings-text-effect-online-free-1014.html"
        },
        {
          "name": "text1",
          "in": "query",
          "type": "string",
          "description": "First text input",
          "example": "Hello"
        },
        {
          "name": "text2",
          "in": "query",
          "type": "string",
          "description": "Second text input (optional)",
          "example": "World"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/m/tweet",
      "summary": "tweet generator",
      "description": "This API endpoint allows you to generate a realistic-looking tweet image by providing various parameters such as profile picture, display name, username, tweet content, an optional image within the tweet, theme (dark, light, or dim), retweet count, quote count, like count, and the client from which the tweet was posted. It is useful for creating mockups, social media content, or testing purposes.",
      "parameters": [
        {
          "name": "profile",
          "in": "query",
          "type": "string",
          "description": "Profile picture URL",
          "example": "https://avatars.githubusercontent.com/u/159487561?v=4"
        },
        {
          "name": "name",
          "in": "query",
          "type": "string",
          "description": "Display name",
          "example": "siputzx"
        },
        {
          "name": "username",
          "in": "query",
          "type": "string",
          "description": "Username",
          "example": "siputzx"
        },
        {
          "name": "tweet",
          "in": "query",
          "type": "string",
          "description": "Tweet content",
          "example": "Hello World"
        },
        {
          "name": "image",
          "in": "query",
          "type": "string",
          "description": "Tweet image URL",
          "example": "null"
        },
        {
          "name": "theme",
          "in": "query",
          "type": "string",
          "description": "Tweet theme",
          "example": ""
        },
        {
          "name": "retweets",
          "in": "query",
          "type": "integer",
          "description": "Number of retweets",
          "example": "1000"
        },
        {
          "name": "quotes",
          "in": "query",
          "type": "integer",
          "description": "Number of quotes",
          "example": "200"
        },
        {
          "name": "likes",
          "in": "query",
          "type": "integer",
          "description": "Number of likes",
          "example": "5000"
        },
        {
          "name": "client",
          "in": "query",
          "type": "string",
          "description": "Client name",
          "example": "Twitter for iPhone"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Primbon": [
    {
      "method": "GET",
      "path": "/api/primbon/artinama",
      "summary": "arti nama",
      "description": "This API endpoint allows users to retrieve the meaning of a given name from Primbon. It takes a name as input and returns its meaning, if found, along with a note about name compatibility. This can be used for personal curiosity, cultural studies, or integrating name meanings into applications.",
      "parameters": [
        {
          "name": "nama",
          "in": "query",
          "type": "string",
          "description": "The name to search for.",
          "example": "putu"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/primbon/cek_potensi_penyakit",
      "summary": "cek potensi penyakit",
      "description": "This API endpoint allows users to check their potential disease risks based on their birth date, using the Pythagorean method as per Primbon calculations. It takes the day, month, and year of birth as input and provides an analysis of potential health issues, analyzed sectors, and missing elements, along with important preventive notes. This can be used for personal health awareness or numerological insights into well-being.",
      "parameters": [
        {
          "name": "tgl",
          "in": "query",
          "type": "integer",
          "description": "Day of birth (e.g., 12).",
          "example": "12"
        },
        {
          "name": "bln",
          "in": "query",
          "type": "integer",
          "description": "Month of birth (e.g., 05 for May).",
          "example": "05"
        },
        {
          "name": "thn",
          "in": "query",
          "type": "integer",
          "description": "Year of birth (e.g., 1998).",
          "example": "1998"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/primbon/kecocokan_nama_pasangan",
      "summary": "kecocokan nama pasangan",
      "description": "This API endpoint allows users to check the compatibility of two names according to Primbon. It takes two names as input and returns details about their positive and negative aspects, along with a related image and additional notes for further compatibility checks. This is useful for those interested in traditional Indonesian beliefs about relationship compatibility.",
      "parameters": [
        {
          "name": "nama1",
          "in": "query",
          "type": "string",
          "description": "The first name for compatibility.",
          "example": "putu"
        },
        {
          "name": "nama2",
          "in": "query",
          "type": "string",
          "description": "The second name for compatibility.",
          "example": "keyla"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/primbon/nomorhoki",
      "summary": "nomor hoki",
      "description": "This API endpoint determines the 'lucky' status of a given phone number based on Primbon's Bagua Shuzi and energy calculations. It analyzes the number to provide insights into positive energy aspects (wealth, health, love, stability) and negative energy aspects (disputes, loss, disaster, destruction). The endpoint also provides an overall analysis indicating if the number is considered lucky based on predefined thresholds. This can be used for personal interest or applications involving numerology.",
      "parameters": [
        {
          "name": "phoneNumber",
          "in": "query",
          "type": "string",
          "description": "The phone number to check (numbers only, e.g., '6281234567890').",
          "example": "6285658939117"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/primbon/ramalanjodoh",
      "summary": "ramalan jodoh",
      "description": "This API endpoint offers a Javanese Primbon-based marriage compatibility prediction. Users provide the names and birth dates (day, month, year) of two individuals. The API processes this information and returns a detailed compatibility analysis based on 6 'petung perjodohan' from the 'Betaljemur Adammakna' book. It includes details about each person, a comprehensive list of predictions, and an important warning regarding interpretation. This endpoint is useful for those interested in traditional Javanese cultural beliefs about marriage and relationships.",
      "parameters": [
        {
          "name": "nama1",
          "in": "query",
          "type": "string",
          "description": "Name of the first person.",
          "example": "putu"
        },
        {
          "name": "tgl1",
          "in": "query",
          "type": "integer",
          "description": "Birth day of the first person (e.g., 16).",
          "example": "16"
        },
        {
          "name": "bln1",
          "in": "query",
          "type": "integer",
          "description": "Birth month of the first person (e.g., 11 for November).",
          "example": "11"
        },
        {
          "name": "thn1",
          "in": "query",
          "type": "integer",
          "description": "Birth year of the first person (e.g., 2007).",
          "example": "2007"
        },
        {
          "name": "nama2",
          "in": "query",
          "type": "string",
          "description": "Name of the second person.",
          "example": "keyla"
        },
        {
          "name": "tgl2",
          "in": "query",
          "type": "integer",
          "description": "Birth day of the second person (e.g., 1).",
          "example": "1"
        },
        {
          "name": "bln2",
          "in": "query",
          "type": "integer",
          "description": "Birth month of the second person (e.g., 1 for January).",
          "example": "1"
        },
        {
          "name": "thn2",
          "in": "query",
          "type": "integer",
          "description": "Birth year of the second person (e.g., 2008).",
          "example": "2008"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/primbon/ramalanjodohbali",
      "summary": "ramalan jodoh bali",
      "description": "This API endpoint offers a Balinese Primbon-based marriage compatibility prediction. Users provide the names and birth dates (day, month, year) of two individuals. The API processes this information and returns a detailed compatibility analysis according to the 'Pal Sri Sedanai' method, including the birth details of both individuals and a comprehensive result of their suitability. Additionally, it provides notes for further compatibility checks using other Primbon methods. This endpoint is useful for those interested in traditional Balinese cultural beliefs about marriage and relationships.",
      "parameters": [
        {
          "name": "nama1",
          "in": "query",
          "type": "string",
          "description": "Name of the first person.",
          "example": "putu"
        },
        {
          "name": "tgl1",
          "in": "query",
          "type": "integer",
          "description": "Birth day of the first person (e.g., 16).",
          "example": "16"
        },
        {
          "name": "bln1",
          "in": "query",
          "type": "integer",
          "description": "Birth month of the first person (e.g., 11 for November).",
          "example": "11"
        },
        {
          "name": "thn1",
          "in": "query",
          "type": "integer",
          "description": "Birth year of the first person (e.g., 2007).",
          "example": "2007"
        },
        {
          "name": "nama2",
          "in": "query",
          "type": "string",
          "description": "Name of the second person.",
          "example": "keyla"
        },
        {
          "name": "tgl2",
          "in": "query",
          "type": "integer",
          "description": "Birth day of the second person (e.g., 1).",
          "example": "1"
        },
        {
          "name": "bln2",
          "in": "query",
          "type": "integer",
          "description": "Birth month of the second person (e.g., 1 for January).",
          "example": "1"
        },
        {
          "name": "thn2",
          "in": "query",
          "type": "integer",
          "description": "Birth year of the second person (e.g., 2008).",
          "example": "2008"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/primbon/rejeki_hoki_weton",
      "summary": "rejeki hoki weton",
      "description": "This API endpoint provides luck and fortune predictions based on Javanese Wetons. Users input their birth day, month, and year, and the API returns their Weton (day of birth combination) and a prediction regarding their fortune or 'rejeki'. It also includes a philosophical note emphasizing effort over pure prediction. This endpoint is useful for those interested in Javanese cultural beliefs about destiny and prosperity.",
      "parameters": [
        {
          "name": "tgl",
          "in": "query",
          "type": "integer",
          "description": "Day of birth (e.g., 1).",
          "example": "1"
        },
        {
          "name": "bln",
          "in": "query",
          "type": "integer",
          "description": "Month of birth (e.g., 1 for January).",
          "example": "1"
        },
        {
          "name": "thn",
          "in": "query",
          "type": "integer",
          "description": "Year of birth (e.g., 2025).",
          "example": "2025"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/primbon/sifat_usaha_bisnis",
      "summary": "sifat usaha bisnis",
      "description": "This API endpoint provides insights into an individual's business characteristics and suitability for various ventures, based on their birth date according to Primbon. Users input their birth day, month, and year, and the API returns their birth day details and an analysis of their business nature. It also includes a note emphasizing the importance of understanding these traits for self-improvement and better collaboration in business. This endpoint is useful for those seeking traditional guidance on their entrepreneurial path.",
      "parameters": [
        {
          "name": "tgl",
          "in": "query",
          "type": "integer",
          "description": "Day of birth (e.g., 1).",
          "example": "1"
        },
        {
          "name": "bln",
          "in": "query",
          "type": "integer",
          "description": "Month of birth (e.g., 1 for January).",
          "example": "1"
        },
        {
          "name": "thn",
          "in": "query",
          "type": "integer",
          "description": "Year of birth (e.g., 2000).",
          "example": "2000"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/primbon/tafsirmimpi",
      "summary": "tafsir mimpi",
      "description": "This API endpoint interprets dreams based on Primbon, a traditional Javanese and Balinese divination system. Users can input a keyword representing their dream, and the API will return a list of interpretations related to that keyword, along with a general solution or advice. This endpoint is useful for those seeking traditional insights into the meanings of their dreams.",
      "parameters": [
        {
          "name": "mimpi",
          "in": "query",
          "type": "string",
          "description": "The dream keyword to interpret (e.g., 'bertemu' for meeting, 'ular' for snake).",
          "example": "bertemu"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/primbon/zodiak",
      "summary": "zodiak",
      "description": "This API endpoint retrieves detailed information for a specific zodiac sign from Primbon. Users provide the name of a zodiac sign, and the API returns various attributes associated with it, including lucky numbers, lucky aromas, ruling planet, lucky flower, lucky color, lucky stone, lucky element, and compatible zodiac signs. This endpoint is useful for those interested in astrology and traditional Primbon insights related to zodiac signs.",
      "parameters": [
        {
          "name": "zodiak",
          "in": "query",
          "type": "string",
          "description": "The name of the zodiac sign (e.g., 'gemini').",
          "example": ""
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Random": [
    {
      "method": "GET",
      "path": "/api/r/blue-archive",
      "summary": "random blue archive",
      "description": "This API endpoint provides a random image from the popular game 'Blue Archive'. It fetches image URLs from a curated GitHub Gist and returns a binary image response. This can be used for various applications requiring random image content related to Blue Archive, such as fan-made apps, entertainment bots, or personal projects. The endpoint ensures a direct image delivery for seamless integration.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/r/cats",
      "summary": "random foto kucing",
      "description": "This API endpoint delivers a random image of a cat. It fetches the image from an external API and returns it directly as a binary response. This is ideal for applications, websites, or bots that need to display cute cat pictures to users, providing a delightful and engaging experience with every request.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/r/cecan/china",
      "summary": "random cecan china",
      "description": "This API endpoint provides a random image of Chinese 'cecan' (beautiful women). It fetches image URLs from a curated GitHub Gist and returns a binary image response. This can be used for various applications requiring random image content, such as chatbots, entertainment websites, or personal projects. The endpoint ensures a direct image delivery for seamless integration.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/r/cecan/indonesia",
      "summary": "random cecan indonesia",
      "description": "This API endpoint provides a random image of Indonesian 'cecan' (beautiful women). It fetches image URLs from a curated GitHub Gist and returns a binary image response. This can be used for various applications requiring random image content, such as chatbots, entertainment websites, or personal projects. The endpoint ensures a direct image delivery for seamless integration.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/r/cecan/japan",
      "summary": "random cecan japan",
      "description": "This API endpoint provides a random image of Japanese 'cecan' (beautiful women). It fetches image URLs from a curated GitHub Gist and returns a binary image response. This can be used for various applications requiring random image content, such as chatbots, entertainment websites, or personal projects. The endpoint ensures a direct image delivery for seamless integration.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/r/cecan/korea",
      "summary": "random cecan korea",
      "description": "This API endpoint provides a random image of Korean 'cecan' (beautiful women). It fetches image URLs from a curated GitHub Gist and returns a binary image response. This can be used for various applications requiring random image content, such as chatbots, entertainment websites, or personal projects. The endpoint ensures a direct image delivery for seamless integration.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/r/cecan/thailand",
      "summary": "random cecan thailand",
      "description": "This API endpoint provides a random image of Thai 'cecan' (beautiful women). It fetches image URLs from a curated GitHub Gist and returns a binary image response. This can be used for various applications requiring random image content, such as chatbots, entertainment websites, or personal projects. The endpoint ensures a direct image delivery for seamless integration.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/r/cecan/vietnam",
      "summary": "random cecan vietnam",
      "description": "This API endpoint provides a random image of Vietnamese 'cecan' (beautiful women). It fetches image URLs from a curated GitHub Gist and returns a binary image response. This can be used for various applications requiring random image content, such as chatbots, entertainment websites, or personal projects. The endpoint ensures a direct image delivery for seamless integration.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/r/lahelu",
      "summary": "lahelu",
      "description": "This API endpoint retrieves random posts from the Lahelu platform. It fetches a list of recommended posts using a randomized cursor, ensuring a diverse selection with each request. The output includes detailed information about each post, such as post ID, media URLs (including thumbnails), user profiles, and creation timestamps, all formatted for easy consumption. This endpoint is ideal for applications requiring fresh and engaging content from Lahelu.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/r/neko",
      "summary": "random anime neko",
      "description": "This API endpoint provides a random image of an anime neko (cat girl). It fetches the image from a popular waifu API and returns it directly as a binary response. This is perfect for applications, websites, or bots that need to display charming and random anime neko images to their users, adding a touch of cuteness and engagement.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/r/quotesanime",
      "summary": "animequotes",
      "description": "This API endpoint provides random anime quotes. It scrapes quotes from a Japanese anime quote website, extracting details like the quote text, character, anime title, episode, image, and original link. This can be used by developers to integrate dynamic and engaging anime-related content into their applications, bots, or websites, offering a unique user experience with fresh quotes every time.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/r/rumahmisteri",
      "summary": "rumah misteri",
      "description": "This API endpoint provides random mystery stories from 'Rumah Misteri'. It scrapes data from the website, including post details such as ID, thumbnail information, categories, publication metadata (date, author), title, content summary, and related tags. Each request retrieves a different set of stories, making it ideal for applications that require fresh and intriguing content related to mysteries, horror, or unexplained phenomena. Developers can use this to enrich their platforms with captivating narratives.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/r/seegore",
      "summary": "seegore",
      "description": "This API endpoint provides random posts from Seegore, a website containing gore content. It scrapes a random page from the site, extracts details of available posts (title, link, thumbnail, views, votes, tags, comments), selects one randomly, and then fetches more detailed information including video sources. This endpoint is intended for specific applications that require access to such content, with a clear warning about its explicit nature.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/r/waifu",
      "summary": "random waifu",
      "description": "This API endpoint provides a random waifu image. It fetches the image from a popular waifu API and returns it directly as a binary response. This is ideal for applications, websites, or bots that need to display charming and random anime waifu images to their users, adding a touch of visual appeal and engagement.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Search": [
    {
      "method": "GET",
      "path": "/api/github/dependents",
      "summary": "dependents",
      "description": "This API endpoint allows you to retrieve a list of repositories that depend on a specified GitHub repository. It scrapes the GitHub website to gather information about direct dependents, including their usernames, repository names, repository URLs, star counts, and fork counts. You can specify the GitHub repository URL and a page range to control the depth of the scrape. This is useful for analyzing project dependencies, identifying popular integrations, or understanding the ecosystem around a specific library or framework.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "The GitHub repository URL",
          "example": "https://github.com/WhiskeySockets/Baileys"
        },
        {
          "name": "begin",
          "in": "query",
          "type": "integer",
          "description": "Starting page for scraping",
          "example": "0"
        },
        {
          "name": "end",
          "in": "query",
          "type": "integer",
          "description": "Ending page for scraping",
          "example": "2"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/images",
      "summary": "google image",
      "description": "This API endpoint allows users to search for images on Google Images by providing a search query. It scrapes image URLs, widths, and heights directly from Google's image search results. The endpoint provides a powerful way to integrate Google Image search capabilities into applications, allowing for the retrieval of relevant images based on user input. It also includes filtering capabilities to exclude specific domains from the search results, ensuring more targeted and useful outcomes.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "The search term for Google Images",
          "example": "siputzx"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/8font",
      "summary": "8 font",
      "description": "This API endpoint allows you to search for fonts available on 8font.com. You can specify a search query to find fonts matching your criteria and also paginate through the results. This is useful for developers who need to integrate font search capabilities into their applications or for designers looking for specific font styles.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "Search query",
          "example": "cartoon"
        },
        {
          "name": "page",
          "in": "query",
          "type": "integer",
          "description": "Page number",
          "example": "1"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/animequotes",
      "summary": "quoted anime",
      "description": "This API endpoint allows you to search for anime quotes from Otakotaku.com. You can provide a query parameter to filter quotes based on keywords, character names, or anime titles. The endpoint will return a list of matching quotes, including details such as the quote itself, the character who said it, the anime and episode it's from, a link to the quote, and an associated image. This API is useful for developers building applications that need to display or analyze anime quotes, or for users looking for specific memorable lines from their favorite anime.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "The search query for anime quotes (e.g., 'sad', 'love', character name).",
          "example": "fate"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/applemusic",
      "summary": "music apple",
      "description": "This API endpoint allows users to search for music on Apple Music. You can specify a search query (e.g., song title, artist name) and an optional region to get localized search results. The API will return a list of music tracks, including their title, artist, a direct link to the content on Apple Music, and an image if available. This is useful for integrating Apple Music search functionality into applications.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "Music search query",
          "example": "duka"
        },
        {
          "name": "region",
          "in": "query",
          "type": "string",
          "description": "Two-letter country code",
          "example": "id"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/bimg",
      "summary": "bing image",
      "description": "This API endpoint allows you to search for images using Bing's image search engine. Provide a search query, and the API will return a list of image URLs found on Bing. This is useful for applications requiring image search capabilities, such as content aggregation, visual search tools, or automated image fetching.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "Image search query",
          "example": "kucing"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/brave",
      "summary": "brave",
      "description": "This API endpoint performs a web search using the Brave search engine. It takes a search query as input and returns a list of search results, including the title, description, URL, image URL (if available), site name, and publication date for each result. This is useful for applications that need to integrate a privacy-focused web search capability.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "The search query",
          "example": "apa itu nodejs"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/duckduckgo",
      "summary": "duckduckgo",
      "description": "This API endpoint allows you to perform web searches using DuckDuckGo. You can specify a search query, and optionally filter results by country/region and time. The API will return a list of search results including titles, URLs, snippets, display URLs, and favicons. It also indicates if there are more results available for pagination.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "The search query string",
          "example": "openai"
        },
        {
          "name": "kl",
          "in": "query",
          "type": "string",
          "description": "Country/region code (e.g., 'au-en', 'id-en')",
          "example": "us-en"
        },
        {
          "name": "df",
          "in": "query",
          "type": "string",
          "description": "Time filter ('d'=day, 'w'=week, 'm'=month, 'y'=year)",
          "example": ""
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/gitagram",
      "summary": "gitagram",
      "description": "This API endpoint allows users to search for music chords on Gitagram by providing a music title or artist. It scrapes the search results from Gitagram and then retrieves the detailed chord information for each result, providing a comprehensive set of data including the song title, artist, direct link to the chords, type of content, and the full chord sheet. This API is useful for musicians, developers building music applications, or anyone looking to quickly access guitar or piano chords for a specific song.",
      "parameters": [
        {
          "name": "search",
          "in": "query",
          "type": "string",
          "description": "Music title or artist",
          "example": "sekuat hatimu"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/gsmarena",
      "summary": "gsmarena",
      "description": "This API endpoint allows users to search for mobile phone information on GSMArena.com. By providing a search query, users can retrieve a list of devices matching the query, including their ID, name, thumbnail image, and a brief description. This is useful for developers building applications that require device specifications or for users who want to quickly look up phone models and their basic details.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "The search query for mobile phones (e.g., 'iphone', 'samsung galaxy')",
          "example": "iphone"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/kbbi",
      "summary": "kbbi",
      "description": "This API endpoint allows users to search for definitions of words in the official Indonesian Dictionary (KBBI). By providing a word as a query, the API will return a structured list of definitions, including numerical indices for different meanings and sub-definitions. This endpoint is ideal for applications requiring access to the Indonesian language's authoritative lexicon, such as educational tools, natural language processing projects, or spell checkers.",
      "parameters": [
        {
          "name": "q",
          "in": "query",
          "type": "string",
          "description": "The word to search in KBBI",
          "example": "asu"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/lahelu",
      "summary": "lahelu",
      "description": "This API endpoint allows users to search for posts on Lahelu.com, a social media platform, by providing a search query. It retrieves and formats information about relevant posts, including their unique ID, associated media (image or video), media thumbnail, the username and avatar of the user who posted it, and the creation timestamp. This endpoint is useful for integrating Lahelu's content into other applications, for content discovery, or for analyzing popular trends on the platform.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "The search query for Lahelu posts",
          "example": "drak"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/mangatoon",
      "summary": "mangatoon",
      "description": "This API endpoint allows users to search for comics and novels on Mangatoon. By providing a search query, the API returns categorized results including comics found on the internet, comics hosted directly on Mangatoon, and novels. Each result provides the title, cover image URL, and a direct link to the content. This endpoint is valuable for applications focused on manga and web novel discovery, content aggregation, or personal reading list management.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "The search query for Mangatoon",
          "example": "cat"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/mcpedl",
      "summary": "mcpedlsearch",
      "description": "This API endpoint allows users to search for Minecraft Pocket Edition (MCPE) content on MCPEDL.org using a search query. It scrapes information such as the title, direct link, image thumbnail, and rating for each relevant result. This endpoint is useful for developers building tools or applications for Minecraft players, allowing them to easily discover and access mods, maps, textures, and other add-ons for MCPE.",
      "parameters": [
        {
          "name": "q",
          "in": "query",
          "type": "string",
          "description": "The search query for MCPEDL",
          "example": "shaders"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/musixmatch",
      "summary": "musixmatch",
      "description": "This API endpoint allows you to search for tracks on Musixmatch. You can specify a track title or artist as a query parameter. The API will return a list of tracks that match your search query, including details such as track name, artist name, and track ID. This can be used to find specific songs or artists for various applications, such as lyric finders or music information services. The endpoint supports robust search capabilities to help users find relevant music data quickly and efficiently.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "The track title or artist to search for on Musixmatch",
          "example": "garam dan madu"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/myinstants",
      "summary": "my instants",
      "description": "Search for instant sound clips on MyInstants.com using query parameters. This API endpoint allows users to find a variety of sound clips by providing a search query. The response includes details about each sound, such as its title, a unique instant ID, a shareable URL to the sound's page, and a direct URL to the sound file. This can be used for integrating sound searches into applications, bots, or any platform requiring quick access to a library of short audio clips.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "Search query",
          "example": "cihuyy"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/otakotaku",
      "summary": "otakotaku",
      "description": "Search for anime, characters, and articles on Otakotaku.com using query parameters. This endpoint provides a comprehensive search across different categories on Otakotaku, including anime titles, character profiles, and news articles. Users can specify a search query to retrieve relevant results, which include the title, image URL, and a direct link to the content on Otakotaku. This API is useful for developers building applications that need to integrate with Otakotaku's content, such as anime tracking apps, character databases, or news aggregators focused on Japanese pop culture.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "The search query for Otakotaku",
          "example": "mahiru"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/pinterest",
      "summary": "pinterest",
      "description": "This API endpoint allows you to search for various media types on Pinterest, including images, videos, and GIFs. You can specify a search query to find relevant content. The results will include details such as the Pinterest pin URL, original link, creation date, image URL, video URL (if applicable), GIF URL (if applicable), title, description, and information about the pinner and board. This is useful for applications requiring visual content search from Pinterest.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "The search query for Pinterest (e.g., 'cat', 'nature wallpaper').",
          "example": "cat"
        },
        {
          "name": "type",
          "in": "query",
          "type": "string",
          "description": "Optional filter to return specific media type (image, video, or gif).",
          "example": ""
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/pinterest-lens",
      "summary": "pinterest lens search",
      "description": "This API endpoint allows you to search Pinterest using an image URL. It leverages the Pinterest visual lens technology to find similar pins based on the provided image. The endpoint expects a valid image URL as a query parameter. It will then fetch the image, validate it, and use it to perform a visual search on Pinterest. The response will include a list of relevant pins with details such as ID, title, description, media (image or video), creator information, and engagement statistics. This can be used for reverse image search, finding product inspirations, or discovering visually similar content on Pinterest.",
      "parameters": [
        {
          "name": "imageUrl",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the image to search on Pinterest",
          "example": "https://example.com/image.jpg"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/resep",
      "summary": "resep koki",
      "description": "This API endpoint allows you to search for recipes on ResepKoki.id and retrieve detailed information about them. You can provide a search query for various recipes like 'ayam goreng' (fried chicken) or 'nasi goreng' (fried rice). The endpoint will return a list of recipes that match your query, including details such as the recipe title, cooking time, yield, difficulty level, a thumbnail image, a list of ingredients with their quantities, and step-by-step cooking instructions. This API is useful for anyone looking for recipe ideas or needing structured cooking data for applications.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "The search query for recipes (e.g., 'ayam goreng', 'nasi goreng').",
          "example": "nasi goreng"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/seegore",
      "summary": "seegore",
      "description": "This API allows users to search for videos on Seegore.com using a search query. It scrapes the website for relevant video results and returns details such as video title, uploader, thumbnail, and a direct link to the video. This can be used to integrate Seegore search functionality into applications or bots, providing access to their video content based on user-defined keywords.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "Search query",
          "example": "train"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/soundcloud",
      "summary": "soundcloud",
      "description": "This API allows users to search for music tracks on SoundCloud. By providing a search query, users can retrieve a list of tracks with details such as genre, creation date, duration, permalink, comment count, artwork URL, and playback count. This endpoint is useful for applications that need to integrate SoundCloud search functionality or display track information.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "SoundCloud search query",
          "example": "duka"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/spotify",
      "summary": "spotify",
      "description": "This API endpoint allows you to search for tracks on Spotify. You can provide a search query as a parameter, and the API will return relevant track information including track URL, thumbnail, title, artist, duration, preview URL, album, and release date. This is useful for applications that need to integrate Spotify search functionality.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "Search query",
          "example": "serana"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/tiktok",
      "summary": "tiktok",
      "description": "This API endpoint allows you to search for TikTok videos by providing a keyword. It returns a list of videos matching the search query, including details such as video URL, author, description, and other relevant metadata. This is useful for applications that want to integrate TikTok video search capabilities.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "The keyword to search for TikTok videos (e.g., 'sad', 'funny cats').",
          "example": "sad"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/wikipedia",
      "summary": "wikipedia",
      "description": "This API endpoint allows you to search for articles on Wikipedia (Indonesian version) by providing a search query. It returns the main descriptive paragraph of the article and an associated thumbnail image if available. This is useful for quickly retrieving summaries of topics from Wikipedia.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "The search query for Wikipedia (e.g., 'prabowo', 'jakarta').",
          "example": "prabowo"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/s/youtube",
      "summary": "youtube",
      "description": "This API endpoint allows you to search for videos and channels on YouTube. Users can provide a search query as a parameter, and the API will return relevant results, including videos and channel information. This is useful for applications requiring Youtube integration, such as custom video players, content aggregators, or research tools. The API aims to provide comprehensive search results from YouTube, making it easier to find specific content programmatically.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "Youtube query",
          "example": "sc bot"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Stalker": [
    {
      "method": "GET",
      "path": "/api/stalk/github",
      "summary": "github",
      "description": "This API endpoint allows you to retrieve detailed profile information for any GitHub user. By providing a GitHub username, you can access public data such as their username, nickname, bio, profile picture URL, repository count, follower/following counts, and more. This is useful for applications requiring GitHub user data lookup, profile display, or analysis of developer activity.",
      "parameters": [
        {
          "name": "user",
          "in": "query",
          "type": "string",
          "description": "GitHub username",
          "example": "octocat"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/stalk/instagram",
      "summary": "instagram",
      "description": "This API endpoint allows you to retrieve detailed profile information for any Instagram user by providing their username as a query parameter. It fetches public data such as their full name, biography, profile picture URL, follower and following counts, post count, and details about their recent posts including captions, like counts, and comments. This is ideal for applications needing to display Instagram user profiles or analyze public Instagram data.",
      "parameters": [
        {
          "name": "username",
          "in": "query",
          "type": "string",
          "description": "The Instagram username",
          "example": "google"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/stalk/pinterest",
      "summary": "pinterest",
      "description": "This API endpoint allows you to retrieve public profile information for a specified Pinterest user using their username as a query parameter. It provides detailed data including their ID, full name, bio, profile image URLs (small, medium, large, original), statistics on pins, followers, following, boards, likes, and saves. Additionally, it provides information about their website, location, country, verification status, and social media links. This is useful for applications requiring Pinterest user data for display or analysis.",
      "parameters": [
        {
          "name": "q",
          "in": "query",
          "type": "string",
          "description": "The Pinterest username",
          "example": "dims"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/stalk/roblox",
      "summary": "roblox",
      "description": "This API endpoint provides comprehensive information about a Roblox user. It takes a Roblox username as input and returns a detailed profile including basic user info, status, presence, social statistics (friends, followers, following counts), group affiliations, recently played and favorite games, avatar details (headshot, full body, bust, and currently wearing items), and a list of badges, collectibles, and bundles. The endpoint is designed to give a complete overview of a user's activity and profile on the Roblox platform. It's useful for a variety of applications, such as user analytics, profile visualization, and social tracking.",
      "parameters": [
        {
          "name": "user",
          "in": "query",
          "type": "string",
          "description": "Roblox username",
          "example": "builderman"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/stalk/threads",
      "summary": "threads",
      "description": "This API endpoint allows you to retrieve public profile information for a Threads user by providing their username as a query parameter. It scrapes data such as their ID, username, full name, biography, profile pictures (standard and HD), verification status, follower count, and external links in their bio. This is ideal for applications needing to display Threads user profiles or analyze public Threads data.",
      "parameters": [
        {
          "name": "q",
          "in": "query",
          "type": "string",
          "description": "The Threads username (without @)",
          "example": "google"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/stalk/tiktok",
      "summary": "tiktok",
      "description": "This API endpoint allows you to retrieve public profile information for a specified TikTok user using their username as a query parameter. It fetches detailed user information, including statistics and other publicly available data. This is useful for applications requiring TikTok user data for display, analysis, or integration.",
      "parameters": [
        {
          "name": "username",
          "in": "query",
          "type": "string",
          "description": "The TikTok username to stalk",
          "example": "mrbeast"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/stalk/twitter",
      "summary": "twitter",
      "description": "This API endpoint allows you to retrieve public profile information for a specified Twitter (X) user using their username as a query parameter. It fetches detailed user data including their ID, username, display name, verification status, biography, location, account creation date, and various statistics such as tweet count, followers, following, likes, and media count. It also provides URLs for their profile image and banner. This is useful for applications requiring Twitter user data for display, analysis, or integration.",
      "parameters": [
        {
          "name": "user",
          "in": "query",
          "type": "string",
          "description": "The Twitter (X) username to stalk",
          "example": "siputzx"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/stalk/youtube",
      "summary": "youtube",
      "description": "This API endpoint allows you to retrieve public information about a YouTube channel and its latest five videos by providing a YouTube username as a query parameter. It fetches channel details such as username, display name, subscriber count, video count, avatar URL, channel URL, and description. For each of the latest videos, it provides the video ID, title, thumbnail, published time, view count, duration, and direct video URL. This is useful for applications or users wanting to get quick insights into a YouTube channel's content and statistics.",
      "parameters": [
        {
          "name": "username",
          "in": "query",
          "type": "string",
          "description": "The YouTube channel username",
          "example": "siputzx"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Sticker": [
    {
      "method": "GET",
      "path": "/api/sticker/combot-search",
      "summary": "combot sticker",
      "description": "This API allows you to search for Telegram sticker packs on Combot.org. You can specify a search query and a page number to retrieve results. The API will return details about each sticker pack, including its title, creation and update dates, sticker type, total number of stickers, a list of sticker image URLs, and a direct link to add the sticker pack to Telegram.",
      "parameters": [
        {
          "name": "q",
          "in": "query",
          "type": "string",
          "description": "Search query for stickers",
          "example": "jomok nye"
        },
        {
          "name": "page",
          "in": "query",
          "type": "integer",
          "description": "Page number for results",
          "example": "1"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/sticker/stickerly-detail",
      "summary": "stickerly detail",
      "description": "This API endpoint retrieves detailed information about a sticker pack from Sticker.ly using its share URL. It parses the URL to extract the sticker pack ID and then fetches comprehensive data, including the pack's name, author details (name, username, bio, followers, following, privacy status, avatar, website, and share URL), a list of individual stickers with their file names, animation status, and image URLs, as well as overall sticker pack metrics like sticker count, view count, export count, payment status, animation status, and a thumbnail URL.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "Sticker.ly share URL",
          "example": "https://sticker.ly/s/W7ES6T"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/sticker/stickerly-search",
      "summary": "stickerly search",
      "description": "This API allows you to search for sticker packs on Sticker.ly using a query parameter. It returns a list of sticker packs matching the query, including details such as the pack name, author, number of stickers, view count, export count, whether it's paid or animated, a thumbnail URL, and its share URL.",
      "parameters": [
        {
          "name": "query",
          "in": "query",
          "type": "string",
          "description": "Search keyword for sticker packs",
          "example": "love"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Tools": [
    {
      "method": "GET",
      "path": "/api/tools/base642text",
      "summary": "base642text",
      "description": "This API endpoint decodes a Base64 encoded string into plain text. Users can provide a Base64 string as a query parameter, and the API will return the decoded text. This is a simple utility for converting Base64 encoded data back to its original string format, useful for various data manipulation and decoding tasks.",
      "parameters": [
        {
          "name": "base64",
          "in": "query",
          "type": "string",
          "description": "The Base64 encoded string to decode",
          "example": "SGVsbG8gV29ybGQ="
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/tools/binary2text",
      "summary": "binary2text",
      "description": "This API endpoint converts a binary code string into human-readable text. Users can provide a space-separated binary string as a query parameter, and the API will decode it to its corresponding text representation. This utility is useful for decoding binary messages or data back into a readable format.",
      "parameters": [
        {
          "name": "content",
          "in": "query",
          "type": "string",
          "description": "The binary string to convert to text (e.g., \"01001000 01100101\")",
          "example": "01001000 01100101 01101100 01101100 01101111"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/tools/colorize",
      "summary": "colorize",
      "description": "This API endpoint colorizes a grayscale image using a provided URL. Users can submit the URL of a grayscale image, and the API will process it to add color, returning the colorized image as a WebP buffer. This tool is ideal for restoring old photos or enhancing black and white images with realistic colors.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string($url)",
          "description": "The URL of the grayscale image to colorize.",
          "example": "https://files.catbox.moe/258vhm.jpg"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/tools/countryInfo",
      "summary": "country Info",
      "description": "This API endpoint provides detailed information about a country based on its name. Users can search for a country using a query parameter, and the API will return comprehensive data including its capital, flag, phone code, continent, geographical coordinates, area, languages, famous features, constitutional form, neighboring countries, currency, driving side, alcohol prohibition status, internet TLD, and ISO codes. The endpoint also includes a similarity matching feature to suggest countries if the input name is not an exact match.",
      "parameters": [
        {
          "name": "name",
          "in": "query",
          "type": "string",
          "description": "The name of the country to search for",
          "example": "Indonesia"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/tools/dewatermark",
      "summary": "dewatermark",
      "description": "This API endpoint allows users to remove watermarks from images by providing a direct URL to the image. It supports various image formats that can be processed to detect and eliminate watermarks, returning a clean version of the image. This tool is useful for photographers, designers, and anyone needing to restore original image quality without watermarks. The process involves fetching the image from the provided URL, performing watermark detection and removal using an advanced algorithm, and then returning the processed image. Error handling is robust, providing clear messages for invalid URLs or unsupported file types.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string($url)",
          "description": "Image URL with watermark",
          "example": "https://files.catbox.moe/258vhm.jpg"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/tools/dns",
      "summary": "dns",
      "description": "This API endpoint allows you to retrieve DNS records for a specified domain. You can optionally choose a specific DNS server to perform the lookup. This is useful for debugging DNS issues, verifying domain ownership, or simply gathering information about a domain's DNS configuration. The API provides a structured response containing various types of DNS records such as A, AAAA, MX, NS, CNAME, TXT, and more, depending on what is configured for the domain. If no DNS server is specified, it defaults to Cloudflare's DNS.",
      "parameters": [
        {
          "name": "domain",
          "in": "query",
          "type": "string",
          "description": "Domain name",
          "example": "google.com"
        },
        {
          "name": "dnsServer",
          "in": "query",
          "type": "string",
          "description": "DNS server",
          "example": "cloudflare"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/tools/fake-data",
      "summary": "fake data",
      "description": "This API endpoint allows you to generate various types of fake data for development and testing purposes. You can specify the type of data to generate (e.g., person, company, product, address, internet, finance, vehicle, lorem, date) and the number of entries you need. This is incredibly useful for populating databases, mocking API responses, or creating realistic test scenarios without using real sensitive information. Each data type comes with a predefined set of relevant fields, offering a quick and efficient way to get dummy data.",
      "parameters": [
        {
          "name": "type",
          "in": "query",
          "type": "string",
          "description": "Type of data",
          "example": ""
        },
        {
          "name": "count",
          "in": "query",
          "type": "integer",
          "description": "Number of entries",
          "example": "5"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/tools/identify-anime",
      "summary": "identify anime",
      "description": "This API endpoint allows users to identify an anime from an image URL. By providing a valid image URL, the API will analyze the image content to determine the anime title, character, genres, premiere date, production house, and a brief description. This is useful for users who encounter an anime image and want to know more about it.",
      "parameters": [
        {
          "name": "imageUrl",
          "in": "query",
          "type": "string($url)",
          "description": "URL of the image to identify",
          "example": "https://files.catbox.moe/57d96s.jpg"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/tools/kodepos",
      "summary": "kodepos",
      "description": "This API endpoint allows you to search for postal code information based on a given location name, such as a village or district. It queries the official Indonesian postal code database to retrieve details including the postal code, village, sub-district, city, and province. This service is essential for applications requiring address validation, delivery planning, or geographical data enrichment. By providing accurate postal code information, it helps ensure precise location identification for various logistical and administrative tasks.",
      "parameters": [
        {
          "name": "form",
          "in": "query",
          "type": "string",
          "description": "Location name",
          "example": "pasiran jaya"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/tools/ngl",
      "summary": "ngl",
      "description": "This API endpoint allows you to send anonymous messages to an NGL.link profile. Users can provide the NGL.link profile URL and the message text as query parameters. The API will then interact with the NGL.link service to deliver the message anonymously. This is useful for integrations where you want to automate sending anonymous feedback or questions to NGL profiles. The response will indicate the success or failure of the message submission.",
      "parameters": [
        {
          "name": "link",
          "in": "query",
          "type": "string",
          "description": "The NGL.link profile URL",
          "example": "https://ngl.link/xxxx"
        },
        {
          "name": "text",
          "in": "query",
          "type": "string",
          "description": "The anonymous message to send",
          "example": "hai"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/tools/nik-checker",
      "summary": "nik checker",
      "description": "This API endpoint provides a comprehensive NIK (Nomor Induk Kependudukan - Indonesian National ID Number) checker. It retrieves information related to the NIK, including personal data, regional details, and DPT (Daftar Pemilih Tetap - Permanent Voter List) status if available. Users can input a 16-digit NIK, and the API will attempt to parse the NIK for embedded information like gender, date of birth, age, zodiac sign, and Javanese calendar market day. Additionally, it tries to fetch DPT data from the KPU (Komisi Pemilihan Umum - General Elections Commission) website to provide details such as name, address, polling station (TPS), and geographical coordinates. This tool is useful for verifying NIK data, understanding demographic information, and checking voter registration status.",
      "parameters": [
        {
          "name": "nik",
          "in": "query",
          "type": "string",
          "description": "16-digit Indonesian National ID number",
          "example": "3202285909840005"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/tools/qr2text",
      "summary": "qr2text",
      "description": "This API endpoint allows you to extract text from a QR code provided as an image URL. It is useful for quickly decoding QR codes without needing a dedicated scanner. Simply provide the URL of an image containing a QR code, and the API will return the embedded text. This can be used in various applications, such as integrating QR code scanning into web applications, automating data extraction from QR codes, or verifying QR code content programmatically. The API supports standard image formats where QR codes are typically found.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string($url)",
          "description": "Image URL",
          "example": "https://files.catbox.moe/uegf8m.png"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/tools/skiplink",
      "summary": "Skiplink Bypass",
      "description": "This API endpoint bypasses link shorteners using bypass.city service with Turnstile token solving. It takes a shortener URL and returns the bypassed direct link.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "Link shortener URL to bypass",
          "example": "https://linkvertise.com/514008/hydrogen-gateway-1"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/tools/subdomains",
      "summary": "subdomain finder",
      "description": "This API endpoint helps you discover subdomains associated with a given root domain. It queries public certificate transparency logs to identify domains that have had SSL/TLS certificates issued, often revealing active subdomains. This tool is valuable for cybersecurity researchers, penetration testers, and anyone performing reconnaissance on a domain. It provides a list of unique, sorted subdomains, aiding in understanding a domain's attack surface or infrastructure.",
      "parameters": [
        {
          "name": "domain",
          "in": "query",
          "type": "string",
          "description": "Domain to search",
          "example": "siputzx.my.id"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/tools/text2base64",
      "summary": "text2base64",
      "description": "This API endpoint converts any given plain text string into its Base64 encoded representation. Base64 encoding is a common method used to represent binary data in an ASCII string format, making it suitable for transmission over mediums that only handle text. This tool is useful for developers, system administrators, and anyone needing to encode data for various purposes such as data serialization, embedding images in HTML, or transmitting data over HTTP. The conversion is straightforward and efficient.",
      "parameters": [
        {
          "name": "text",
          "in": "query",
          "type": "string",
          "description": "Text to encode",
          "example": "Hello World"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/tools/text2binary",
      "summary": "text2binary",
      "description": "This API endpoint converts any given plain text string into its binary representation. Each character in the input text is converted into its 8-bit binary equivalent, padded with leading zeros if necessary, and separated by spaces. This tool is useful for educational purposes, understanding character encodings, or specific data manipulation tasks where binary representation is required. It provides a direct and clear conversion of textual data into a sequence of binary digits.",
      "parameters": [
        {
          "name": "content",
          "in": "query",
          "type": "string",
          "description": "Text content",
          "example": "Hello"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/tools/text2qr",
      "summary": "text2qr",
      "description": "This API endpoint generates a high-quality QR code image from any provided text string. It uses a high error correction level and outputs a large PNG image, ensuring readability and versatility. This tool is perfect for creating QR codes for URLs, contact information, plain text messages, or any data that needs to be easily scanned. It can be integrated into various applications for dynamic QR code generation, marketing, or information sharing.",
      "parameters": [
        {
          "name": "text",
          "in": "query",
          "type": "string",
          "description": "Text for QR code",
          "example": "Hello World"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/tools/translate",
      "summary": "translate",
      "description": "This API endpoint provides text translation services, allowing you to convert text from one language to another. It supports auto-detection of the source language and a wide range of target languages. This tool is invaluable for applications requiring multi-language support, content localization, or quick personal translations. It offers a reliable and efficient way to break down language barriers by providing accurate translations for various use cases, from simple phrases to longer sentences.",
      "parameters": [
        {
          "name": "text",
          "in": "query",
          "type": "string",
          "description": "Text to translate",
          "example": "I love you"
        },
        {
          "name": "source",
          "in": "query",
          "type": "string",
          "description": "Source language code",
          "example": "en"
        },
        {
          "name": "target",
          "in": "query",
          "type": "string",
          "description": "Target language code",
          "example": "id"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/tools/tts",
      "summary": "tts",
      "description": "This API endpoint converts text into speech (TTS) using a highly customizable synthesis engine. You can specify the text to be spoken, choose from a variety of voices, and adjust parameters such as speech rate, pitch, and volume. This tool is perfect for creating audio content from text, developing accessible applications, or integrating voice capabilities into any system. It provides high-quality audio output, allowing for natural and expressive speech generation.",
      "parameters": [
        {
          "name": "text",
          "in": "query",
          "type": "string",
          "description": "Text to convert",
          "example": "halo piye kabare"
        },
        {
          "name": "voice",
          "in": "query",
          "type": "string",
          "description": "Voice for TTS",
          "example": "jv-ID-DimasNeural"
        },
        {
          "name": "rate",
          "in": "query",
          "type": "string",
          "description": "Speech rate",
          "example": "0%"
        },
        {
          "name": "pitch",
          "in": "query",
          "type": "string",
          "description": "Speech pitch",
          "example": "0Hz"
        },
        {
          "name": "volume",
          "in": "query",
          "type": "string",
          "description": "Speech volume",
          "example": "0%"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/tools/ttsgoogle",
      "summary": "tts google",
      "description": "This API endpoint converts text into speech using Google's Text-to-Speech (TTS) capabilities, leveraging Google Gemini's underlying infrastructure. It requires specific cookies to function, which are hardcoded within the API for demonstration purposes. Users can provide text as a query parameter, and the API will return the spoken audio in MP3 format. This is ideal for generating natural-sounding voiceovers, integrating voice responses into applications, or testing Google's TTS quality for various languages. Note: The reliability of this endpoint may vary due to its reliance on hardcoded cookies and external services.",
      "parameters": [
        {
          "name": "text",
          "in": "query",
          "type": "string",
          "description": "Text to convert to speech",
          "example": "halo semua"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/tools/upscale",
      "summary": "upscale",
      "description": "This API endpoint upscales/enhances an image using PicsArt AI enhancement service. Users can submit the URL of an image along with a target scale factor (1-20), and the API will process it using REALESERGAN model with face enhancement, returning the upscaled image as a PNG buffer. This tool is ideal for improving image quality and resolution.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string($url)",
          "description": "The URL of the image to upscale.",
          "example": "https://files.catbox.moe/258vhm.jpg"
        },
        {
          "name": "scale",
          "in": "query",
          "type": "number",
          "description": "The upscale factor (1-20). Higher values produce larger images.",
          "example": "4"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/tools/vcc-generator",
      "summary": "vcc generator",
      "description": "This API endpoint allows you to generate virtual credit card (VCC) details for various card types. You can specify the type of card (e.g., Visa, MasterCard) and the number of cards to generate (up to a maximum of 5). The API will return generated card details including card number, expiration date, cardholder name, and CVV. This tool can be useful for testing payment systems or for educational purposes where dummy card data is required.",
      "parameters": [
        {
          "name": "type",
          "in": "query",
          "type": "string",
          "description": "Credit card type",
          "example": ""
        },
        {
          "name": "count",
          "in": "query",
          "type": "integer",
          "description": "Number of VCCs",
          "example": "3"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "method": "GET",
      "path": "/api/tools/voices",
      "summary": "list voice",
      "description": "This API endpoint provides a comprehensive list of available voices that can be used for Text-to-Speech (TTS) functionalities. It fetches real-time data from an external TTS service, offering a variety of voice options, including different languages, genders, and tones. Developers can utilize this list to integrate diverse voice capabilities into their applications, allowing for more dynamic and user-friendly audio outputs. The response includes details for each voice, such as its unique identifier and language code, facilitating easy selection and implementation.",
      "parameters": [],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ],
  "Youtube Downloader": [
    {
      "method": "GET",
      "path": "/api/d/ytpost",
      "summary": "Youtube Community",
      "description": "This API endpoint scrapes the latest post from a YouTube channel's community tab. Users can provide the URL of the community tab as a query parameter. The API extracts details such as the post ID, author, content text, and image URLs if available. This is useful for tracking community updates or integrating YouTube community content into other applications.",
      "parameters": [
        {
          "name": "url",
          "in": "query",
          "type": "string",
          "description": "The URL of the YouTube channel's community tab",
          "example": "https://www.youtube.com/@YouTubeCreators/community"
        }
      ],
      "responses": [
        {
          "code": "200",
          "description": "Successful response"
        },
        {
          "code": "400",
          "description": "Bad request"
        },
        {
          "code": "429",
          "description": "Too many requests"
        },
        {
          "code": "500",
          "description": "Internal server error"
        }
      ]
    }
  ]
}